<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Kristaps Grinbergs</title><description>Kristaps Grinbergs - Blockchain, mobile and fullstack developer. Startup founder. Conference speaker. Mentor. Passionate about building products, sustainability and Web 3.0</description><link>https://kristaps.me</link><language>en</language><lastBuildDate>Sat, 5 Jul 2025 12:07:37 +0000</lastBuildDate><pubDate>Sat, 5 Jul 2025 12:07:37 +0000</pubDate><ttl>250</ttl><atom:link href="https://kristaps.me/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-erc-20-approve</guid><title>Understanding approve() in ERC-20: Why It Matters and How to Use It Safely</title><description>This post takes a closer look at the `approve()` function in the ERC-20 token standard. While commonly used in DeFi applications, it introduces a huge risk if not handled correctly. Learn how to use it safely and avoid known vulnerabilities.</description><link>https://kristaps.me/blog/solidity-erc-20-approve</link><pubDate>Sat, 5 Jul 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In a <a href="https://kristaps.me/blog/solidity-erc-20/">previous post</a>, I gave a quick overview of ERC-20 ‚Äî the fungible token standard used across EVM-compatible chains. Like how one dollar bill is interchangeable with another, ERC-20 tokens are designed to be equal in value and function.</p><p>Today, I want to dig deeper into one function in this standard that often goes unnoticed - but is critical for interacting with dApps and smart contracts: <code>approve()</code>.</p><h2>What <code>approve()</code> does?</h2><p>The <code>approve(address spender, uint256 amount)</code> function lets the token holder (caller) authorize another address (the spender) to spend tokens on their behalf ‚Äî up to a defined limit.</p><p>This is essential when interacting with DeFi protocols, DEXes like Uniswap, or any smart contract that requires moving tokens from your wallet. Instead of transferring tokens directly, you first give the smart contract permission to pull tokens from your balance when needed.</p><pre><code><span class="type">IERC20</span>(token).<span class="call">approve</span>(spender, amount);
</code></pre><h2>Why You Should Care: Security Implications</h2><p>The naive implementation of approve() can be risky.</p><p>Let's say you initially approve 100 tokens, then later decide to reduce it to 50. If you call <code>approve(spender, 50)</code>, there is a chance that the spender sees both approvals before the new one takes effect ‚Äî and spends both amounts.</p><p>This race condition is well-documented and can be exploited. See the issue on <a href="https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729">GitHub</a>.</p><p>The best practice is to first set the allowance to 0 and only then set it to the desired value.</p><pre><code>token.<span class="call">approve</span>(spender, <span class="number">0</span>);
token.<span class="call">approve</span>(spender, newAmount);
</code></pre><p>You can also use the OpenZeppelin's <code>SafeERC20</code> library with methods like <code>safeApprove()</code>, <code>safeIncreaseAllowance()</code>, and <code>safeDecreaseAllowance()</code> instead of manually calling <code>approve()</code>. Looking at this library is outside the scope of this blog post.</p><h2>TL;DR</h2><p>The <code>approve()</code> function of the ERC-20 standard permits a smart contract (or another address) to spend your tokens. It is a key part of token transfers in DeFi applications. Be careful and always reset to 0 before updating allowances to avoid race conditions.</p><p>The ERC-20 standard may seem simple, but subtle details like this one can expose users to a real risk of losing money.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/erc-20-approve-attack">Sample code</a></li></ul><ul><li><a href="https://eips.ethereum.org/EIPS/eip-20">EIP-20: Token Standard</a></li><li><a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-20/">ERC-20 - Ethereum documentation</a></li><li><a href="https://docs.openzeppelin.com/contracts/4.x/erc20">ERC20 - OpenZeppelin documentation</a></li><li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol">ERC20 - OpenZeppelin implementation</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/dappcon-2025-berlin</guid><title>Back from Berlin Blockchain Week: Thoughts on DappCon, Privacy, and Where Blockchain Goes Next</title><description>DappCon in Berlin brought together builders tackling the big questions in Web3 - stablecoins, privacy, regulation, and UX. Berlin's deep-rooted values of privacy and self-expression made it the perfect setting. This post shares key insights from the conference and reflects on what still needs fixing to bring blockchain to everyday life.</description><link>https://kristaps.me/blog/dappcon-2025-berlin</link><pubDate>Fri, 20 Jun 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Berlin has always had a certain charm. A city where <a href="https://www.berlin.de/ea/en/privacy-statement/">privacy is king</a>. Whether it is cash payments or resistance movements, it is now at the heart of conversations about digital identity and decentralization. It is no coincidence that Ethereum launched here.</p><p>Or that David Bowie found creative freedom in its streets.</p><div style="text-align: center;" class="talk-media">
<iframe width="560" height="315" src="https://www.youtube.com/embed/QWtsV50_-p4?si=YYcbrKxf5YSa46Gt" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
</div><p>In Berlin, you are allowed to be yourself. No gaze. No judgment. Just expression.</p><p>And that is why <a href="https://dappcon.io/">DappCon</a>, a conference for decentralized app builders, felt so at home here. This city has always attracted more than just white-collar technologists. It attracts the kind of people described in¬†<a href="https://en.wikipedia.org/wiki/Hackers_%26_Painters">Hackers &amp; Painters</a>: People who think differently, create something new, and push boundaries.</p><h2>What We Talked About at DappCon</h2><p>DappCon is not just another tech conference. It is a gathering of creators trying to solve deep problems with blockchain‚Äîand this year, several themes stood out.</p><h3>üíµ Stablecoins: From Speculation to Real Use</h3><p>One huge hope is that stablecoins will finally bring millions into crypto - not for speculation, but for real use. However, there is a twist here: money is currently managed by governments. Are we comfortable trusting private companies to hold and manage our digital assets instead?</p><h3>üèõÔ∏è Governments &amp; Big Tech Enter the Chat</h3><p>From Stripe integrating crypto and <a href="https://cointelegraph.com/news/stripe-acquires-privy-crypto-wallet-infrastructure">buying blockchain companies</a> to the U.S. exploring blockchain regulation and Europe pushing <a href="https://www.esma.europa.eu/esmas-activities/digital-finance-and-innovation/markets-crypto-assets-regulation-mica">MICA</a>. Institutions are arriving at the party. It is a validation and concern at the same time. If we are not careful, the decentralized web might be colonized before it becomes mainstream.</p><h3>ü§Ø UX Is Still Broken</h3><p>Let's be honest. The UX in crypto is still terrible. And I do not just mean buttons and color schemes. I mean onboarding. Trust. Understanding. People still do not know what they are signing, why they are approving, or how to stay safe. We have protocols, but we lack simple onboarding and usage.</p><h3>üïµÔ∏è Privacy and Zero-Knowledge Proofs</h3><p>We do not want everyone to know how much we spend or when we spend it. <a href="https://en.wikipedia.org/wiki/Zero-knowledge_proof">Zero-knowledge proofs (ZKPs)</a> are becoming a must. It is not just a trend. Privacy is not about hiding. It is about owning your data, your identity, and your decisions. Apple (like them or not) but they promote privacy as default.</p><h2>Was DappCon Worth It?</h2><p>Inspiring? Absolutely.</p><p>But also, are conferences broken? Talks happen. Most people are in the hallway, sipping <a href="https://de.wikipedia.org/wiki/Club-Mate">Club Mate</a>. Almost nobody is listening (except <a href="https://en.wikipedia.org/wiki/Vitalik_Buterin">Vitalik</a> talking), asking questions, challenging ideas, or digging deeper during sessions. There is an opportunity to rethink how these events¬†could¬†be.</p><h3>TL;DR</h3><p>The blockchain technology is ready.</p><p>What we need now is storytelling, education, and interfaces that people can trust. We need to get these tools into everyday life.</p><p>Berlin reminded me why I started building in this space. I am hoping to be part of what brings blockchain to the people who need it most - not just another whitepaper but in their daily lives.</p><p>Let's build something that matters.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/erc-721-escrow</guid><title>Understanding Escrow in ERC-721 NFT Smart Contracts</title><description>The ERC-721 standard helps make buying and selling unique digital items (NFTs) safe and reliable. It is crucial to secure transactions between two parties. That is where escrow services come in. They act like a safety net, holding an NFT until everyone agrees and all rules have been met. Let's explore how we can develop an escrow using the ERC-721 standard using OpenZeppelin implementation.</description><link>https://kristaps.me/blog/erc-721-escrow</link><pubDate>Thu, 28 Mar 2024 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>The ERC-721 standard helps make buying and selling unique digital items (NFTs) safe and reliable. It is crucial to secure transactions between two parties. That is where escrow services come in. They act like a safety net, holding an NFT until everyone agrees and all rules have been met. Let's explore how we can develop an escrow using the ERC-721 standard using OpenZeppelin implementation.</p><h2>Sending an NFT to an Escrow</h2><p>At first, the NFT asset holder needs to approve that a specific token can be used by someone else to transfer it. Only the owner of that token can execute this command.</p><p>With the implementation of OpenZeppelin ERC-721, we can call the <code>approve(address to, uint256 tokenId)</code> function to delegate it.</p><pre><code><span class="comment">// Send to ESCROW address</span>
function <span class="call">sendToESCROW</span>(address escrow, uint256 tokenId) <span class="keyword">public</span> {
  <span class="call">approve</span>(escrow, tokenId);
}
</code></pre><p>In the code above, when the owner of the <code>tokenId</code> calls this function, they delegate transfer functionality to the <code>escrow</code> address. Now the <code>escrow</code> account holder can transfer this NFT to another address.</p><p>We can get an approved address to check if the token has been delegated to another account. If it is a zero (<code>0x</code>) address, that means it has not been delegated.</p><pre><code><span class="comment">// Returns the ESCROW address
// 0x address means that this NFT has not been sent to ESCROW</span>
function <span class="call">isSentToESCROW</span>(uint256 tokenId) <span class="keyword">public</span> view <span class="call">returns</span>(address) {
  <span class="keyword">return</span> <span class="call">_getApproved</span>(tokenId);
}
</code></pre><h2>Removing from an Escrow</h2><p>If the owner of the NFT changes their mind and wants to remove the delegation, they can do so by setting the approval address to zero (<code>0x</code>) address. In Solidity language, there is no concept of null values. The default value of an <code>address</code> type is zero (<code>0x</code>).</p><pre><code><span class="comment">// Remove from ESCROW</span>
function <span class="call">removeFromESCROW</span>(uint256 tokenId) <span class="keyword">public</span> {
  <span class="call">approve</span>(<span class="call">address</span>(<span class="number">0</span>), tokenId);
}
</code></pre><h2>Execute Transfer from an Escrow</h2><p>Suppose the token has been delegated to an escrow. The escrow can transfer it from the current owner to a new one because it has the right to do it.</p><pre><code><span class="comment">// Transfer to new owner from ESCROW</span>
function <span class="call">transferFromEscrow</span>(uint256 tokenId, address from, address to) <span class="keyword">public</span> {
  <span class="call">safeTransferFrom</span>(from, to, tokenId);
}
</code></pre><p>The OpenZeppelin ERC-721 implementation has the function <code>safeTransferFrom(address from, address to, uint256 tokenId)</code> that transfers a specific NFT <code>tokenId</code> from one account <code>from</code> to another <code>to</code>. The token must be owned by the <code>from</code> address. The caller is the escrow, and it has the right to move ownership of this NFT.</p><h2>TL;DR</h2><p>The ERC-721 standard and OpenZeppelin's implementation allow safe and reliable buying and selling of NFTs with escrow services. We can send an NFT to an escrow, check if an NFT has been delegated to an escrow, and remove an NFT from escrow. The escrow account holder can execute a transfer to a new owner. Using escrow allows all the parties to agree when the transfer happens when all the rules have been met.</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/f244139e246091225ecfebc2e77984b7">Demo code</a></li></ul><ul><li><a href="https://eips.ethereum.org/EIPS/eip-721">ERC-721: Non-Fungible Token Standard</a></li><li><a href="https://docs.openzeppelin.com/contracts/2.x/api/token/erc721">OpenZeppelin - ERC 721</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/nested-mappings-solidity</guid><title>Exploring Nested Mappings in Solidity</title><description>Nested mappings in Solidity offer developers powerful tools to efficiently organize and manipulate complex data structures. This blog post explores how to use nested mappings and their practical applications and provides transformative examples in smart contract development.</description><link>https://kristaps.me/blog/nested-mappings-solidity</link><pubDate>Wed, 28 Feb 2024 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Nested mappings in Solidity offer developers powerful tools to efficiently organize and manipulate complex data structures. This blog post explores how to use nested mappings and their practical applications and provides transformative examples in smart contract development.</p><h2>Nested Mapping in Solidity</h2><p>In Solidity, nested mapping involves using one mapping as the value type within another mapping. This technique enables developers to create multidimensional data structures within Ethereum smart contracts. Nested mappings facilitate hierarchical relationships between data elements.</p><p>In this post, we'll delve into an illustrative example showcasing how to organize employee records based on their respective departments efficiently.</p><p>First, we need to define a nested mapping. We can achieve that like a <a href="https://kristaps.me/blog/solidity-mapping/">regular mapping</a>, but we use another mapping instead of type.</p><pre><code><span class="call">mapping</span>(string =&gt; <span class="call">mapping</span>(address =&gt; <span class="type">Employee</span>)) <span class="keyword">private</span> employees;
</code></pre><p>In this example, we will use a <a href="https://kristaps.me/blog/solidity-structs/">Solidity struct type</a> that holds employee data like name and salary.</p><pre><code><span class="keyword">struct</span> Employee {
  string name;
  uint256 salary;
}
</code></pre><h2>Storing Values in a Nested Mapping</h2><p>When storing a value in a Solidity nested mapping, assigning the value based on the corresponding key pairs is essential. In our example, we use <code>department</code> and <code>address</code> keys. These keys are pivotal in structuring our example's nested mapping data.</p><pre><code>employees[department][_address] = <span class="type">Employee</span>(name, salary);
</code></pre><p>From the code provided above, it's evident that each employee record is stored within a specific department and is uniquely identified by the employee's blockchain address. This organizational structure allows efficient retrieval and management of employee data within the nested mapping, ensuring clarity and accessibility across departments.</p><h2>Retrieving Values from a Nested Mapping</h2><p>To retrieve a value from a nested mapping, it's essential to possess the corresponding keys for both the <code>department</code> and the employee's <code>address</code>. The retrieved value could either be the employee record or the default values of the <code>Employee</code> type. For instance, for the <code>uint256</code> type, the default value is zero (<code>0</code>). This mechanism enables us to ascertain the existence of the value within the mapping structure.</p><pre><code><span class="type">Employee</span> memory employee = employees[department][_address];
</code></pre><p>We can use the <code>require</code> statement to check if the value exists and show an error if it does not.</p><pre><code><span class="call">require</span>(employee.<span class="property">salary</span> != <span class="number">0</span>, <span class="string">"Employee does not exist"</span>);
</code></pre><h2>Integrating the Code</h2><p>Now, let's put all the code together. This code shows how we can save and retrieve a value in Solidity nested mapping.</p><pre><code>contract <span class="type">NestedMapping</span> {
  <span class="keyword">struct</span> Employee {
    string name;
    uint256 salary;
  }

  <span class="call">mapping</span>(string =&gt; <span class="call">mapping</span>(address =&gt; <span class="type">Employee</span>)) <span class="keyword">private</span> employees;

  function <span class="call">getEmployee</span>(string memory department,
                      address _address) external view returns (<span class="type">Employee</span> memory) {
    <span class="type">Employee</span> memory employee = employees[department][_address];
    <span class="call">require</span>(employee.<span class="property">salary</span> != <span class="number">0</span>, <span class="string">"Employee does not exist"</span>);
    <span class="keyword">return</span> employee;
  }

  function <span class="call">addEmployee</span>(string memory department,
                      address _address,
                      string memory name,
                      uint256 salary)
  <span class="call">external</span> {
    <span class="call">require</span>(_address != <span class="call">address</span>(<span class="number">0</span>), <span class="string">"Invalid address"</span>);
    <span class="call">require</span>(<span class="call">bytes</span>(name).<span class="property">length</span> &gt; <span class="number">0</span>, <span class="string">"Name cannot be empty"</span>);
    <span class="call">require</span>(employees[department][_address].salary == <span class="number">0</span>, <span class="string">"Employee already exists"</span>);

    employees[department][_address] = <span class="type">Employee</span>(name, salary);
  }
}
</code></pre><h2>TL;DR</h2><p>Solidity nested mappings are versatile data structures that allow developers to organize and manage complex data within Ethereum smart contracts. Nested mappings facilitate efficient data retrieval and manipulation by associating multiple keys with corresponding values. They enable hierarchical data organization, empowering developers to create dynamic and structured storage solutions tailored to decentralized application (dApp) requirements.</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/5b7e40bb62a1605163a6bf3fd999fbeb">Demo code</a></li></ul><ul><li><a href="https://docs.soliditylang.org/en/v0.8.13/types.html">Official documentation</a></li><li><a href="https://solidity-by-example.org/mapping/">Solidity by Example - Mapping</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/txorigin-vs-msgsender</guid><title>Understanding tx.origin and msg.sender in Solidity</title><description>Developers need to understand the difference between `tx.origin` and `msg.sender` in Solidity. These two global variables often need clarification with each other despite their fundamental differences. While they may appear similar at first glance, `tx.origin` and `msg.sender` represent distinct addresses in the context of a transaction. In this blog post, we will delve deeper into the meanings of each of these variables.</description><link>https://kristaps.me/blog/txorigin-vs-msgsender</link><pubDate>Sat, 6 Jan 2024 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Developers need to understand the difference between <code>tx.origin</code> and <code>msg.sender</code> in Solidity. These two global variables often need clarification with each other despite their fundamental differences. While they may appear similar at first glance, <code>tx.origin</code> and <code>msg.sender</code> represent distinct addresses in the context of a transaction. In this blog post, we will delve deeper into the meanings of each of these variables.</p><h2>What is <code>tx.origin</code>?</h2><p>In Solidity, <code>tx.origin</code> identifies the original sender of a transaction. It points to the external account initiating the transaction and remains constant throughout subsequent smart contract interactions (full call chain).</p><p>When a transaction is initiated through the MetaMask wallet, the address of the user's MetaMask wallet is stored in <code>tx.origin</code>. This address remains the same, even if the transaction passes through multiple contracts. The consistency of this address is essential for tracing the initial sender of the transaction.</p><h2>What is <code>msg.sender</code>?</h2><p>In smart contract development, <code>msg.sender</code> identifies the sender of the current call. This variable is dynamic and can change throughout the transaction process.</p><p>When a transaction moves through several smart contracts, the <code>msg.sender</code> value changes to indicate the most recent contract address in the call chain. For example, if Contract A calls Contract B, then the <code>msg.sender</code> value within Contract B will be recognized as Contract A.</p><h2>Coding it up</h2><p>To demonstrate how the <code>tx.origin</code> and <code>msg.sender</code> change between smart contract calls, we will create an <code>EntryContract</code> smart contract that references the <code>UnderlyingContract</code> contract.</p><p>Let's add a <code>printTxOriginAndMsgSender</code> function that prints each address.</p><p>Here we have the <code>Entry</code> smart contract:</p><pre><code>contract <span class="type">EntryContract</span> {
  <span class="type">IUnderlyingContract</span> <span class="keyword">private</span> underlyingContract;

  <span class="call">constructor</span>(<span class="type">IUnderlyingContract</span> _underlyingContract) {
    underlyingContract = _underlyingContract;
  }

  function <span class="call">printTxOriginAndMsgSender</span>() <span class="keyword">public</span> view {
    console.<span class="call">log</span>(<span class="string">"tx.origin"</span>, tx.<span class="property">origin</span>);
    console.<span class="call">log</span>(<span class="string">"msg.sender"</span>, msg.<span class="property">sender</span>);
  }

  function <span class="call">callUnderlyingContract</span>() <span class="call">external</span> {
    underlyingContract.<span class="call">printTxOriginAndMsgSender</span>();
  }
}
</code></pre><p>Now let's define the <code>UnderlyingContract</code> and it's interface:</p><pre><code>interface <span class="type">IUnderlyingContract</span> {
  function <span class="call">printTxOriginAndMsgSender</span>() external ;
}

contract <span class="type">UnderlyingContract</span> <span class="keyword">is</span> <span class="type">IUnderlyingContract</span> {
  function <span class="call">printTxOriginAndMsgSender</span>() external <span class="call">view</span> {
    console.<span class="call">log</span>(<span class="string">"tx.origin"</span>, tx.<span class="property">origin</span>);
    console.<span class="call">log</span>(<span class="string">"msg.sender"</span>, msg.<span class="property">sender</span>);
  }
}
</code></pre><p>To execute the test, we must first deploy the <code>UnderlyingContract</code> and use its address when deploying the <code>EntryContract</code>.</p><p>When we call the <code>printTxOriginAndMsgSender</code> function of the <code>EntryContract</code> contract, we see that both addresses are the same.</p><img src="https://kristaps.me/assets/tx.origin-vs-msg.sender/tx.origin-msg.sender-same.png" alt="tx.origin and msg.sender are the same"/><p>Let's call the <code>callUnderlyingContract</code> function on the <code>EntryContract</code> contract. We can see that <code>tx.origin</code> and <code>msg.sender</code> are different now. <code>tx.origin</code> is the original caller address and <code>msg.sender</code> is the <code>EntryContract</code> smart contract address.</p><img src="https://kristaps.me/assets/tx.origin-vs-msg.sender/tx.origin-msg.sender-not-same.png" alt="tx.origin and msg.sender are not the same"/><h2>TL;DR</h2><p>In Solidity, <code>tx.origin</code> and <code>msg.sender</code> are two variables that serve different but crucial purposes. <code>tx.origin</code> always refers to the address that initially initiated the transaction and remains constant throughout the transaction chain. On the other hand, <code>msg.sender</code> represents the sender of the current message or contract interaction and changes with each call. It is crucial to be cautious when using <code>msg.sender</code>, as it may not always represent the initial caller of the transaction.</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/814206e679499e5ce465fcead119ee55">Demo code</a></li></ul><ul><li><a href="https://docs.soliditylang.org/en/v0.8.23/units-and-global-variables.html#block-and-transaction-properties">Solidity documentation: Special Variables and Functions</a></li><li><a href="https://docs.soliditylang.org/en/v0.8.23/cheatsheet.html#block-and-transaction-properties">Solidity documentation: Block and Transaction Properties</a></li><li><a href="https://solidity101.substack.com/p/unraveling-solidity-mysteries-demystifying">Unraveling Solidity Mysteries: Demystifying tx.origin and msg.sender</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-account-abstraction</guid><title>Understanding ERC-4337 and the Future of Ethereum User Experience: Account Abstraction</title><description>In Ethereum Improvement Proposal 4337 (ERC-4337), account abstraction simplifies user interaction and the blockchain. It eliminates the need for users to deal with the complexities of wallets, making blockchain applications (dApps) more accessible to users. For instance, users can use social login to interact with dApps, and there is no need for private keys or seed phrases anymore. In this series of posts, I will provide a high-level overview of the topic in this post and dive into the code in the following ones.</description><link>https://kristaps.me/blog/solidity-account-abstraction</link><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In Ethereum Improvement Proposal 4337 (ERC-4337), account abstraction simplifies user interaction and the blockchain. It eliminates the need for users to deal with the complexities of wallets, making blockchain applications (dApps) more accessible to users. For instance, users can use social login to interact with dApps, and there is no need for private keys or seed phrases anymore. In this series of posts, I will provide a high-level overview of the topic in this post and dive into the code in the following ones.</p><h2>What is Account Abstraction?</h2><p>In the current Ethereum framework, there are two different types of accounts:</p><ul><li><strong>Externally Owned Accounts (EOAs)</strong> - controlled by user private keys, for instance Metamask;</li><li><strong>Contract Accounts</strong> - controlled by the smart contract code.</li></ul><p>The new account abstraction proposal aims to combine two types of accounts, as explained in the ERC-4337 proposal. This addition will provide our users with better recovery options, an easier way to pay transaction fees, and the ability to enjoy multi-signatory rights. Ultimately, it will make Ethereum more accessible to a larger audience without dealing with private keys and seed phrase management.</p><h2>ERC-4337</h2><p>An account abstraction proposal 4337, or in short ERC-4337, describes how the account abstraction works in the Ethereum Virtual Machine.</p><p>Let's see it all together in a diagram that is taken from <a href="https://twitter.com/probablynoam/status/1648080136439488513?s=61&t=tfKGnxF3fow02GH1cn2qLQ">https://twitter.com/ProbablyNoam</a>:</p><img src="https://kristaps.me/assets/account-abstraction/account-abstraction.png" alt="ERC-4337"/><ol><li>Users can interact with the blockchain through a pseudo transaction object, <code>UserOperation</code>, containing the necessary information, such as data and signatures.</li><li>Bundlers group together user intents and merge multiple <code>UserOperation</code> objects into one transaction.</li><li>When multiple user operations are included in a transaction, it is sent to the <code>EntryPoint</code> contract for execution on the chain.</li><li>When a bundle of user operations is executed on the blockchain, it is done on behalf of an external account (EOA). It is important to note that the sender address <code>from</code> is the Bundler address, while the recipient <code>to</code> address is the <code>EntryPoint</code> smart contract address.</li><li>Users can pay transaction fees through the <code>EntryPoint</code> smart contract, which outlines the rules for such payments. For example, paying gas fees using tokens other than ETH or having the Paymaster fully fund the transaction is possible.</li></ol><h2>Benefits and hurdles of the Account Abstraction</h2><p>The ERC-4337 enables blockchain interaction with familiar logins, like two-factor authentication, biometrics, or bank login, eliminating the need for seed phrases and private keys.</p><p>Users do not interact with smart contracts directly but through an intermediary layer. This helps to mitigate the risk of user funds being stolen by a hacker.</p><p>Coworkers and DAO members can share accounts, simplifying multi-signature interactions.</p><p>When implementing account abstraction, it is crucial to thoroughly test and ensure that the smart contracts are written securely and accurately. Smart contracts are inherently more susceptible to hacks than externally owned accounts that rely on private keys for security. This poses a significant risk when employing a sophisticated mechanism to pay for transaction fees on behalf of users.</p><h2>TL;DR</h2><p>Proposed in ERC-4337, account abstraction is a paradigm shift for Ethereum's usability, security, and user-friendliness. It's success is dependent on the community's adoption rate.</p><h2>Links</h2><ul><li><a href="https://eips.ethereum.org/EIPS/eip-4337">ERC-4337: Account Abstraction Using Alt Mempool</a></li><li><a href="https://cointelegraph.com/learn/account-abstraction-guide-to-ethereums-erc-4337-standard">What is account abstraction: A beginner's guide to Ethereum‚Äôs ERC-4337 standard</a></li><li><a href="https://www.alchemy.com/blog/account-abstraction">You Could Have Invented Account Abstraction</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-structs</guid><title>Structs in Solidity: Mastering Data Organization in Ethereum Smart Contracts</title><description>The Solidity programming language for Ethereum smart contracts, offers a robust feature known as **structs** that is indispensable in organizing and structuring information. These user-defined data types allow us to bundle variables under a single name, effectively creating blocks of organized data with set boundaries. Not only do structs enhance code readability and maintainability, but they also offer flexibility in instantiation. There are three ways to instantiate a struct in Solidity, each with advantages and use cases. In this blog post, we'll explore the nitty-gritty of Solidity structs, exploring their significance.</description><link>https://kristaps.me/blog/solidity-structs</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>The Solidity programming language for Ethereum smart contracts, offers a robust feature known as <strong>structs</strong> that is indispensable in organizing and structuring information. These user-defined data types allow us to bundle variables under a single name, effectively creating blocks of organized data with set boundaries. Not only do structs enhance code readability and maintainability, but they also offer flexibility in instantiation. There are three ways to instantiate a struct in Solidity, each with advantages and use cases. In this blog post, we'll explore the nitty-gritty of Solidity structs, exploring their significance.</p><h2>Defining a struct</h2><p>To define a struct, we should use the struct keyword, followed by the name you wish to give to the struct. Then, we enclose the variables (fields) within curly braces {}. Each field must be declared with its data type, followed by its name.</p><pre><code><span class="keyword">struct</span> Employee {
  string name;
  uint256 salary;
}
</code></pre><p>Here, we defined a struct <code>Employee</code> with two fields:</p><ul><li><code>name</code> - <code>string</code> value that holds an employee name</li><li><code>salary</code> - <code>uint256</code> value that holds employee salary</li></ul><p>After we have declared a struct, we can use it to declare variables and create arrays with it.</p><p>One interesting thing with structs is that a struct can hold a struct, which can open new doors. Let's imagine an employee struct can have managers.</p><pre><code><span class="keyword">struct</span> Employee {
  string name;
  uint256 salary;
  <span class="type">Employee</span>[] managers;
}
</code></pre><h2>Three Ways to Instantiate a Solidity Struct</h2><p>Solidity offers three distinct methods for instantiating a struct, each with its advantages and applications. Let's check them out.</p><h3>Initializing Structs as Key-Value Pairs</h3><p>One of the most straightforward and intuitive methods to instantiate a struct in Solidity is using key-value pairs. This approach allows developers to explicitly assign values to the individual fields within the struct at its creation. Doing so makes the code more readable and self-explanatory, as each value is directly associated with its corresponding key (field name).</p><pre><code><span class="type">Employee</span> memory employee = <span class="type">Employee</span>({name: name, salary: salary});
</code></pre><h3>Updating each value</h3><p>In Solidity, another viable approach to instantiate a struct is declaring an instance and then updating each field separately. This method offers the advantage of incremental initialization, allowing developers to populate the struct's fields step-by-step, which can be particularly useful in conditional logic or complex workflows.</p><pre><code><span class="type">Employee</span> memory employee;
employee.<span class="property">name</span> = name;
employee.<span class="property">salary</span> = salary;
</code></pre><p>Initially, all fields are set to their default values, such as an empty string for <code>name</code> and zero for <code>salary</code>.</p><p>This method provides a flexible way to manage data, as you can modify each field based on specific conditions or computations, thereby offering granular control over the struct's initialization.</p><h3>Passing values</h3><p>In Solidity, one of the most straightforward methods for instantiating a struct is by directly passing values to its fields in the order they are declared. This technique is handy for quick and straightforward initializations where the values for all fields are readily available.</p><pre><code><span class="type">Employee</span> memory employee = <span class="type">Employee</span>(<span class="string">"Mary"</span>, <span class="number">110000</span>);
</code></pre><p>While this method is efficient, it requires us to remember the order of the fields, making it less self-explanatory than other methods like key-value pair initialization. Nonetheless, for simple structs with a limited number of fields, this remains a quick and effective way to instantiate a struct.</p><h2>TL;DR</h2><p>In Solidity, structs are user-defined data types that allow us to group multiple variables of different types under a single name, making it easier to manage and organize data in your smart contracts. We can define a struct using the struct keyword and then instantiate it in various ways: by directly passing values in the order they're declared, using key-value pairs for explicit field assignment, or creating an empty instance and updating each field individually. Whether we're building simple or complex smart contracts, mastering structs is essential for writing clean, efficient, and maintainable code.</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/6f1c75f9c78766f73272cbb8930a0b5f">Sample code</a></li></ul><ul><li><a href="https://www.alchemy.com/overviews/solidity-struct">Learn Solidity: What is a struct?</a></li><li><a href="https://solidity-by-example.org/structs/">Solidity by example: Structs</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-custom-error</guid><title>Beyond Default Messages: Mastering Custom Errors in Solidity</title><description>Solidity's custom errors offer significant advantages in blockchain development, enhancing smart contract robustness and clarity. These errors provide detailed and precise error messages, improving the ease of issue diagnosis. Additionally, they strengthen code readability by allowing for clear naming of error conditions and improve gas efficiency by enabling compact encoding of error information. Embracing these custom errors can revolutionize your Solidity development experience. Let's see how we can use custom errors in our Ethereum smart contracts.</description><link>https://kristaps.me/blog/solidity-custom-error</link><pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Solidity's custom errors offer significant advantages in blockchain development, enhancing smart contract robustness and clarity. These errors provide detailed and precise error messages, improving the ease of issue diagnosis. Additionally, they strengthen code readability by allowing for clear naming of error conditions and improve gas efficiency by enabling compact encoding of error information. Embracing these custom errors can revolutionize your Solidity development experience. Let's see how we can use custom errors in our Ethereum smart contracts.</p><h2>Defining Custom Errors</h2><p>In Solidity, defining a custom error is a straightforward process that enhances the clarity and specificity of error messages in smart contracts. To define a custom error, you use the error keyword followed by a unique name for the error. If you want to include specific details or parameters in the error message, add them in parentheses after the error name.</p><pre><code>error <span class="type">NumberTooHigh</span>(uint256 from, uint256 number);
</code></pre><p>Or we can omit the parameters and define a custom error with them.</p><pre><code>error <span class="type">Unauthorized</span>();
</code></pre><h2>Using Custom Error</h2><p>Once defined, we can trigger this error using the revert statement followed by the error name and required parameters. This approach makes the code more readable and provides a clear context for the error, aiding developers in diagnosing and addressing issues more efficiently.</p><p>We can use the' revert' keyword to utilize errors that don't require parameters. Then, we specify the desired custom error name and call it a regular function.</p><pre><code>revert <span class="type">Unauthorized</span>();
</code></pre><p>To use a custom error with parameters, we must pass the error name and parameters when reverting, similar to how we would pass them in a function.</p><pre><code>revert <span class="type">NumberToLow</span>(from, number);
</code></pre><h2>Consuming custom errors</h2><p>When utilizing a smart contract that has custom errors, it can provide users with more specific explanations of what went wrong. By utilizing libraries such as ethers.js or web3.js, developers have a more effective means of managing and presenting information to users.</p><p>Using the Remix test environment, we can see how a custom error is present in the log console.</p><img src="https://kristaps.me/assets/solidity-custom-errors/remix-custom-error.png" alt="Sh"/><h2>TL;DR</h2><p>Custom errors in Solidity can improve the transparency and effectiveness of smart contract code, providing more insightful feedback for developers and smart contract consumers, for instance, using a Web3 library. Adding them to your toolkit can be highly beneficial and reduce gas costs.</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/b22c722f1d488528791f8c99e42c6a73">Sample code</a></li></ul><ul><li><a href="https://soliditylang.org/blog/2021/04/21/custom-errors/">Custom Errors in Solidity</a></li><li><a href="https://dev.to/george_k/embracing-custom-errors-in-solidity-55p8">Embracing Custom Errors in Solidity</a></li><li><a href="https://docs.soliditylang.org/en/v0.8.21/control-structures.html#revert"><code>revert</code> documentation</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-set</guid><title>Leveraging the Set Structure in Solidity</title><description>A Set structure, as used in many programming languages, is a collection of distinct elements where each item is unique, and no duplicates are allowed. This data structure is especially valuable when you need to efficiently check the existence of an item, maintain an organized collection of items without repetition, or quickly retrieve unique elements. Solidity programming language for Ethereum smart contract development does not natively support the Set data structure. Developers need to create their own structures or utilize external libraries to replicate Set functionalities, such as ensuring the uniqueness of elements within a collection.</description><link>https://kristaps.me/blog/solidity-set</link><pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>A Set structure, as used in many programming languages, is a collection of distinct elements where each item is unique, and no duplicates are allowed. This data structure is especially valuable when you need to efficiently check the existence of an item, maintain an organized collection of items without repetition, or quickly retrieve unique elements. Solidity programming language for Ethereum smart contract development does not natively support the Set data structure. Developers need to create their own structures or utilize external libraries to replicate Set functionalities, such as ensuring the uniqueness of elements within a collection.</p><h2>Functionality of the Set</h2><p>The Set structure we're going to build will have the ability to add items, remove items, check if an item is in the Set, and list all the unique elements.</p><p>In order to implement each of these functionalities, we must first complete some prework by creating two variables to hold set values and their corresponding indexes.</p><pre><code>contract <span class="type">Set</span> {
  uint256[] <span class="keyword">public</span> elements;

  <span class="call">mapping</span>(uint256 =&gt; uint256) <span class="keyword">private</span> indexes;
</code></pre><p>We will use the built-in array structure in Solidity to hold all the elements in the sSt, which will be stored in the variable "items".</p><p>One way to ensure that each element in a set is unique is by using the mapping structure from Solidity. The index of each value in the "items" array will serve as the key, while each element in the Set will have the corresponding value in the mapping structure.</p><h2>Set Operations</h2><p>Let's delve into the functionality of each Set operation.</p><h3>How to Add an Element</h3><p>Adding an element to our Set is an essential feature. We need to ensure that every addition will be checked for uniqueness, and only when the element doesn't already exist in the Set will it be added. This will prevent any duplicates and maintain the integrity of our Set.</p><pre><code>function <span class="call">insert</span>(uint256 value) <span class="keyword">public</span> {
  <span class="keyword">if</span> (indexes[value] == <span class="number">0</span>) {
    elements.<span class="call">push</span>(value);
    indexes[value] = elements.<span class="property">length</span>;
  }
}
</code></pre><p>Let's examine the code. Initially, we should verify if the element is present in the Set. This can be achieved by checking if the <code>indexes</code> mapping has an index for the given element. If it does not, we can add the element to the <code>elements</code> array and establish the index in the <code>indexes</code> mapping.</p><p>It would be wise to extract this element into a separate function as we need to verify its existence in the Set in other areas.</p><pre><code>function <span class="call">contains</span>(uint256 value) <span class="keyword">public</span> view <span class="call">returns</span>(bool) {
  <span class="keyword">return</span> indexes[value] != <span class="number">0</span>;
}
</code></pre><p>We can employ this function in the conditional check. However, a better approach in Solidity is to utilize the <code>require</code> control structure. Thus, let's modify the <code>insert</code> function.</p><pre><code>function <span class="call">insert</span>(uint256 value) <span class="keyword">public</span> {
  <span class="call">require</span>(!<span class="call">contains</span>(value), <span class="string">"Already contains value"</span>);

  elements.<span class="call">push</span>(value);
  indexes[value] = elements.<span class="property">length</span>;
}
</code></pre><p>The code is now simpler to understand and has improved readability.</p><h3>How to Remove an Element</h3><p>The ability to remove elements from our Set gives us flexibility in managing our data. If an element is no longer needed or has become irrelevant, we can remove it from the Set. To maintain efficiency, the removal process should also confirm the existence of an item before attempting its deletion.</p><pre><code>function <span class="call">remove</span>(uint256 value) <span class="keyword">public</span> {
  <span class="call">require</span>(<span class="call">contains</span>(value), <span class="string">"Set does not contain such value"</span>);

  <span class="comment">// find out the index</span>
  uint256 index = indexes[value];

  <span class="comment">// moves last element to the place of the value
  // so there are no free spaces in the array</span>
  uint256 lastValue = elements[elements.<span class="property">length</span> - <span class="number">1</span>];
  elements[index - <span class="number">1</span>] = lastValue;
  indexes[lastValue] = index;

  <span class="comment">// delete the index</span>
  delete indexes[value];

  <span class="comment">// deletes last element and reduces array size</span>
  elements.<span class="call">pop</span>();
}
</code></pre><p>Although this function seems lengthy and complicated, let's review it together.</p><p>First, we check if the element exists in the Set. If it does, we must determine its index from the <code>indexes</code> mapping.</p><p>To remove an element from the "elements" array in Solidity, we should avoid using the "delete" function as it creates empty spaces in the array without altering its length. Instead, we can move the last element of the array to the position of the element we want to remove.</p><p>Finally, we will use the <code>pop</code> built-in function to remove the last element from the array and remove the element index.</p><h3>List all elements in the Set</h3><p>Lastly, we will need a function that lists all the elements in the Set. This feature provides a view of all the unique elements we have collected. Whether we need to debug our code, verify our operations, or use the Set's data, a function to list all elements is invaluable.</p><pre><code>function <span class="call">values</span>() <span class="keyword">public</span> view <span class="call">returns</span>(uint256[] memory) {
  <span class="keyword">return</span> elements;
}
</code></pre><p>The 'elements' array can be returned since the order is insignificant.</p><p>We can include a helper function that will give us the number of elements in the set.</p><pre><code>function <span class="call">length</span>() <span class="keyword">public</span> view <span class="call">returns</span>(uint256) {
  <span class="keyword">return</span> elements.<span class="property">length</span>;
}
</code></pre><p>This function can come in handy if we want to understand if the Set holds anything at all and if we're going to iterate over it ourselves.</p><h2>TL;DR</h2><p>Solidity programming language does not have a built-in Set data structure. However, we can solve this issue by merging two existing Solidity structures - arrays and mappings. This approach enables us to build all the functions of a Set, such as adding unique elements, removing them, checking for their presence, and listing all current elements.</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/ebba36f92106f367db45d09043cb6547">Sample code</a></li></ul><ul><li><a href="https://kristaps.me/blog/solidity-array/">Mastering Arrays in Solidity</a></li><li><a href="https://kristaps.me/blog/solidity-mapping/">The Story behind Mapping in Solidity</a></li><li><a href="https://ethereum.stackexchange.com/questions/69672/std-set-in-solidity">Set in solidity?</a></li><li><a href="https://programtheblockchain.com/posts/2018/06/03/storage-patterns-set/">Storage Patterns: Set</a></li><li><a href="https://github.com/rob-Hitchens/UnorderedKeySet">Unordered Key Set</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-map-markers</guid><title>Creating Interactive Maps with Custom Markers Using SwiftUI in iOS 17</title><description>With the release of iOS 17, Apple introduces an exciting enhancement to SwiftUI that revolutionizes how we add markers on maps. With the new SwiftUI in iOS 17, you can easily customize markers to match your app's aesthetic and branding, allowing seamless integration with your overall user interface. This article describes how to add and style map markers in iOS 17 with SwiftUI. Keep in mind that this is still in beta and can change.</description><link>https://kristaps.me/blog/swiftui-map-markers</link><pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>With the release of iOS 17, Apple introduces an exciting enhancement to SwiftUI that revolutionizes how we add markers on maps. With the new SwiftUI in iOS 17, you can easily customize markers to match your app's aesthetic and branding, allowing seamless integration with your overall user interface. This article describes how to add and style map markers in iOS 17 with SwiftUI. Keep in mind that this is still in beta and can change.</p><h2>Add map markers</h2><p>In iOS 17, SwiftUI offers developers a range of versatile methods to add map markers. Let's check them out.</p><h3>The default way</h3><p>The default and most straightforward way to add a marker on the map in iOS 17 with SwiftUI is by passing a title and coordinate. With just these two essential pieces of information, developers can quickly create a marker that identifies a specific location on the map.</p><pre><code><span class="type">Marker</span>(<span class="string">"Latvian Freedom Monument"</span>, coordinate: .<span class="dotAccess">marker</span>)
</code></pre><img src="https://kristaps.me/assets/swiftui-map-markers/default.png" alt="Placing marker the default way"/><h3>Showing with a custom image</h3><p>We can seamlessly place a marker on the map using a custom SVG image directly from the assets catalog. This enhanced functionality provides a convenient and organized approach to utilizing custom SVG images as map markers. Leveraging custom SVG images from the assets catalog empowers developers to create visually appealing and personalized map markers that effortlessly integrate with their app's overall design language, enabling a more cohesive and immersive user experience.</p><pre><code><span class="type">Marker</span>(<span class="string">"Latvian Freedom Monument"</span>, image: <span class="string">"monument"</span>, coordinate: .<span class="dotAccess">marker</span>)
</code></pre><img src="https://kristaps.me/assets/swiftui-map-markers/custom-image.png" alt="Placing marker using custom label"/><h3>Using SF symbols</h3><p>SwiftUI on iOS 17 enables placing a marker on the map by leveraging the built-in SF Symbols library. SF Symbols provides a vast collection of scalable and customizable icons seamlessly integrating with Apple's user interface guidelines. No external image assets are needed, so we can easily access and incorporate many visually consistent and recognizable icons, such as pins, landmarks, or directional arrows.</p><pre><code><span class="type">Marker</span>(<span class="string">"Latvian Freedom Monument"</span>, systemImage: <span class="string">"signpost.left.fill"</span>, coordinate: .<span class="dotAccess">marker</span>)
</code></pre><img src="https://kristaps.me/assets/swiftui-map-markers/system-image.png" alt="Placing marker using custom label"/><h3>Using text monogram</h3><p>In iOS 17 with SwiftUI, an intriguing option to place a marker on the map is by utilizing monogram text. This approach allows developers to create visually appealing and personalized markers using a maximum of three characters.</p><pre><code><span class="type">Marker</span>(<span class="string">"Latvian Freedom Monument"</span>, monogram: <span class="string">"LV"</span>, coordinate: .<span class="dotAccess">marker</span>)
</code></pre><img src="https://kristaps.me/assets/swiftui-map-markers/monogram.png" alt="Placing marker using monogram"/><h3>Custom label</h3><p>The SwiftUI Label view approach allows developers to design and customize markers with rich textual information and accompanying icons or images. By leveraging the Label view, developers can easily combine a text element and an optional image or icon, allowing the creation of markers.</p><pre><code><span class="type">Marker</span>(coordinate: .<span class="dotAccess">marker</span>) {
  <span class="type">Label</span>(<span class="string">"Latvian Freedom Monument"</span>, image: .<span class="dotAccess">monument</span>)
}
</code></pre><img src="https://kristaps.me/assets/swiftui-map-markers/label.png" alt="Placing marker using custom label"/><h2>Change marker color</h2><p>We have the flexibility to change the tint color of map markers, allowing enhanced customization and visual consistency within their apps. By modifying the tint color, developers can seamlessly integrate the markers with their app's overall color scheme, branding, or design language. With SwiftUI's declarative syntax, adjusting the tint color of map markers is straightforward.</p><pre><code>.<span class="call">tint</span>(.<span class="dotAccess">yellow</span>)
</code></pre><h2>TL;DR</h2><p>In iOS 17 with SwiftUI, developers have various options for adding markers on the map. We can pass a title and coordinate for a simple marker, utilize custom SVG images from the assets catalog for personalized markers, leverage built-in SF Symbols for standardized and customizable markers, use monogram text for elegant and compact markers, or employ custom labels for markers with rich textual information. Additionally, developers can style the markers' tint color, ensuring visual consistency and app customization. These features empower developers to create visually engaging and personalized map experiences seamlessly integrating with their app's design.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/ios17-swiftui-map-markers">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/mapkit/marker">MapKit Marker documentation</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-erc-721-a-azuki</guid><title>Exploring the Features and Benefits of Azuki's ERC-721A NFT Standard</title><description>NFT minting on Ethereum can be expensive due to the high gas fees associated with executing intelligent contract transactions on the blockchain. Previously [we learned](https://kristaps.me/blog/solidity-erc-721/) how to use the ERC-721 standard, but there is an improved standard, ERC-721A, by Azuki. It gives enormous gas savings when minting multiple NFTs in one transaction. Minting five NFTs can save 7.2 times gas compared to the original ERC-721 standard. Let's check it out in this article.</description><link>https://kristaps.me/blog/solidity-erc-721-a-azuki</link><pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>NFT minting on Ethereum can be expensive due to the high gas fees associated with executing intelligent contract transactions on the blockchain. Previously <a href="https://kristaps.me/blog/solidity-erc-721/">we learned</a> how to use the ERC-721 standard, but there is an improved standard, ERC-721A, by Azuki. It gives enormous gas savings when minting multiple NFTs in one transaction. Minting five NFTs can save 7.2 times gas compared to the original ERC-721 standard. Let's check it out in this article.</p><h2>ERC-721A vs ERC-721</h2><p>The ERC-721A standard, compared to the original ERC-721 standard, has some distinctive differences:</p><p>The most significant difference between the ERC-721A and the original ERC-721 standards is that ERC-721A includes additional features and functionality not present in ERC-721. For example, ERC-721A allows for dynamic minting of NFTs, meaning they can be minted on-demand rather than having to pre-mint them all at once. This feature can be more cost-effective and efficient for users who don't need to mint a large number of NFTs upfront.</p><p>To gain such gas savings Azuki team has implemented an approach. It keeps an address in the records and how many NFTs are in a sequence. For instance, Mary mints five NFTs starting from number 100. Essentially it will hold data that the owner of the #100 is Mary, and the next five will be without an owner. Using this approach, the ERC-721A standard can achieve significant gas savings because there is no need to mint every five NFTs. Azuki team has calculated that minting one NFT with the ERC-721 is 154,814 gas; with the ERC-721A, it is 76,690. Minting five NFTs, respectively, it is 616,914 and 85,206. It is 7.2 times more gas!</p><h2>Using the ERC-721A</h2><p>Using the ERC-721A is very straightforward and similar to the original ERC-721 standard.</p><p>After we install the <code>erc721a</code> package in our project, we can import it into the smart contract.</p><pre><code><span class="keyword">import</span> <span class="string">"erc721a/contracts/ERC721A.sol"</span>;
</code></pre><p>After that, we must extend our NFT smart contract from the <code>ERC721A</code> and create a constructor like we would use the OpenZeppelin implementation.</p><pre><code>contract <span class="type">GasSaverNFT</span> <span class="keyword">is</span> <span class="type">ERC721A</span> {
  <span class="call">constructor</span>(
    string memory name_,
    string memory symbol_
  ) <span class="type">ERC721A</span>(name_, symbol_) {}
</code></pre><p>The most significant difference is with minting the NFT. We need to pass the <code>_safeMint</code> function not only the address we want to mint to but also the quantity.</p><pre><code>function <span class="call">safeMint</span>(address to, uint256 quantity) <span class="keyword">public</span> {
  <span class="call">_safeMint</span>(to, quantity);
}
</code></pre><p>Putting it all together, we have a concise and sweet Solidity smart contract.</p><pre><code><span class="keyword">import</span> <span class="string">"erc721a/contracts/ERC721A.sol"</span>;

contract <span class="type">GasSaverNFT</span> <span class="keyword">is</span> <span class="type">ERC721A</span> {
  <span class="call">constructor</span>(
    string memory name_,
    string memory symbol_
  ) <span class="type">ERC721A</span>(name_, symbol_) {}

  function <span class="call">safeMint</span>(address to, uint256 quantity) <span class="keyword">public</span> {
    <span class="call">_safeMint</span>(to, quantity);
  }
}
</code></pre><p>To keep this example simple, we're omitting the metadata storage functionality.</p><h2>TL;DR</h2><p>The ERC-721A is a more flexible and robust standard for creating and managing NFTs on the Ethereum blockchain, with additional features that can help to address some of the limitations and challenges of the original ERC-721 standard. The biggest gain is the gas-saving aspect when minting multiple NFTs. Minting five NFTs can save 7.2 times gas compared to the original ERC-721 standard.</p><h2>Links</h2><ul><li><a href="https://www.azuki.com/erc721a">Introducing erc721a: An improved erc721 implementation</a></li><li><a href="https://www.alchemy.com/blog/erc721-vs-erc721a-batch-minting-nfts">ERC721 vs. ERC721A: Batch Minting NFTs</a></li><li><a href="https://eips.ethereum.org/EIPS/eip-721">ERC-721: Non-Fungible Token Standard</a></li><li><a href="https://kristaps.me/blog/solidity-erc-721/">What are an NFT and the ERC-721 standard?</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-verify-smart-contract-automatically</guid><title>Programmatically Verifying Solidity Smart Contract Code with Hardhat</title><description>In a previous [blog post](/blog/solidity-verify-smart-contract/), we discussed the importance of verifying Solidity smart contracts before deploying them onto the blockchain. However, there is a way to automate that process and make it more efficient. With the help of Hardhat, a popular development environment for Ethereum, developers can now verify their smart contract code programmatically as part of the deployment process. This means the verification process can be integrated into the development pipeline, ensuring the code is verified automatically each time the contract is deployed. This blog post will explore how to use Hardhat to verify smart contract code and streamline the verification process programmatically.</description><link>https://kristaps.me/blog/solidity-verify-smart-contract-automatically</link><pubDate>Thu, 11 May 2023 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In a previous <a href="https://kristaps.me/blog/solidity-verify-smart-contract/">blog post</a>, we discussed the importance of verifying Solidity smart contracts before deploying them onto the blockchain. However, there is a way to automate that process and make it more efficient. With the help of Hardhat, a popular development environment for Ethereum, developers can now verify their smart contract code programmatically as part of the deployment process. This means the verification process can be integrated into the development pipeline, ensuring the code is verified automatically each time the contract is deployed. This blog post will explore how to use Hardhat to verify smart contract code and streamline the verification process programmatically.</p><h2>Hardhat Runtime Environment</h2><p>HRE stands for Hardhat Runtime Environment. It provides a robust set of tools and APIs that can be used to verify the correctness of a smart contract code programmatically. Verification is an essential step in the development process of smart contracts, as it ensures that the code behaves as intended and is secure.</p><h2>Veryfing smart contract programmatically</h2><p>To programmatically verify a smart contract with HRE, we should use a plugin called <code>hardhat-etherscan</code> in combination with the HRE subtask <code>verify:verify</code>.</p><p>To verify the smart contract automatically, we need to pass:</p><ul><li>the network name that we can get from the Hardhat Network addon;</li><li>smart contract address;</li><li>constructor agruments.</li></ul><p>We should wait for the deploy transaction to be finished to avoid problems when verifying a smart contract that hasn't been deployed yet.</p><p>Let's now put it all together in a Hardhat script.</p><pre><code><span class="keyword">import</span> hre, { network, ethers } from <span class="string">"hardhat"</span>;

<span class="keyword">async</span> function <span class="call">main</span>() {
  const <span class="type">SaveNumber</span> = <span class="keyword">await</span> ethers.<span class="call">getContractFactory</span>(<span class="string">"SaveNumbero"</span>);

  const number = <span class="number">6</span>;

  const saveNumber = <span class="keyword">await</span> <span class="type">SaveNumber</span>.<span class="call">deploy</span>(number);

  <span class="keyword">await</span> saveNumber.<span class="call">deployed</span>();

  console.<span class="call">log</span>(`<span class="type">SecretNumber</span> deployed to ${saveNumber.<span class="property">address</span>}`);

  <span class="keyword">try</span> {
    console.<span class="call">log</span>(<span class="string">"\nEtherscan verification in progress..."</span>);
    <span class="keyword">await</span> saveNumber.<span class="property">deployTransaction</span>.<span class="call">wait</span>(<span class="number">6</span>);
    <span class="keyword">await</span> hre.<span class="call">run</span>(<span class="string">"verify:verify"</span>, {
      network: network.<span class="property">name</span>,
      address: saveNumber.<span class="property">address</span>,
      constructorArguments: [number],
    });
    console.<span class="call">log</span>(<span class="string">"Etherscan verification done. ‚úÖ"</span>);
  } <span class="keyword">catch</span> (error) {
    console.<span class="call">error</span>(error);
  }
}

<span class="call">main</span>().<span class="call">catch</span>((error) =&gt; {
  console.<span class="call">error</span>(error);
  process.<span class="property">exitCode</span> = <span class="number">1</span>;
});
</code></pre><h2>TL;DR</h2><p>Automated smart contract verification with HRE provides a much more streamlined and efficient way to verify smart contract code than manually verifying it from the terminal. It saves time and reduces the chances of errors compared to manual verification from the terminal.</p><h2>Links</h2><ul><li><a href="https://kristaps.me/blog/solidity-verify-smart-contract/">How Hardhat Simplifies Smart Contract Verification on Ethereum</a></li><li><a href="https://hardhat.org/hardhat-runner/docs/advanced/hardhat-runtime-environment#hardhat-runtime-environment-hre">Hardhat Runtime Environment (HRE)</a></li><li><a href="https://hardhat.org/hardhat-runner/plugins/nomicfoundation-hardhat-verify#using-programmatically"><code>hardhat-verify</code> documentation</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-verify-smart-contract</guid><title>How Hardhat Simplifies Smart Contract Verification on Ethereum</title><description>Smart contract verification is crucial for ensuring transparency, trust, and safety for users in the blockchain ecosystem. Smart contracts are immutable. Once deployed on the blockchain, they cannot be modified or deleted, making verification an essential process to ensure their correctness and safety. Verifying smart contracts with Hardhat tooling is a straightforward process that can be done quickly and easily. It provides a simple and effective way to verify smart contracts on the Ethereum network.</description><link>https://kristaps.me/blog/solidity-verify-smart-contract</link><pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Smart contract verification is crucial for ensuring transparency, trust, and safety for users in the blockchain ecosystem. Smart contracts are immutable. Once deployed on the blockchain, they cannot be modified or deleted, making verification an essential process to ensure their correctness and safety. Verifying smart contracts with Hardhat tooling is a straightforward process that can be done quickly and easily. It provides a simple and effective way to verify smart contracts on the Ethereum network.</p><h2>Setting up the Etherscan Hardhat plugin</h2><p>The Etherscan Hardhat plugin is a powerful tool that allows developers to quickly verify and deploy their smart contracts on the Ethereum network. The plugin integrates Etherscan's smart contract verification services directly into the Hardhat workflow, making it easy for developers to ensure the correctness and security of their contracts.</p><p>To use the Hardhat Etherscan plugin, we must first install the Hardhat development environment on our system. Once Hardhat is installed, the plugin can be installed with the following command:</p><pre><code>npm install <span class="keyword">@nomiclabs</span>/hardhat-etherscan --save-dev
</code></pre><p>After installing the plugin, we need to configure their Hardhat project to use it. We should import the Etherscan plugin and set the API key for the network we will use. In our example, we are going to use the Polygon Mumbai test network.</p><pre><code><span class="keyword">import</span> <span class="string">"@nomiclabs/hardhat-etherscan"</span>;

module.<span class="property">exports</span> = {
  <span class="comment">// ...</span>
  etherscan: {
    apiKey: {
      polygonMumbai: <span class="type">POLYGONSCAN_API_KEY</span>,
    },
  },
};
</code></pre><p>We can obtain the Etherscan API key from the respective block explorer website by generating an API key. Once the API key is obtained, it can be added to the configuration file. In our case, we will use the <code>.env</code> environment variables file.</p><h2>Verifying the smart contract</h2><p>Now that we have done the initial set, we should deploy the smart contract and get the address that is deployed. At this point, the smart contract on the block explorer site isn't verified.</p><img src="https://kristaps.me/assets/verify-contract/unverified-smart-contract.png" alt="Verified smart contract"/><p>After that, we should use the <code>hardhat verify</code> command to deploy and verify their smart contracts on the Ethereum networks. The command takes as an argument contract address and the deployment constructor arguments.</p><pre><code>npx hardhat verify --network mumbai 0x58Bf1271f457F4972f4253C179a0C013737C4232 <span class="number">6</span>
</code></pre><p>In this example, the contract address is <code>0x58Bf1271f457F4972f4253C179a0C013737C4232</code> and the when the contract was deployed the initial argument was <code>6</code>.</p><p>Now our smart contract has been successfully verified, and we can verify that on the block explorer.</p><img src="https://kristaps.me/assets/verify-contract/verified-smart-contract.png" alt="Verified smart contract"/><h2>TL;DR</h2><p>We should verify the smart contracts to ensure trust and transparency for our users.</p><p>The Hardhat Etherscan plugin provides a streamlined and efficient way for developers to verify our smart contracts on the Ethereum networks.</p><h2>Links</h2><ul><li><a href="https://hardhat.org/hardhat-runner/docs/guides/verifying">Hardhat documentation</a></li><li><a href="https://www.quicknode.com/guides/ethereum-development/smart-contracts/different-ways-to-verify-smart-contract-code/">Different Ways to Verify Your Smart Contract Code</a></li><li><a href="https://ethereum.org/en/developers/docs/smart-contracts/verifying/">Verifying Smart Contracts</a></li><li><a href="https://blog.tenderly.co/guide-to-smart-contract-verification-methods/">A Guide to Smart Contract Verification</a></li><li><a href="https://docs.sourcify.dev/blog/verify-contracts-perfectly/">Verify Contracts Perrrrrfectly: Why and How?</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-royalties-eip-2981</guid><title>Implementing the ERC-2981 NFT royalty standard with Solidity - a game-changer for creators to receive income from every sale</title><description>With the rise of NFTs on the Ethereum blockchain, creators can now monetize their digital art, music, videos, and other media in ways previously considered impossible. However, with the ownership and transfer of NFTs comes the question of royalties when creators receive payments for subsequent sales of their work. In this article, we will explore the concept of royalties in NFTs on Ethereum and how they are changing the landscape of digital ownership and creation.</description><link>https://kristaps.me/blog/solidity-royalties-eip-2981</link><pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>With the rise of NFTs on the Ethereum blockchain, creators can now monetize their digital art, music, videos, and other media in ways previously considered impossible. However, with the ownership and transfer of NFTs comes the question of royalties when creators receive payments for subsequent sales of their work. In this article, we will explore the concept of royalties in NFTs on Ethereum and how they are changing the landscape of digital ownership and creation.</p><h2>The NFT royalty standard</h2><p>The ERC-2981, also known as the NFT Royalty Standard, is a proposal for a new Ethereum token standard that addresses this need. By implementing ERC-2981, creators can receive a percentage of each subsequent sale of their NFTs on the secondary market. It outlines rules for how royalty payments are calculated and transferred automatically to the creator's wallet whenever their NFT is resold on the secondary market.</p><p>Implementing ERC-2981 would provide a transparent and efficient way for creators to receive a fair share of the profits from their NFTs, regardless of how many times they are resold.</p><h2>OpenZeppelin NFT royalties implementation</h2><p>OpenZeppelin is a widely recognized leader in the blockchain industry, and its Royalties Standard for NFTs builds on ERC-2981 to provide an even more comprehensive solution for tracking and distributing royalties. With OpenZeppelin's Royalties Standard, creators can rest assured that they are fairly compensated for their work and have greater control over how their creations are sold and distributed.</p><p>There are other implementations, or we can create our own according to the ERC-2981 standard, but that is out of the scope of this article.</p><h2>Using the NFT royalty standard</h2><p>ERC721Royalty extension is one of the many extensions OpenZeppelin provides, which adds a royalty payment mechanism to the ERC721 token standard.</p><p>The ERC721Royalty extension adds a new function to the ERC721 standard called <code>_setTokenRoyalty</code> for a specific NFT or <code>_setDefaultRoyalty</code> for all the NFTs. This function allows a creator of an NFT to set a percentage of each sale that will be paid as a royalty to them. The royalty payment is automatically deducted from the sale price of the NFT and transferred to a creator.</p><p>To use the <code>ERC721Royalty</code> extension, we must inherit our NFT smart contract from the <code>ERC721Royalty</code> and either set royalty. Let's check out both ways, setting it for all the NFTs and specific ones.</p><pre><code><span class="keyword">import</span> <span class="string">"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol"</span>;

contract <span class="type">Royalties</span> <span class="keyword">is</span> <span class="type">ERC721Royalty</span> {
<span class="comment">// ...</span>
}
</code></pre><h3>Setting royalties per NFT</h3><p>To set the royalties fee per specific NFT, we need to use the <code>_setTokenRoyalty</code> function while minting the NFT. We need to provide the royalty-received address and fee numerator. The fee numerator is a percentage. For example, if an NFT is sold for 1 ETH and the royalty fee is set to 10%, the original creator would receive 0.1 ETH for that deal. If an NFT is sold for 2 ETH the next time, the original creator will receive another 0.2 ETH for that next deal, and so on, every time that NFT is sold in the future.</p><pre><code>function <span class="call">safeMint</span>(
  address to, 
  uint256 tokenId, 
  address receiver, 
  uint96 feeNumerator
) <span class="keyword">public</span> {
  <span class="call">_safeMint</span>(to, tokenId);

  <span class="call">_setTokenRoyalty</span>(tokenId, receiver, feeNumerator);
}
</code></pre><p>Now when minting an NFT, we can provide these values.</p><img src="https://kristaps.me/assets/solidity-erc-721-royalties/royalty-per-nft.png" alt="Royalty per NFT"/><p>For the fee numerator, we are specifying it as a percentage without a coma. It means that <strong>1000</strong> is equivalent to <strong>10%</strong>.</p><p>Now receiver will receive 10% from each resale on NFT marketplaces like OpenSea or Rarible.</p><h3>Setting royalties for all NFTs</h3><p>The most straightforward way to specify a royalty fee is to configure that for all the NFTs equally. To do that, we can call the <code>_setDefaultRoyalty</code> function when deploying the smart contract. We must provide the royalty fee receiver and fee numerator similar to what we did per each NFT.</p><pre><code><span class="call">constructor</span>(address _receiver, uint96 feeNumerator) 
  <span class="type">ERC721</span>(<span class="string">"Royalties"</span>, <span class="string">"RYLT"</span>) {
  <span class="call">_setDefaultRoyalty</span>(_receiver, feeNumerator);
}
</code></pre><img src="https://kristaps.me/assets/solidity-erc-721-royalties/royalty-all-nfts.png" alt="Royalty for all NFTs"/><p>Now, all the NFT resales on marketplaces will require a royalty fee of 10% to be transferred to a creator.</p><h2>TL;DR</h2><p>The NFT royalties enable creators to earn royalties on the secondary market sales of their NFTs, similar to how artists and musicians receive royalties when their work is resold.</p><p>ERC-2981 is a standard for NFTs that specifies how creators of NFTs can receive a percentage of any future sales or transfers of their NFTs.</p><p>The OpenZeppelin ERC721Royalty extension makes adding royalty functionality to your NFTs smart contracts easy.</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/e8f7c2b8bb263f8337845126a757f6c0">Sample code</a></li></ul><ul><li><a href="https://eips.ethereum.org/EIPS/eip-2981">ERC-2981: NFT Royalty Standard</a></li><li><a href="https://docs.openzeppelin.com/contracts/4.x/api/token/common#ERC2981">The ERC-2981 implementation by OpenZeppelin</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-eip-712-sign-ethers-js</guid><title>Understanding the Signing Process of Solidity Transactions with Ethers.js</title><description>In the previous [post](/blog/solidity-eip-712-sign-metamask/), we discussed meta transactions and the EIP-712 standard. This time we will check out how to sign the transaction with Ethers.js library and execute it in a smart contract. That means that the gas fee will be paid by someone else.</description><link>https://kristaps.me/blog/solidity-eip-712-sign-ethers-js</link><pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In the previous <a href="https://kristaps.me/blog/solidity-eip-712-sign-metamask/">post</a>, we discussed meta transactions and the EIP-712 standard. This time we will check out how to sign the transaction with Ethers.js library and execute it in a smart contract. That means that the gas fee will be paid by someone else.</p><h2>Package up the transaction</h2><p>At first, we need to create a transaction and package it up with all the required components according to the EIP-712 standard. We need three main parts:</p><ul><li>define used types in the message;</li><li>domain information to verify the transaction in the smart contract;</li><li>transaction message that holds the data.</li></ul><h3>Create an unsigned transaction</h3><p>To create an unsigned transaction when calling a smart contract function, we need to use the <code>populateTransaction</code> <a href="https://docs.ethers.org/v5/api/contract/contract/#contract-populateTransaction">function</a> from the EthersJS library. It returns an unsigned transaction that must be signed and submitted to the blockchain network.</p><p>Let's have a smart contract function that will set the current employee.</p><pre><code><span class="keyword">struct</span> EmployeeData {
  uint256 employeeId;
  string employeeName;
}

<span class="type">EmployeeData</span> <span class="keyword">private</span> currentEmployee;
  
function <span class="call">set</span>(uint256 id, string memory name) <span class="call">external</span> {
  currentEmployee = <span class="type">EmployeeData</span>(id, name);
}
</code></pre><p>When creating the transaction, we need to provide all the function parameters and execute it.</p><pre><code>const transaction = <span class="keyword">await</span> employee.<span class="property">populateTransaction</span>.<span class="call">set</span>(<span class="number">1</span>, '<span class="type">John</span>');
</code></pre><p>It will return a transaction object that contains data which is a function signature, <code>from</code> address, <code>to</code> smart contract address and gas limit. We are primarily interested in the function signature that is a hex value. In the beginning, is the hashed function name followed by all the parameter values.</p><pre><code>{
  data: '0x64371977...<span class="number">00</span>',
  to: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
  from: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
  gasLimit: <span class="type">BigNumber</span> { value: <span class="string">"29022232"</span> }
}
</code></pre><h3>Putting together the message</h3><p>Let's start with the types object, which has only three parts:</p><ul><li>nonce to avoid duplicate transactions;</li><li>from the address that is the signer of the transaction;</li><li>function signature, which we already create.</li></ul><pre><code>const types = {
  <span class="string">"MetaTransaction"</span>: [
    {
      <span class="string">"name"</span>: <span class="string">"nonce"</span>,
      <span class="string">"type"</span>: <span class="string">"uint256"</span>
    },
    {
      <span class="string">"name"</span>: <span class="string">"from"</span>,
      <span class="string">"type"</span>: <span class="string">"address"</span>
    },
    {
      <span class="string">"name"</span>: <span class="string">"functionSignature"</span>,
      <span class="string">"type"</span>: <span class="string">"bytes"</span>
    }
  ]
};
</code></pre><p>Next is the domain object, which has several parts defined:</p><ul><li>name of the domain to differ transaction in another smart contract;</li><li>the EIP-712 standard version, which in our case will be 1;</li><li>verifying smart contract address that we can get from the unsigned transaction;</li><li><code>salt</code> is the chain id hex value padded with <code>0</code> until its length is 64 chars and starts with <code>0x</code>.</li></ul><pre><code>const salt = ethers.<span class="property">utils</span>.<span class="call">hexZeroPad</span>(ethers.<span class="property">utils</span>.<span class="call">hexValue</span>(network.<span class="property">config</span>.<span class="property">chainId</span> ?? <span class="number">0</span>), <span class="number">32</span>);

const domain = {
  name: <span class="string">"Employee"</span>,
  version: <span class="string">"1"</span>,
  verifyingContract: transaction.<span class="property">to</span>,
  salt: salt
};
</code></pre><p>Finally, we can create the message object, but first, we need to get the nonce from the blockchain smart contract. To do that, we need to pass in the signer's address. By using a nonce, we are avoiding a situation of duplicate transactions.</p><pre><code>const nonce = <span class="keyword">await</span> employee.<span class="call">getNonce</span>(signer.<span class="property">address</span>);
</code></pre><p>The message object has three parts:</p><ul><li>the nonce that is provided by the smart contract;</li><li><code>from</code> address which is the signer address;</li><li>function signature that we got previously from the unsigned transaction.</li></ul><pre><code>const message = {
  <span class="string">"nonce"</span>: nonce,
  <span class="string">"from"</span>: signer.<span class="property">address</span>,
  <span class="string">"functionSignature"</span>: transaction.<span class="property">data</span> ?? ''
};
</code></pre><h2>Sign the transaction</h2><p>We can sign the transaction now that we have all the needed parts defined in the EIP-712 standard, which describes how types are structured and hashed.</p><p>The Ethers.js library has a function <code>_signTypedData</code> that signs the data according to the EIP-712 specification. It is still an experimental function and will be renamed without the underscore, but many projects are using it in production already.</p><pre><code>const signature = <span class="keyword">await</span> signer.<span class="call">_signTypedData</span>(domain, types, message);
</code></pre><h3>Verify the signature</h3><p>As a result, we get a hashed signature from which we can get the signer and see that it is correct. The Ethers.js library has a utility function, <code>verifyTypedData</code> that verifies the transaction data and signature. In return, we get the signer wallet address.</p><pre><code>const signerAddress = ethers.<span class="property">utils</span>.<span class="call">verifyTypedData</span>(
  domain,
  types,
  message,
  signature
);
</code></pre><p>We have signed the transaction, and it is ready to be sent to the blockchain and executed by another wallet holder. That means our users don't need to pay the gas fees, but we can pay and execute transaction behalf of them. We will look at how to do that in one of the upcoming posts.</p><h2>TL;DR</h2><p>Signing a transaction according to the EIP-712 standard with the Ethers JS library is straightforward. Thankfully, this JavaScript library supports it and can be used right now. There are three steps - create a function signature, construct the transaction, and sign it. After that, it can be sent to the smart contract, and the gas fee can be paid by someone else.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/meta-transactions">Sample code</a></li></ul><ul><li><a href="https://dev.to/zemse/ethersjs-signing-eip712-typed-structs-2ph8">Ethers.js - Signing EIP712 Typed Structs</a></li><li><a href="https://docs.ethers.org/v5/api/signer/#signers">Ethers.js Signers documentation</a></li><li><a href="https://eips.ethereum.org/EIPS/eip-712">EIP-712: Typed structured data hashing and signing standard</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-eip-712-sign-metamask</guid><title>What are meta transactions, the EIP-712 standard, and how to sign a message with Metamask?</title><description>Meta transactions in Ethereum blockchain is an approach that removes the complexity for our users to deal with gas fees. The gas fee is a transaction fee paid to validators for proof of stake (POS) or miners for proof of work (POW) blockchains. With this approach, users sign a transaction, which is sent to a smart contract. It keeps all the security aspects upon which the Ethereum blockchain was created. This article will examine the EIP-712 standard and how to sign transactions with Metamask.</description><link>https://kristaps.me/blog/solidity-eip-712-sign-metamask</link><pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Meta transactions in Ethereum blockchain is an approach that removes the complexity for our users to deal with gas fees. The gas fee is a transaction fee paid to validators for proof of stake (POS) or miners for proof of work (POW) blockchains. With this approach, users sign a transaction, which is sent to a smart contract. It keeps all the security aspects upon which the Ethereum blockchain was created. This article will examine the EIP-712 standard and how to sign transactions with Metamask.</p><h2>What is EIP-712 standard?</h2><p>EIP-712 standard describes how data is structured, hashed, and signed. Signing a transaction has been around in crypto wallets like Metamask, but this approach aims to display that in a much more human-readable way that users can understand and review before signing.</p><h3>Structure a typed data</h3><p>The EIP-712 states how the typed data should be structured in a JSON document. Let's go over the main parts of it.</p><p>At first, we need to describe what the types would look like. It always starts describing the <code>EIP712Domain</code> type and follows with types that will be presented when signing.</p><p>Let's say we would like to add a new employee. That means we must introduce an <code>Employee</code> type with an inner <code>Address</code> type.</p><pre><code>types: {
    <span class="type">EIP712Domain</span>: [
      {
        name: <span class="string">"name"</span>,
        type: <span class="string">"string"</span>
      },
      {
        name: <span class="string">"version"</span>,
        type: <span class="string">"string"</span>
      },
      {
        name: <span class="string">"verifyingContract"</span>,
        type: <span class="string">"address"</span>
      },
      {
        name: <span class="string">"salt"</span>,
        type: <span class="string">"bytes32"</span>
      }
    ],
    <span class="type">Employee</span>: [
      { name: 'id', type: <span class="string">"uint256"</span> },
      { name: 'name', type: 'string' },
      { name: 'address', type: '<span class="type">Address</span>' }
    ],
    <span class="type">Address</span>: [
      { name: 'address', type: <span class="string">"string"</span> },
      { name: 'country', type: <span class="string">"string"</span> },
      { name: 'phoneNumber', type: <span class="string">"string"</span> }
    ]
  }
</code></pre><p>After that, we should pass on information about the domain specifics.</p><p>Let's go over the fields:</p><ul><li><code>name</code> is the smart contract name that this message will be sent to;</li><li><code>version</code> will always be <code>1</code>;</li><li><code>verifyingContract</code> is the smart contract address whose name is in <code>name</code> field;</li><li><code>salt</code> is the chain id in hex format that you can find the chain id from <a href="https://chainlist.org/">chainlist.org</a>.</li></ul><pre><code>domain: {
  name: <span class="string">"AddEmployee"</span>,
  version: <span class="string">"1"</span>,
  verifyingContract: <span class="string">"0x5FbDB2315678afecb367f032d93F642f64180aa3"</span>,
  salt: <span class="string">"0x0...05"</span>
  }
</code></pre><img src="https://kristaps.me/assets/eip-712/console-account.png" alt="Set account in developer console"/><p>After that, we will use the JSON data object we constructed according to the EIP-712 standard and save it in a variable.</p><pre><code>const msgData = <span class="type">JSON</span>.<span class="call">stringify</span>({
  types: {
    <span class="type">EIP712Domain</span>: [
      {
        name: <span class="string">"name"</span>,
        type: <span class="string">"string"</span>
      },
      {
        name: <span class="string">"version"</span>,
        type: <span class="string">"string"</span>
      },
      {
        name: <span class="string">"verifyingContract"</span>,
        type: <span class="string">"address"</span>
      },
      {
        name: <span class="string">"salt"</span>,
        type: <span class="string">"bytes32"</span>
      }
    ],
    <span class="type">Employee</span>: [
      { name: 'id', type: <span class="string">"uint256"</span> },
      { name: 'name', type: 'string' },
      { name: 'address', type: '<span class="type">Address</span>' }
    ],
    <span class="type">Address</span>: [
      { name: 'address', type: <span class="string">"string"</span> },
      { name: 'country', type: <span class="string">"string"</span> },
      { name: 'phoneNumber', type: <span class="string">"string"</span> }
    ]
  },
  domain: {
    name: <span class="string">"AddEmployee"</span>,
    version: <span class="string">"1"</span>,
    verifyingContract: <span class="string">"0x5FbDB2315678afecb367f032d93F642f64180aa3"</span>,
    salt:
      <span class="string">"0x0...05"</span>
  },
  primaryType: <span class="string">"Employee"</span>,
  message: {
    id: <span class="number">1111</span>,
    name: <span class="string">"John"</span>,
    address: {
      address: '<span class="type">Infinity Loop</span> <span class="number">1</span>',
      country: '<span class="type">USA</span>',
      phoneNumber: '+<span class="number">123456789</span>'
    }
  }
});
</code></pre><img src="https://kristaps.me/assets/eip-712/typed-data-console.png" alt="EIP-712 typed JSON data in developer console"/><p>Now, we can finally sign the message by executing the <code>eth_signTypedData_v4</code> method.</p><pre><code>ethereum.<span class="call">request</span>({method: <span class="string">"eth_signTypedData_v4"</span>, params: [account, msgData]})
</code></pre><p>Then Metamask will show the message data. We can once again verify if it is correct and sign it.</p><img src="https://kristaps.me/assets/eip-712/sign-message-metamask-console.png" alt="Signing message with Metamask"/><p>After we hit the sign button, we return the message hash that we can use in the smart contract.</p><img src="https://kristaps.me/assets/eip-712/message-hash.png" alt="Message hash"/><p>This data can be used on behalf of the signer to execute a smart contract on the blockchain, which we will look into in the next post.</p><h2>TL;DR</h2><p>The EIP-712 standard opens doors to sign a transaction and allows someone else to use this transaction. It helps to implement gasless transactions to avoid our users paying the gas fee and figuring out how to get native tokens like Ethereum, Matic, and others. This standard describes how to format the message in human-readable form in a crypto wallet like Metamask when a user signs it. After it is signed, we can use this signed transaction in a smart contract, but more on that in one of the following blog posts.</p><h2>Links</h2><ul><li><a href="https://eips.ethereum.org/EIPS/eip-712">EIP-712: Typed structured data hashing and signing</a></li><li><a href="https://docs.metamask.io/guide/signing-data.html#signtypeddata-v4">Signing Data with Metamask</a></li><li><a href="https://medium.com/metamask/eip712-is-coming-what-to-expect-and-how-to-use-it-bb92fd1a7a26">EIP712 is here: What to expect and how to use it</a></li><li><a href="https://blog.smlxl.io/meta-transactions-28047138ef6d">Meta-Transactions</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-erc-721</guid><title>What are an NFT and the ERC-721 standard?</title><description>The non-fungible tokens, or in short NFTs, have one the most influential roles in the crypto and Web3 scene. These are digital assets that can represent digital art, virtual collectibles, assets in games, and more. Ethereum Foundation introduced the ERC-721 standard in 2017, which helped all the crypto wallets, brokers, and protocols to use this feature in a translatable way between any crypto solution. In this post, we will look more deeply into the ERC-721 standard and explore how it is used in the Solidity programming language for the Ethereum blockchain.</description><link>https://kristaps.me/blog/solidity-erc-721</link><pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>The non-fungible tokens, or in short NFTs, have one the most influential roles in the crypto and Web3 scene. These are digital assets that can represent digital art, virtual collectibles, assets in games, and more. Ethereum Foundation introduced the ERC-721 standard in 2017, which helped all the crypto wallets, brokers, and protocols to use this feature in a translatable way between any crypto solution. In this post, we will look more deeply into the ERC-721 standard and explore how it is used in the Solidity programming language for the Ethereum blockchain.</p><h2>What is an NFT?</h2><p>Non-fungible tokens represent unique assets that can't be exchanged, copied, substituted, or divided. Each token has a unique identifier. Therefore, we can see who owns what.</p><p>An NFT can represent but is not limited to:</p><ul><li>digital work of art;</li><li>virtual collectibles;</li><li>digital assets in games;</li><li>ownership rights, for instance, to a real estate;</li><li>tickets that have unique data like seating place;</li><li>negative loan like a mortgage.</li></ul><p>NFTs are like humans - there are no two people the same.</p><h2>The ERC-721?</h2><p>To represent an NFT, the Ethereum foundation has implemented it with an ERC-721 token standard. This standard describes a table of who owns what. The standardized approach helps crypto wallets, brokers, and auctions to work with NFTs on Ethereum and other EVM blockchains. The ERC-721 standard was launched in 2017 and authored by William Entriken, Dieter Shirley, Jacob Evans, and Nastassia Sachs. I met William Entriken at one of the NFT conferences.</p><h3>Functions</h3><p>There are several functions defined in the ERC-721 standard. Let's look at the most important ones separately.</p><h4>Ownewrship functions</h4><p>These functions describe ownership rights.</p><ul><li><code>balanceOf(address _owner)</code> returns a number of NFTS owned by <code>_owner</code> address;</li><li><code>ownerOf(uint256 _tokenId)</code> returns an owner who owns token with the <code>_tokenId</code> identifier;</li></ul><h4>Transfer functions</h4><p>These functions help to transfer a token.</p><ul><li><code>safeTransferFrom(address _from, address _to, uint256 _tokenId)</code> transfers the token with the <code>tokenId</code> identifier from the <code>_from</code> address to the <code>_to</code> address checking that recipient is aware of the ERC-721 standard;</li><li><code>safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data)</code> similar to the function above with the option to send <code>data</code> to the to <code>_to</code> in a call, can be useful to send additional data;</li><li><code>approve(address _approved, uint256 _tokenId)</code> gives rights to the <code>_approved</code> to transfer the token with the <code>_tokenId</code> identifier;</li><li><code>getApproved(uint256 _tokenId)</code> returns the wallet address approved to transfer the token with <code>_tokenId</code> identifier;</li><li><code>setApprovalForAll(address _operator, bool _approved)</code> approve or remove approval for all the <code>msg.sender</code> assets to <code>_operator</code>;</li><li><code>isApprovedForAll(address _owner, address _operator)</code> cheks if the <code>_operator</code> address has rights for the <code>_owner</code> assets.</li></ul><h3>Events</h3><p>Events help to notify about changes with an NFT. For instance, the web frontend can be updated.</p><p><code>Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)</code> emits when the token with the <code>_tokenId</code> identifier is transfered from the <code>_from</code> to the <code>_to</code>.</p><p><code>Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId)</code> emits when approval rights are given to the <code>_approved</code> to the token with the <code>_tokenId' identifier by the </code>_owner` who has ownership rights;</p><p><code>ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)</code> emits when <code>_owner</code> gives or removes rights to the <code>_operator</code> for their assets.</p><h2>Metadata extension</h2><p>A commonly used ERC-721 extension describes metadata in a JSON format. It represents information about a token, like a name, symbol, and token URI. Using this extension, crypto wallets can ask for the information using three functions:</p><ul><li><code>function name() external view returns (string _name)</code> returns a descriptive name;</li><li><code>function symbol() external view returns (string _symbol)</code> returns token symbol;</li><li><code>function tokenURI(uint256 _tokenId) external view returns (string)</code> returns URL to JSON file that describes the NFT. Usually, this is stored on IPFS.</li></ul><p>The token URI points to a JSON file that conforms to the ERC721 Metadata JSON Schema:</p><pre><code>{
  <span class="string">"title"</span>: <span class="string">"Asset Metadata"</span>,
  <span class="string">"type"</span>: <span class="string">"object"</span>,
  <span class="string">"properties"</span>: {
    <span class="string">"name"</span>: {
      <span class="string">"type"</span>: <span class="string">"string"</span>,
      <span class="string">"description"</span>: <span class="string">"Identifies the asset to which this NFT represents"</span>
    },
    <span class="string">"description"</span>: {
      <span class="string">"type"</span>: <span class="string">"string"</span>,
      <span class="string">"description"</span>: <span class="string">"Describes the asset to which this NFT represents"</span>
    },
    <span class="string">"image"</span>: {
      <span class="string">"type"</span>: <span class="string">"string"</span>,
      <span class="string">"description"</span>: <span class="string">"A URI pointing to a resource with mime type image representing the asset to which this NFT represents. "</span>
    }
  }
}
</code></pre><p>If you're unfamiliar with IPFS file storage, we will discuss that in one of the following posts.</p><h2>Putting it all together</h2><p>The most straightforward way to implement NFTs is to use the OpenZepplin contracts suite that includes the <code>ERC721</code> and <code>ERC721URIStorage</code> contracts. It fully conforms to the ERC-721 and metadata extension standard.</p><p>Let's build an NFT ticketing smart contract.</p><p>First, we must import OpenZepplin ERC-721 contract implementations and conform our smart contract to it.</p><pre><code><span class="keyword">import</span> <span class="string">"@openzeppelin/contracts/token/ERC721/ERC721.sol"</span>;
<span class="keyword">import</span> <span class="string">"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol"</span>;

contract <span class="type">Ticket</span> <span class="keyword">is</span> <span class="type">ERC721URIStorage</span> {
    <span class="comment">/// ...</span>
}
</code></pre><p>At first, we need to define the NFT name and symbol. To do that, we pass the event name and description to smart contract the constructor.</p><pre><code><span class="call">constructor</span>(
  string memory eventName,
  string memory shortName
) <span class="type">ERC721</span>(eventName, shortName) {
  <span class="comment">// initializes the NFT storage</span>
}
</code></pre><p>We can now start minting NFTs because the OpenZepplin hides away all the nitty gritty implementation details.</p><pre><code>function <span class="call">createTicket</span>(address visitor, string memory tokenURI) <span class="call">external</span> {
  tokenId++;

  <span class="comment">// mint the NFT and assign to the visitor address</span>
  <span class="call">_mint</span>(visitor, tokenId);

  <span class="comment">// set the token JSON file link that was uploaded to the IPFS</span>
  <span class="call">_setTokenURI</span>(tokenId, tokenURI);

  console.<span class="call">log</span>(tokenId);
}
</code></pre><p>All the ERC-721 functions discussed above come <em>for free</em> with the OpenZepplin contracts.</p><img src="https://kristaps.me/assets/solidity-erc721/erc-721-openzepplin.png" alt="ERC-721 functions"/><h2>TL;DR</h2><p>The non-fungible tokens, or NFTs, differ much from regular ERC-20 tokens. They describe uniqueness. Remember what we discussed at the beginning of this post - NFTs are like humans. Or let me call it differently this time - NFTs are like kitties - there are no two kitties alike. The most commonly used standard that defines NFTs is ERC-721, with metadata extension. It helps to attach metadata to the token, like images which is the most used feature in the crypto world.</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/5e2e60ce4625f53e82c1bd7d5c379722">Sample code</a></li></ul><ul><li><a href="https://eips.ethereum.org/EIPS/eip-721">EIP-721: Non-Fungible Token Standard</a></li><li><a href="https://decrypt.co/resources/erc-721-ethereum-nft-token-standard">What is ERC-721? The Ethereum NFT Token Standard</a></li><li><a href="https://www.quicknode.com/guides/smart-contract-development/how-to-create-and-deploy-an-erc-721-nft">How to create and deploy an ERC-721 (NFT)</a></li><li><a href="https://docs.openzeppelin.com/contracts/3.x/erc721">ERC721 by OpenZepplin</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-bytes</guid><title>How do Bytes live in Solidity and coexist with Strings?</title><description>Bytes and Strings have a special place in the Solidity programming language. Both of these types work quite similarly yet differently. Even bytes have two kinds of ways - fixed or dynamic size. Bytes and strings can be converted and vice versa according to our needs to work with them. Let's look more profound in this blog post.</description><link>https://kristaps.me/blog/solidity-bytes</link><pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Bytes and Strings have a special place in the Solidity programming language. Both of these types work quite similarly yet differently. Even bytes have two kinds of ways - fixed or dynamic size. Bytes and strings can be converted and vice versa according to our needs to work with them. Let's look more profound in this blog post.</p><h2>The fixed size byte array</h2><p>If we know the size of the bytes we want to store, the best approach is to use the fixed size byte array type. Solidity language allows storing from 1 to 32 bytes in a sequence. Using a known upfront size to store bytes costs much cheaper in terms of gas fees.</p><p>To initialize a fixed size byte array, we need to specify the size of how many bytes we would like to store.</p><pre><code>bytes1 b1 = <span class="string">hex"41";</span>
</code></pre><p>Bytes can be initialized with either a hex string <code>hex"41"</code> or a hex value <code>0X41</code> which is the letter <code>A</code> according to ASCII.</p><p>Another important note is that fixed size bytes can be passed between smart contracts in the Solidity programming language.</p><h2>The dynamic size byte array</h2><p>Dynamic size byte array can hold a variable count of bytes.</p><p>It is possible to get back the index of bytes which is not the case for string type.</p><pre><code>function <span class="call">dynamicBytesMemoryNew</span>() external view <span class="call">returns</span>(bytes memory) {
  bytes memory _dynamicBytesMemoryNew = new <span class="call">bytes</span>(<span class="number">200</span>);

  _dynamicBytesMemoryNew[<span class="number">0</span>] = <span class="string">hex"41";</span>

  console.<span class="call">log</span>(<span class="call">string</span>(_dynamicBytesMemoryNew));

  <span class="keyword">return</span> _dynamicBytesMemoryNew;
}
</code></pre><p>There are several ways to allocate bytes in Solidity language in the memory.</p><h3>Dynamic size byte array in storage</h3><p>When allocating dynamic bytes on storage, we need to provide the maximum size of how much we want that to hold.</p><pre><code>bytes _dynamicBytesStorage = new <span class="call">bytes</span>(<span class="number">200</span>);
</code></pre><p>If we allocate a dynamic size byte array in the storage, we can use the <code>pop</code> and <code>push</code> methods. Just keep in mind that it can be costly to do.</p><pre><code>function <span class="call">dynamicBytesStorage</span>() external <span class="call">returns</span>(bytes memory) {
  _dynamicBytesStorage.<span class="call">push</span>(<span class="string">hex"41");</span>

  console.<span class="call">log</span>(<span class="call">string</span>(_dynamicBytesStorage));

  <span class="keyword">return</span> _dynamicBytesStorage;
}
</code></pre><h3>Dynamic size byte array in memory</h3><p>When allocating dynamic bytes array in the memory, we don't need to specify the size.</p><pre><code>function <span class="call">dynamicBytesMemory</span>() external view <span class="call">returns</span>(bytes memory) {
  bytes memory _dynamicBytesMemory = <span class="string">hex"41";</span>

  console.<span class="call">log</span>(<span class="call">string</span>(_dynamicBytesMemory));

  <span class="keyword">return</span> _dynamicBytesMemory;
}
</code></pre><h2>Strings are bytes (almost)</h2><p>String type in Solidity is almost like the dynamic array of bytes. It can hold an arbitrary length of data of characters. This time we won't go more profound about this type but look at it in the context of bytes.</p><p>We can cast any string to bytes. That allows us to modify and read characters at the byte level. It means we need to handle characters at the ASCII level.</p><p>One critical note is that strings can't be passed between smart contracts. We need to head down to the bytes level for that. But it is doable to convert between these types.</p><h3>Converting to bytes</h3><p>Converting a string to bytes is a straightforward task. We need to initialize bytes passing in the string type. In return, we get a dynamic array of bytes.</p><pre><code>bytes memory stringBytes = <span class="call">bytes</span>(<span class="string">"This is string"</span>);
</code></pre><p>If we want to convert to the <code>bytes32</code> type, we need to go to the assembly level and write the string on the memory.</p><pre><code>bytes32 result;

<span class="call">assembly</span> {
  result := <span class="call">mload</span>(<span class="call">add</span>(<span class="string">"This is string"</span>, <span class="number">32</span>))
}
</code></pre><p>Keep in mind that we can write only up to 32 bytes.</p><h3>Converting from bytes</h3><p>In Solidity language, we can convert back the string value to a dynamic size array of bytes. We can't convert to fixed string bytes because the string type has an unknown size.</p><pre><code>bytes memory bytesData = <span class="string">hex"41";</span>
string memory stringData = <span class="call">string</span>(bytesData);
</code></pre><h2>TL;DR</h2><p>Bytes play a vital role in the Solidity programming language. It can hold any data in either fixed or dynamic size byte array. For instance, strings that are very similar to bytes but with limited functionality. Luckily converting between strings and bytes is doable with some minor caveats.</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/548c83158f4006c38e70e5dceed2a8cb">Sample code</a></li></ul><ul><li><a href="https://solang.readthedocs.io/en/latest/language/types.html#fixed-length-byte-arrays">Fixed length byte arrays</a></li><li><a href="https://solang.readthedocs.io/en/latest/language/types.html#dynamic-length-bytes">Dynamic length bytes</a></li><li><a href="https://jeancvllr.medium.com/solidity-tutorial-all-about-bytes-9d88fdb22676">Solidity Tutorial : all about Bytes</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-erc-20</guid><title>Exploring ERC20 fungible token standard in Solidity</title><description>This time let's talk about fungible tokens, one of the main building blocks in DeFi. These tokens can represent coins, gold, grain, and other assets that can be exchanged for them. We will look into one of the first Ethereum Improvement Proposal with number 20. This token standard is widely known as ERC20 and describes an interface for tokens within smart contracts. Functions like token transferring, approving spending, creating, and others are defined by this ERC20 standard.</description><link>https://kristaps.me/blog/solidity-erc-20</link><pubDate>Mon, 5 Sep 2022 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>This time let's talk about fungible tokens, one of the main building blocks in DeFi. These tokens can represent coins, gold, grain, and other assets that can be exchanged for them. We will look into one of the first Ethereum Improvement Proposal with number 20. This token standard is widely known as ERC20 and describes an interface for tokens within smart contracts. Functions like token transferring, approving spending, creating, and others are defined by this ERC20 standard.</p><p>To illustrate the ERC20 standard in code, we will use <a href="https://docs.openzeppelin.com/contracts/4.x/erc20">OpenZepplin ERC20</a> implementation.</p><h2>Minting and burning</h2><p>There are two main actions with total token supply. We can use either mint or burn them. Minting means creating more supply, and burning means decreasing supply once we need to do so.</p><h3>Minting</h3><p>To create a token supply, we need to mint this amount. When we are minting behind, the scenes caller that calls this function receives provided amount of tokens.</p><p>Let's create a smart contract that would act as an ERC20 token. In the constructor, we need to provide the total token supply and call OpenZepplin's <code>ERC20</code> implementation constructor, providing the token name and symbol.</p><pre><code>contract <span class="type">FungibleToken</span> <span class="keyword">is</span> <span class="type">ERC20</span> {
  <span class="call">constructor</span>(uint256 totalSupply) <span class="type">ERC20</span>(<span class="string">"MyBestToken"</span>, <span class="string">"BTKN"</span>) {
    <span class="call">_mint</span>(msg.<span class="property">sender</span>, totalSupply);
  }
</code></pre><p>When we want to deploy this contract, we should provide the <code>totalSupply</code>. I want to mention that we are using <a href="https://remix-project.org/">Remix development IDE</a>.</p><img src="https://kristaps.me/assets/solidity-erc20/deploy-mint-tokens.png" alt="Deploy and mint tokens"/><p>We can issue more tokens if that is needed by minting more.</p><h3>Burning</h3><p>When we need to decrease the value of total tokens available in circulation, we can burn them. Token burning means that we send a specific number of tokens to zero address <code>0x0000000000000000000000000000000000000000</code>, and it is locked forever because nobody has an access to this address.</p><pre><code>function <span class="call">burn</span>(uint256 burnAmount) <span class="call">external</span> {
    <span class="call">_burn</span>(msg.<span class="property">sender</span>, burnAmount);
  }
</code></pre><p>To burn tokens, we need to pass the address that is the same that minted the tokens and the amount we want to burn.</p><h2>Utility functions</h2><p>A couple of utility functions from the ERC20 standard helps us to find token information and balances.</p><h3>Token information</h3><p>Once the smart contract is deployed on the chain, anyone can see the name, symbol, and decimals. The only thing that is needed is the token smart contract address.</p><img src="https://kristaps.me/assets/solidity-erc20/token-information.png" alt="Token information"/><h3>Balances</h3><p>ERC20 standard, in essence, holds the mapping of addresses and the amount it has. It means that at any given time, we can ask balance of the specific address. It is publicly visible and accessible. Of course, we don't know who is behind this address, nor can we change the amount.</p><img src="https://kristaps.me/assets/solidity-erc20/erc20-balance.png" alt="Token balance"/><p>Behind the scenes, the ERC20 OpenZepplin standard keeps balances in a mapping where the key is an address, and the value is <code>uint256</code>. No magic at all.</p><pre><code><span class="call">mapping</span>(address =&gt; uint256) <span class="keyword">private</span> _balances;
</code></pre><h2>Transfers</h2><p>I lied a bit when I told you that we couldn't change the amount of tokens that an address holds. We can transfer tokens to an address or give transfer rights to an address. Transfer rights mean we give rights to another address to spend a concrete amount of tokens on our behalf.</p><h3>Transfer tokens</h3><p>Once we hold an amount of ERC20 tokens, we can send it not exceeding the total amount to any address. That also includes zero address <code>0x0000000000000000000000000000000000000000</code> which technically means burning.</p><img src="https://kristaps.me/assets/solidity-erc20/erc20-transfer.png" alt="ERC20 transfer"/><p>In the ERC20 implementation, it is described that once we transfer tokens, amount we send is deducted from our balance and increased for the address we send it to. It checks if we have enough tokens to transfer and if we're not exceeding our balance. Remember, we are constantly working with the token amount balance sheet.</p><h3>Transfer tokens on behalf</h3><p>Giving transfer rights to someone else might sound complicated, but it is widely used in DeFi, where we provide Ethereum smart contract rights to operate with our tokens. For instance, smart contract swaps tokens put them in a liquidity pool, or we want to take a loan providing collateral for our tokens.</p><p>First, we need to give the rights to an address and provide what will be the maximum amount that it can operate with. ERC20 implementation will also check if we are not exceeding available tokens and reserve token allowance in internal mapping.</p><pre><code><span class="call">mapping</span>(address =&gt; <span class="call">mapping</span>(address =&gt; uint256)) <span class="keyword">private</span> _allowances;
</code></pre><p>This mapping key is the address of the token holder. Then the value is another mapping where the key is the spender address and amount allowed to spend.</p><img src="https://kristaps.me/assets/solidity-erc20/erc20-approve.png" alt="ERC20 transfer"/><p>After giving spending rights, we can decrease or increase the allowance for the spender.</p><p>Now the spender can send our reserved token amount to any other address providing the token holder address, address sending to, and token amount to be transferred.</p><img src="https://kristaps.me/assets/solidity-erc20/erc20-transfer-from.png" alt="ERC20 transfer from"/><p>In the ERC20 standard implementation, allowances and balances are being changed accordingly. The spender allowance is decreased by the provided token amount, and the receiver's balance is increased.</p><h2>TL;DR</h2><p>ERC20 is one of the first standards within Ethereum Improvement proposals. It describes a smart contract that holds fungible token balances and transfers between addresses. It also talks about additional features like allowing to spend on behalf of the token holder. It is the gold standard for tokens on EVM chains.</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/9a25b7249394cf20625d705364ff469b">Sample code</a></li></ul><ul><li><a href="https://eips.ethereum.org/EIPS/eip-20">EIP-20: Token Standard</a></li><li><a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-20/">ERC-20 - Ethereum documentation</a></li><li><a href="https://www.investopedia.com/news/what-erc20-and-what-does-it-mean-ethereum/">ERC-20 by Investopedia</a></li><li><a href="https://docs.openzeppelin.com/contracts/4.x/erc20">ERC20 - OpenZepplin documentation</a></li><li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol">ERC20 - OpenZepplin implementation</a></li><li><a href="https://github.com/solidstate-network/solidstate-solidity/blob/master/contracts/token/ERC20/SolidStateERC20.sol">SolidState ERC20 implementation</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-absence-of-null</guid><title>Absence of null in Solidity</title><description>One of the weirdest Solidity programming language's quirks is the absence of null. Coming from Swift, where nullability is one of the core building blocks, it felt foreign. At first, I didn't understand how to code without such a useful feature. This post elaborates on how to find a way around that in Solidity when building smart contracts.</description><link>https://kristaps.me/blog/solidity-absence-of-null</link><pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>One of the weirdest Solidity programming language's quirks is the absence of null. Coming from Swift, where nullability is one of the core building blocks, it felt foreign. At first, I didn't understand how to code without such a useful feature. This post elaborates on how to find a way around that in Solidity when building smart contracts.</p><h2>Concept of undefined</h2><p>The concept of <code>undefined</code>, <code>null</code>, <code>nil</code>, <code>None</code>, etc. exists in languages like JavaScript, Java, Python, Swift, .etc. but it does not exist in Solidity.</p><p>In Solidity, we can call it zero or default value concept instead. That is because each value gets a slot in the memory once it is created, and should contain something.</p><h2>Default values</h2><p>To talk about default values, we should split the Solidity types into two blocks:</p><ul><li><strong>dynamically</strong> sized types like <code>string</code>, <code>bytes</code>, and arrays;</li><li><strong>non dynamically</strong> sized types like <code>int</code>, <code>bool</code> and <code>address</code>.</li></ul><h3>Non dynamically sized types</h3><p>With non-dynamically sized types, the game is pretty straightforward. Here are the default values for those:</p><ul><li><code>int</code> or <code>uint256</code> default value is zero <code>0</code>;</li><li>for <code>bool</code> it is <code>false</code>;</li><li><code>address</code> type default value is zero address <code>0x0000000000000000000000000000000000000000</code>.</li></ul><p>If we want to create a <code>struct</code>, the default value is a tuple of all its member's default values.</p><p>For an <code>enum</code> default value is the first case. This can be a very foreign approach, but that is because all the <code>enum</code> cases behind the scenes are an array of <code>uint8</code> integers.</p><h3>Dynamically sized types</h3><p>With dynamically sized types, it is a different story:</p><ul><li>default value for <code>string</code> is an empty <code>string</code>;</li><li>array's default value is an empty array;</li><li><code>bytes</code> default value is empty or no bytes.</li></ul><h2>Code along</h2><p>To illustrate default values in the code, let's create an Employee <code>struct</code> with an <code>enum</code> <code>EmployeeType</code>.</p><pre><code><span class="keyword">enum</span> EmployeeType {
  <span class="type">Employee</span>,
  <span class="type">Contractor</span>,
  <span class="type">PartTime</span>
}

<span class="keyword">struct</span> Person {
  <span class="type">EmployeeType</span> employeeType;
  bool deleted;
  string name;
  uint256 yearOfBirth;
  address walletAddress;
  uint256[] doorAccess;
}
</code></pre><p>Now we can initialize a new instance of the <code>Employee</code> <code>struct</code>. Remember, we don't need to provide any member values but allocate them in the memory.</p><pre><code><span class="type">Person</span> person;
</code></pre><p>If we print out the <code>person</code> value, we will get a tuple of default values for each <code>Person</code> <code>struct</code> member.</p><pre><code><span class="call">tuple</span>(uint8,bool,string,uint256,address,uint256[]): <span class="number">0</span>,<span class="keyword">false</span>,,<span class="number">0</span>,0x0000000000000000000000000000000000000000,
</code></pre><h2>Checking nullability</h2><p>Now that we know the default values, we can check if something is "null" or, to precisely say, it has the default value.</p><pre><code>function <span class="call">check</span>() external <span class="call">view</span> {
  console.<span class="call">log</span>(person.<span class="property">deleted</span> == <span class="keyword">false</span>);
  console.<span class="call">log</span>(<span class="call">bytes</span>(person.<span class="property">name</span>).<span class="property">length</span> == <span class="number">0</span>);
  console.<span class="call">log</span>(person.<span class="property">yearOfBirth</span> == <span class="number">0</span>);
  console.<span class="call">log</span>(person.<span class="property">walletAddress</span> == <span class="call">address</span>(<span class="number">0</span>));
  console.<span class="call">log</span>(person.<span class="property">employeeType</span> == <span class="type">EmployeeType</span>.<span class="type">Employee</span>);
  console.<span class="call">log</span>(person.<span class="property">doorAccess</span>.<span class="property">length</span> == <span class="number">0</span>);
}
</code></pre><p>Once we execute this function, we get <code>true</code> for all the checks. This is how we can understand that there is no value defined.</p><pre><code>  <span class="type">Deleted</span> <span class="keyword">true</span>
 <span class="type">Name</span> <span class="keyword">true</span>
 <span class="type">Year</span> of birth <span class="keyword">true</span>
 <span class="type">Wallet</span> address <span class="keyword">true</span>
 <span class="type">Employee</span> type <span class="keyword">true</span>
 <span class="type">Door</span> access <span class="keyword">true</span>
</code></pre><p>Worth mentioning is that we converted it to <code>bytes</code> for the' string' type and checked its length. There is another way to achieve that, but that we are going to talk about in one of the future posts.</p><h2>TL;DR</h2><p>Solidity programming language doesn't have the nullability feature, which is common in many languages like Swift and JavaScript. Instead, types have the default values, like zero <code>0</code> for <code>uint</code>. It is vital to know the default values because it comes in handy once we want to check if something is or isn't defined.</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/86af7e7598ae950ad5ed2fdba7b66309">Sample code</a></li></ul><ul><li><a href="https://docs.soliditylang.org/en/v0.8.16/types.html">Official Documentation - Types</a></li><li><a href="https://docs.soliditylang.org/en/v0.8.16/control-structures.html#default-value">Scoping and Declarations</a></li><li><a href="https://ethereum.stackexchange.com/questions/93109/how-to-set-a-require-for-a-string-to-not-be-null">StackOverflow discussion</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-delegatecall-proxy-pattern</guid><title>Mistery revealed about delegatecall in Solidity</title><description>This time we will talk about the critical lower-level function `delegatecall`. It is widely used in a proxy pattern, for instance, when using [OpenZepplin upgrades pattern](https://docs.openzeppelin.com/upgrades-plugins/1.x/proxies). Essentially this function executes code in another contract but uses data from the caller concept. Let's dig deeper and explore more.</description><link>https://kristaps.me/blog/solidity-delegatecall-proxy-pattern</link><pubDate>Fri, 29 Jul 2022 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>This time we will talk about the critical lower-level function <code>delegatecall</code>. It is widely used in a proxy pattern, for instance, when using <a href="https://docs.openzeppelin.com/upgrades-plugins/1.x/proxies">OpenZepplin upgrades pattern</a>. Essentially this function executes code in another contract but uses data from the caller concept. Let's dig deeper and explore more.</p><h2>Storage clash</h2><p>When using <code>delegatecall</code> function, it is vital to note that state variables should be in the same order in both contracts. If it isn't, then bizarre things can happen. For instance, data will be overwritten.</p><h2>Data labyrinth</h2><p>Let's have a contract, <code>Executor</code>, that will save our lucky number, sender address, and Ether value sent to it.</p><pre><code>pragma solidity ^<span class="number">0.8.0</span>;

<span class="keyword">import</span> <span class="string">"hardhat/console.sol"</span>;

contract <span class="type">Executor</span> {
  uint256 <span class="keyword">public</span> luckyNumber;
  address <span class="keyword">public</span> sender;
  uint256 <span class="keyword">public</span> value;

  function <span class="call">setLuckyNumber</span>(uint256 _luckyNumber) <span class="keyword">public</span> payable {
    luckyNumber = _luckyNumber;
    sender = msg.<span class="property">sender</span>;
    value = msg.<span class="property">value</span>;
  }
}
</code></pre><p>Let's deploy the <code>Executor</code> contract and get the deployed address.</p><img src="https://kristaps.me/assets/solidity-delegatecall/deployed-executor-contract.png" alt="Deployed <code>Executor</code> contract"/><p>After that, we can create the <code>Caller</code> smart contract.</p><img src="https://kristaps.me/assets//solidity-delegatecall/interact-caller-executor.png" alt="Deploy <code>Caller</code> contract"/><pre><code>contract <span class="type">Caller</span> {
  uint256 <span class="keyword">public</span> luckyNumber;
  address <span class="keyword">public</span> sender;
  uint256 <span class="keyword">public</span> value;

  function <span class="call">setLuckyNumber</span>(address executor, uint256 _luckyNumber) <span class="keyword">public</span> payable {
    (bool success, bytes memory data) = executor.<span class="call">delegatecall</span>(
      abi.<span class="call">encodeWithSignature</span>(<span class="string">"setLuckyNumber(uint256)"</span>, _luckyNumber)
    );

    console.<span class="call">log</span>(success);
  }
}
</code></pre><p>Now when we interact with the <code>Caller</code> contract and set the lucky number, we can see that data has been changed only in this contract, not in the <code>Executor</code> contract. To verify that, we can get the lucky number from both contracts.</p><img src="https://kristaps.me/assets/solidity-delegatecall/deploy-caller-contract.png" alt="Interaction with the <code>Caller</code> and <code>Executor</code> smart contracts"/><h2>Potential vulnerability</h2><p>Using the <code>delegatecall</code> function is a compelling feature in Solidity programming language. With great power comes great responsibility. It can be perilous when misused.</p><p>Two major vulnerability attacks are mistakes preserving caller context and storage layout mismatch. We won't go into details this time but will follow up on that in future posts.</p><h2>TL;DR</h2><p>The <code>delegatecall</code> is a lower-level function in Solidity programming language. It unlocks the possibility to interact from one smart contract with another by using the caller's context. When using <code>delegatecall</code> we should be super careful because misusing it can cause serious vulnerabilities.</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/8af2cca1a71895a03cb28198fe57315f">Sample code</a></li></ul><ul><li><a href="https://docs.soliditylang.org/en/v0.8.15/introduction-to-smart-contracts.html#delegatecall-callcode-and-libraries">Official documentation</a></li><li><a href="https://solidity-by-example.org/delegatecall/">Delegatecall - Solidity by Example</a></li><li><a href="https://eips.ethereum.org/EIPS/eip-1967">EIP-1967: Standard Proxy Storage Slots</a></li><li><a href="https://docs.openzeppelin.com/contracts/4.x/upgradeable">OpenZepplin upgrades</a></li><li><a href="https://solidity-by-example.org/hacks/delegatecall/">Delegatecall Vulnerabilities</a></li><li><a href="https://blockchain-academy.hs-mittweida.de/courses/solidity-coding-beginners-to-intermediate/lessons/solidity-5-calling-other-contracts-visibility-state-access/topic/delegatecall/">https://blockchain-academy.hs-mittweida.de/courses/solidity-coding-beginners-to-intermediate/lessons/solidity-5-calling-other-contracts-visibility-state-access/topic/delegatecall/</a></li><li><a href="https://eip2535diamonds.substack.com/p/understanding-delegatecall-and-how">Understanding delegatecall And How to Use It Safely</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-storage-vs-memory</guid><title>Storage and memory secrets in Solidity</title><description>This time, we will talk about storage locations in Solidity programming language, specifically about the `storage` and `memory` locations. Not knowing what they represent and how they work can cause issues in our smart contracts.</description><link>https://kristaps.me/blog/solidity-storage-vs-memory</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>This time, we will talk about storage locations in Solidity programming language, specifically about the <code>storage</code> and <code>memory</code> locations. Not knowing what they represent and how they work can cause issues in our smart contracts.</p><h2>Storage</h2><p>Storage in smart contracts holds data between function calls. We can imagine that <code>storage</code> would be as a hard drive in the computer. Even if we turn it off, the data stays and isn't erased. On the blockchain, what we write in storage is stored.</p><h3>Storage by default</h3><h4>State variables</h4><p>By default, Solidity will keep in storage smart contract's state variables.</p><pre><code>contract <span class="type">StorageContract</span> {
  <span class="keyword">struct</span> LuckyNumber {
    uint256 number;
    string reason;
  }

  <span class="call">mapping</span>(address =&gt; <span class="type">LuckyNumber</span>) luckyNumbers;
}
</code></pre><p>In this example smart contract's state variables <code>luckyNumbers</code> are kept in storage, and data will persist between function calls.</p><p>When we add and get the lucky number, we have a predictable outcome.</p><pre><code>function <span class="call">addLuckyNumber</span>(<span class="type">LuckyNumber</span> memory luckyNumber) <span class="call">external</span> {
  <span class="call">require</span>(luckyNumber.<span class="property">number</span> != <span class="number">0</span>, <span class="string">"Lucky number can't be 0!"</span>);
  <span class="call">require</span>(luckyNumbers[msg.<span class="property">sender</span>].number == <span class="number">0</span>, <span class="string">"You already have set lucky number. Edit it if you have another one."</span>);

  luckyNumbers[msg.<span class="property">sender</span>] = luckyNumber;
}

function <span class="call">getMyLuckyNumber</span>() external view <span class="call">returns</span>(uint256) {
  <span class="call">require</span>(luckyNumbers[msg.<span class="property">sender</span>].number != <span class="number">0</span>, <span class="string">"You don't have a lucky number set yet."</span>);

  <span class="type">LuckyNumber</span> memory luckyNumber = luckyNumbers[msg.<span class="property">sender</span>];

  <span class="keyword">return</span> luckyNumber.<span class="property">number</span>;
}
</code></pre><h4>Local function variables</h4><p>Local function variables of struct, array, or mapping are saved in storage by default. It means that if we declare these values in our functions, they are kept in storage, which can cause unexpected issues that are hard to track.</p><p>If we add a function <code>editLuckyNumber</code> to our code example and mark a local copy as <code>storage</code> it will edit the state variable that we expect.</p><pre><code>function <span class="call">editLuckyNumber</span>(uint256 luckyNumber) <span class="call">external</span> {
  <span class="call">require</span>(luckyNumber != <span class="number">0</span>, <span class="string">"Lucky number can't be 0!"</span>);
  <span class="call">require</span>(luckyNumbers[msg.<span class="property">sender</span>].number != <span class="number">0</span>, <span class="string">"You don't have a lucky number set yet."</span>);

  <span class="type">LuckyNumber</span> storage _luckyNumber = luckyNumbers[msg.<span class="property">sender</span>];
  _luckyNumber.<span class="property">number</span> = luckyNumber;
}
</code></pre><h2>Memory</h2><p>In memory, Solidity keeps all locally defined value types, which can be uint, string, etc., but not an array, a struct, or a mapping. Function arguments are kept in memory as well. Remember that <code>memory</code> can't be used at the smart contract level, only locally in functions.</p><pre><code>function <span class="call">multiplyByItself</span>(uint256 number) external pure <span class="call">returns</span>(uint256) {
  uint256 result = number * number;

  <span class="keyword">return</span> result;
}
</code></pre><p>In this example, the function argument <code>number</code> that we pass in our function is stored in memory. Also, locally defined variable of the <code>result</code> is stored in memory and will be released as soon as the function's execution ends.</p><h2>Pitfall using memory and storage</h2><p>One of the major pitfalls of wrong usage of the <code>storage</code> and <code>memory</code> keywords in the Solidity programming language is that we declare a variable either <code>storage</code> or <code>memory</code> without thinking it through. First, keeping data in <code>storage</code> will consume more gas because we need to pay for the block space. Second, we should ask ourselves whether we need to access data that we keep between the function calls. By function calls, there can be even two different functions.</p><p>If we define the <code>_luckyNumber</code> in function <code>editLuckyNumber</code> using the <code>memory</code> keyword, it will edit this function locally only, and changes won't be written to the blockchain.</p><pre><code>function <span class="call">editLuckyNumber</span>(uint256 luckyNumber) <span class="call">external</span> {
  <span class="call">require</span>(luckyNumber != <span class="number">0</span>, <span class="string">"Lucky number can't be 0!"</span>);
  <span class="call">require</span>(luckyNumbers[msg.<span class="property">sender</span>].number != <span class="number">0</span>, <span class="string">"You don't have a lucky number set yet."</span>);

  <span class="type">LuckyNumber</span> memory _luckyNumber = luckyNumbers[msg.<span class="property">sender</span>];
  _luckyNumber.<span class="property">number</span> = luckyNumber;
}
</code></pre><p>This function's outcome will result in editing the lucky number not working because we update it only locally.</p><h2>TL;DR</h2><p>Storing data using Solidity language in our smart contracts is a crucial thing. Life is easier with value types, but with arrays, structs, and mappings, it is more tricky. That's why it is essential to ask whenever we want to save these variables. Do we want data to persist between calling the smart contract or being saved locally while executing the function?</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/5b19bee0c78e3e41aa5d52573b2e696e">Sample code</a></li></ul><ul><li><a href="https://docs.soliditylang.org/en/v0.3.3/frequently-asked-questions.html#what-is-the-memory-keyword-what-does-it-do">What is the memory keyword? What does it do?</a></li><li><a href="https://www.geeksforgeeks.org/storage-vs-memory-in-solidity/">Storage vs Memory in Solidity</a></li><li><a href="https://stackoverflow.com/questions/33839154/in-ethereum-solidity-what-is-the-purpose-of-the-memory-keyword">In Ethereum Solidity, what is the purpose of the "memory" keyword?</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-events</guid><title>How events in Solidity work, and why are they needed</title><description>Events in Solidity programming language help inform when something has happened in the smart contract. Parties like a web frontend, data gathering tools, and more can listen to specific events and react accordingly. In this post, we will dig deeper into Events and how to use them when developing smart contracts on Ethereum-like blockchains.</description><link>https://kristaps.me/blog/solidity-events</link><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Events in Solidity programming language help inform when something has happened in the smart contract. Parties like a web frontend, data gathering tools, and more can listen to specific events and react accordingly. In this post, we will dig deeper into Events and how to use them when developing smart contracts on Ethereum-like blockchains.</p><h2>Define an event</h2><p>We need to start with the <code>event</code> keyword to define an event.</p><pre><code>event <span class="type">TicketContractCreated</span>();
</code></pre><p>An event can have additional parameters. It means that it is a struct that can hold data. Data types are the same that we are using in Solidity language.</p><pre><code>event <span class="type">TicketCreated</span>(address ticketHolder);
</code></pre><h3>Parameters</h3><p>Event struct can hold multiple parameters. We can name these parameters, but that is optional, and we can provide just the data type.</p><pre><code>event <span class="type">TicketCreated</span>(address ticketHolder, uint256 ticketId);
</code></pre><p>Suppose we want to filter the logs when listening to the specific events. We need to specify which of the parameters should be indexed. There is a limit that only up to 3 parameters can be indexed. Keep in mind that indexing parameters are cost-efficient and will take more gas fees for the transaction to be mined.</p><pre><code>event <span class="type">TicketCreated</span>(address indexed ticketHolder, uint256 ticketId);
</code></pre><h2>Emit the event</h2><p>When a specific action has happened, we can release the event with the <code>emit</code> keyword followed by the event name.</p><pre><code>emit <span class="type">TicketContractCreated</span>();
</code></pre><p>If an event does have any parameters, we can specify those in the parenthesis in the same order as to how we defined them.</p><pre><code>emit <span class="type">TicketCreated</span>(msg.<span class="property">sender</span>);
</code></pre><h2>See emitted events</h2><p>To see emitted events can use <a href="https://remix.ethereum.org/">Remix IDE</a>, <a href="https://etherscan.io/">Etherscan</a> block explorer, or any library to interact with Ethereum like chains like <a href="https://docs.ethers.io/v5/">Ethers.js</a>, <a href="https://web3js.readthedocs.io">web3.js</a> or any other. How to do that is out of the scope of this blog post.</p><h2>TL;DR</h2><p>Events in Solidity programming language are a great way to inform other parties that something has happened. We can't just rely on the transaction status. An event can hold data, and others can filter events and react upon that, for instance, in the web app.</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/56c1b327f34c3deb2900df4f090af555">Sample code</a></li></ul><ul><li><a href="https://docs.soliditylang.org/en/v0.8.14/abi-spec.html#events ">Official documentation</a></li><li><a href="https://solidity-by-example.org/events">Solidity by Example - Events</a></li><li><a href="https://ethereum.org/en/developers/tutorials/logging-events-smart-contracts/">Logging data from smart contracts with events</a></li><li><a href="https://hackernoon.com/how-to-use-events-in-solidity-pe1735t5">How To Use Events In Solidity</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-mapping</guid><title>The Story behind Mapping in Solidity</title><description>Mappings in Solidity programming language play a significant role. These are hash tables that can have a key and value. When we use them, there are some caveats, especially from other programming languages. Let's explore them in this article.</description><link>https://kristaps.me/blog/solidity-mapping</link><pubDate>Thu, 7 Apr 2022 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Mappings in Solidity programming language play a significant role. These are hash tables that can have a key and value. When we use them, there are some caveats, especially from other programming languages. Let's explore them in this article.</p><h2>Mapping Keys and Values</h2><p>Mappings essentially are hash tables, so it means that the key is saved as a hash. To access the value, key is hashed and found in the mapping table.</p><h3>Limitations</h3><p>Mappings can be state variables, storage reference types in functions, or parameters for library functions. A mapping can't be returned, and it can't be used in structs or arrays that contain arrays.</p><p>The key type can be any built-in type, bytes, string, or enum value. Our defined types are not allowed. This is because Solidity knows how to hash the value.</p><p>Value types can be any - built-in or our defined types. It can even be a mapping that would create a double hash table.</p><h2>Reading and writing from Mapping</h2><p>Let's go over how we can read and write data in a mapping. Let's imagine we want to build a lucky number registry. Everyone with their wallet address can set and read their lucky number.</p><p>At first, we need to set up the mapping of the lucky numbers.</p><pre><code><span class="call">mapping</span>(address =&gt; uint256) <span class="keyword">private</span> luckyNumbers;
</code></pre><p>If we set the access level to the public, the getter function is compiled by default.</p><h3>Getting the value in the mapping</h3><p>To get the value from a mapping we need to know the key. Solidity behind the scenes will hash it and find it from the hash table.</p><pre><code>function <span class="call">getMyLuckyNumber</span>() external view <span class="call">returns</span>(uint256) {
  <span class="call">require</span>(luckyNumbers[msg.<span class="property">sender</span>] != <span class="number">0</span>, <span class="string">"0 can't be lucky"</span>);

  <span class="keyword">return</span> luckyNumbers[msg.<span class="property">sender</span>];
}
</code></pre><p>If the value does not exist, we get the default value, which is zero in the case of <code>uint256</code>.</p><h3>Setting the value in the mapping</h3><p>We need a key and value of the defined type that mapping can hold when setting the value. Be aware that this also updates the value if it has been already set.</p><pre><code>function <span class="call">setMyLuckyNumber</span>(uint256 number) <span class="call">external</span> {
  <span class="call">require</span>(number &gt; <span class="number">0</span>, <span class="string">"Can't be set to zero"</span>);

  luckyNumbers[msg.<span class="property">sender</span>] = number;
}
</code></pre><h2>TL;DR</h2><p>The mapping type is practically a hash table in the Solidity programming language with a key and value. There are some limitations, especially what we can define as the key. We need the key to get data from the mapping. Remember the default values for the type we're using in the value in case the value has not been set. When we are setting the value, we are also overwriting the old one.</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/488573feba1cf976b5854faeb1fd2ba8">Sample code</a></li></ul><ul><li><a href="https://docs.soliditylang.org/en/v0.8.13/types.html">Official documentation</a></li><li><a href="https://solidity-by-example.org/mapping/">Solidity by Example - Mapping</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/solidity-array</guid><title>Mastering Arrays in Solidity</title><description>Arrays in Solidity programming language can hold primitive data types like integers, boolean, and string. An array can be initialized with a fixed or dynamic size. If we compare them to other more advanced programming languages, there are pretty limited functions available to work with arrays. Despite that, we can add, remove, get the size of the array, and more.</description><link>https://kristaps.me/blog/solidity-array</link><pubDate>Tue, 1 Mar 2022 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Arrays in Solidity programming language can hold primitive data types like integers, boolean, and string. An array can be initialized with a fixed or dynamic size. If we compare them to other more advanced programming languages, there are pretty limited functions available to work with arrays. Despite that, we can add, remove, get the size of the array, and more.</p><h2>Initialize an array</h2><p>We can create an array in Solidity, either having a dynamic or fixed size of the elements that it can hold.</p><p>Using a fixed-size array can reduce gas costs but not always we can predict the size of the elements.</p><h3>Dynamic size</h3><p>When creating a dynamic array in Solidity, we need to provide the data type that it can hold. Unfortunately, arrays can't have multiple data types in one array.</p><pre><code>uint256[] array;
</code></pre><h3>Fixed size</h3><p>Another option is to provide the size of the elements that an array can hold. This can save gas costs, especially when creating smart contracts on the Ethereum blockchain.</p><pre><code>uint256[<span class="number">10</span>] array;
</code></pre><p>Behind the scenes, Solidity fills the array with default values, which for the <code>uint256</code> is 0 (zero).</p><p>We can also provide the values when initializing an array.</p><pre><code>uint256[] array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];
</code></pre><h2>Add an element</h2><p>We can add a new element for the dynamic type of arrays. To do that, we need to use the <code>push</code> method. It adds an element to the end of an array.</p><p>Here is an example of adding 100 to the array that holds <code>uint256</code> values.</p><pre><code>array.<span class="call">push</span>(<span class="number">100</span>);
</code></pre><h2>Change an element</h2><p>When changing an element, we need to provide the index and the new value.</p><p>Let's say we want to change the first element's value in the array.</p><pre><code>array[<span class="number">0</span>] = <span class="number">101</span>;
</code></pre><h2>Get the size of the array</h2><p>To get the size of the array then, we should use the <code>length</code> function.</p><pre><code>uint256 size = array.<span class="property">length</span>;
</code></pre><h2>Remove</h2><p>We can remove an element from array by using the <code>delete</code> function. The catch here is that it doesn't change the size of the array. It resets to the default value, which for instance, in the <code>uint256</code> case is 0 (zero).</p><p>This example resets the first element in the array to 0 (zero).</p><pre><code>delete array[<span class="number">0</span>];
</code></pre><p>If we want to remove an element and change the array's length, we can move all elements up from the element we want to delete. Then pop the last element because it isn't needed anymore.</p><pre><code><span class="keyword">for</span> (uint256 i = _index; i &lt; _array.<span class="property">length</span> - <span class="number">1</span>; i++) {
    _array[i] = _array[i + <span class="number">1</span>];
}
_array.<span class="call">pop</span>();
</code></pre><h2>TL;DR</h2><p>Arrays in Solidity programming language can hold primitive data types like <code>uint</code>, <code>boolean</code>, <code>address</code>, or <code>string</code>. We can create a fixed or dynamic size array. A fixed-size array has less implications for gas costs. We can change elements, remove, get the size of the array.</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/de8a9ca0657d25d656b7ad19b1705ce2">Sample code</a></li></ul><ul><li><a href="https://docs.soliditylang.org/en/v0.8.11/types.html">Official documentation</a></li><li><a href="https://solidity-by-example.org/array/">Solidity by Example - Array</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/visibility-and-accessibility-in-solidity</guid><title>Accessibility and visibility in Solidity</title><description>Solidity language allows specifying accessibility for contract functions and state variables. That will enable us to set constraints on constructing the smart contract and whether other contracts or addresses can access the data. Contract state variables and functions have a slight difference that we're going to check out. I want to mention that accessibility and visibility are different things in blockchain development context.</description><link>https://kristaps.me/blog/visibility-and-accessibility-in-solidity</link><pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Solidity language allows specifying accessibility for contract functions and state variables. That will enable us to set constraints on constructing the smart contract and whether other contracts or addresses can access the data. Contract state variables and functions have a slight difference that we're going to check out. I want to mention that accessibility and visibility are different things in blockchain development context.</p><h2>Function visibility</h2><p>Functions in smart contracts can have four accessibility levels.</p><h3>Public</h3><p>When a function is defined as <code>public</code> it can be called from any other contract, including a smart contract that contains it or address.</p><pre><code>function <span class="call">publicFunction</span>() <span class="keyword">public</span> {
  publicInt += <span class="number">1</span>;
}
</code></pre><h3>External</h3><p>Keyword <code>external</code> means that a function can be called by other contracts or addresses. If we want to call an <code>external</code> function, we can do it using <code>this</code> keyword.</p><pre><code>function <span class="call">externalFunction</span>() <span class="call">external</span> {
  externalInt += <span class="number">1</span>;
}

function <span class="call">callExternalFunction</span>() <span class="keyword">public</span> {
  this.<span class="call">externalFunction</span>();
}
</code></pre><h3>Internal</h3><p>Internal functions can be called from the same smart contract or any other inherited from it.</p><pre><code>function <span class="call">internalFunction</span>() <span class="keyword">internal</span> {
  internalInt += <span class="number">1</span>;
}
</code></pre><h3>Private</h3><p>Private functions aren't visible and can't be accessed from other smart contracts or addresses. These functions aren't accessible in contracts that inherit a smart contract where this function is defined.</p><pre><code>function <span class="call">internalFunction</span>() <span class="keyword">internal</span> {
  internalInt += <span class="number">1</span>;
}
</code></pre><h2>Contract state variable visibility</h2><p>Smart contract state variables can be <code>public</code>, <code>internal</code> and <code>private</code>.</p><h3>Public</h3><p>Public state variables can be accessed from any smart contract, including those that hold them or any address. Solidity generates for the <code>public</code> state variable a getter function.</p><pre><code>contract <span class="type">Accessibility</span> {
  uint <span class="keyword">public</span> publicInt;
}

<span class="comment">// can get and set from other smart contracts</span>
contract <span class="type">AccessPublic</span> {
  <span class="type">Accessibility</span> accessibility = new <span class="type">Accessibility</span>();

  function <span class="call">accessPublicInt</span>() <span class="keyword">public</span> view <span class="call">returns</span>(uint) {
    uint publicInt = accessibility.<span class="call">publicInt</span>();
    <span class="keyword">return</span> publicInt;
  }
}

</code></pre><h3>Internal</h3><p>Similar to functions, <code>internal</code> state variables can be accessed from a contract that defined them or any other that inherits from a smart contract. Important to note that smart contract state variables are <code>internal</code> by default.</p><pre><code>uint <span class="keyword">internal</span> internalInt;
</code></pre><h3>Private</h3><p>A <code>private</code> state variable has the same characteristics as functions. It can be accessed only within the same contract, not any other contracts.</p><pre><code>uint <span class="keyword">private</span> privateInt;
</code></pre><h2>Visibility and accessibility</h2><p>In blockchain development, visibility and accessibility have a different meaning. Everything inside a smart contract can be visible because all transactions are open in a ledger that anyone can see. Private or internal prevents other contracts or addresses from modifying the data. It can be visible from the outside because nothing can be hidden on the blockchain. It means that you can restrict access to a state variable or a function, but it is visible.</p><h2>TL;DR</h2><p>Solidity programming language has multiple options to define access levels for smart contract functions and state variables. In blockchain development, visibility and accessibility aren't the same. We can restrict access to the functions or state variables, but it can be viewed from the outside.</p><h2>Links</h2><ul><li><a href="https://gist.github.com/fassko/5b73bdb38f0184f0b54b2f6f5cfda095">Sample code</a></li></ul><ul><li><a href="https://docs.soliditylang.org/en/v0.8.11/contracts.html#visibility-and-getters">Official documentation</a></li><li><a href="https://solidity-by-example.org/visibility/">Solidity by Example</a></li><li><a href="https://ethereum.stackexchange.com/questions/11393/how-to-hide-a-function-of-all-but-visible-to-the-owner">How to hide a function of all but visible to the owner</a></li><li><a href="https://ethereum.stackexchange.com/questions/6547/solidity-functions-private-visibility">Solidity functions - private visibility</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swift-solidity-structure-functions</guid><title>Solidity for Swift developers: File Structure and Functions</title><description>Solidity is an object-oriented language to write smart contracts that can be deployed on the blockchain, for instance, Ethereum. The syntax is similar to Javascript, but on the other hand, semantics is closer to C++. We will dig into Solidity language structure and functions from a Swift developer's perspective.</description><link>https://kristaps.me/blog/swift-solidity-structure-functions</link><pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Solidity is an object-oriented language to write smart contracts that can be deployed on the blockchain, for instance, Ethereum. The syntax is similar to Javascript, but on the other hand, semantics is closer to C++. We will dig into Solidity language structure and functions from a Swift developer's perspective.</p><h2>Pragma and file extension</h2><p>Before we jump into the Solidity language structure, we need to know what a <code>pragma</code> keyword is and what it means.</p><p>Unlike the Objective-C <code>#pragma</code> and Swift <code>MARK</code>, the' pragma' keyword in Solidity describes what version of the compiler should use. Keep in mind that it instructs the compiler to check if the versions do match. It does not turn on or off any language features.</p><p>For instance, if we would like to tell the Solidity compiler that we want to use the 0.8.x version, we can start the source file like this:</p><pre><code>pragma solidity ^<span class="number">0.8.0</span>;
</code></pre><p>We can also use greater or smaller operations to describe even the version interval, which could be handy.</p><p>There are other ways to use the <code>pragma</code> keyword, but we won't look into that this time.</p><p>Solidity source files are saved with the <code>.sol</code> extension.</p><img src="https://kristaps.me/assets/solidity-swift-developers-structure/solidity-file.png" alt="Solidity file"/><h2>Everything starts with a Contract</h2><p>Contracts in Solidity language are similar to classes in Swift. Contracts contain state variables, functions, function modifiers, events, errors, structs, and enums. This time we are only going to look into function structure.</p><p>Like classes, we need to name it and open, and close with braces.</p><pre><code>contract <span class="type">HelloSwiftFromSolidity</span> {

}
</code></pre><h2>State Variables</h2><p>State variables are variables that are declared inside the <code>contract</code>. Be aware that this information is stored on the blockchain contract storage once you deploy it. We don't need to worry about getters and setters. Solidity compiler generates that for us.</p><pre><code>contract <span class="type">HelloSwiftFromSolidity</span> {
  string hello;
}
</code></pre><p>You can notice now that each execution line should end with the semicolon <code>;</code>. That is not the case for the Swift language.</p><h2>Functions</h2><p>Functions can be declared inside and outside the <code>contract</code>, similar to Swift. They can execute a piece of code.</p><pre><code>contract <span class="type">HelloSwiftFromSolidity</span> {
  <span class="comment">// visibility = public because access from outside</span>
  string <span class="keyword">public</span> hello = <span class="string">"Hello Swift"</span>;

  <span class="comment">// visibility = public because access from outside
  // view = just view the data</span>
  function <span class="call">helloSwift</span>() <span class="keyword">public</span> view <span class="call">returns</span>(string memory) {
      <span class="keyword">return</span> hello;
  }
}
</code></pre><p>It is going on a lot, so let's break it down. If we want to access the state variable from outside, we need to set the visibility type to <code>public</code> and do the same for the function. In our case, the function returns something, and we can mark it as <code>view</code>. It returns a string that is stored in the memory and removed after the execution is finished.</p><p>The places, where the function variables and return data can be stored, are:</p><ul><li><code>memory</code> - the lifetime of the variable is limited to the function scope, it isn't saved anywhere;</li><li><code>storage</code> - data is stored in the smart contract storage on the blockchain;</li><li><code>calldata</code> - data is stored outside from where the function is being called, we will discuss more details and how to use it in the future.</li></ul><h3>Function types</h3><p>Functions in Solidity can execute instructions, view data. It can be a <code>view</code> or <code>pure</code> when we view the data. The difference between these two is that pure functions don't modify nor read the state variables.</p><pre><code>function <span class="call">helloWorld</span>() <span class="keyword">public</span> pure <span class="call">returns</span>(string memory) {
  <span class="keyword">return</span> <span class="string">"Hello World"</span>;
}
</code></pre><p>In the code above, we are not reading nor changing anything on the blockchain but just returning some data.</p><h2>TL;DR</h2><p>Solidity is a language to write the smart contracts that can be deployed on the blockchain. The most popular currently is Ethereum. From a Swift developer's perspective, language is quite similar syntax-wise but very different semantics-wise. First of all, every execution line should end with a semicolon. In Solidity equivalent to the Swift classes are contracts that can contain state variables, functions, and other structures.</p><h2>Links</h2><ul><li><a href="https://docs.soliditylang.org/en/v0.8.10/layout-of-source-files.html">Layout of a Solidity Source File</a></li><li><a href="https://docs.soliditylang.org/en/v0.8.10/structure-of-a-contract.html">Structure of a Contract</a></li><li><a href="https://ethereum.org/en/developers/">Ethereum Developer Resources</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-sidebar-tabview</guid><title>Improve iPad sidebar navigation on the iPhone with SwiftUI</title><description>We learned how to add a sidebar for an iPad in the previous blog post, but that approach isn't that great for an iPhone. It looks pretty weird, and once we configure a default view, it automatically navigates to it once iPhone app starts. This isn't great on a phone but makes total sense on an iPad. We can improve that by showing a sidebar for an iPad and a TabView on an iPhone.</description><link>https://kristaps.me/blog/swiftui-sidebar-tabview</link><pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>We learned how to add a sidebar for an iPad in the previous blog post, but that approach isn't that great for an iPhone. It looks pretty weird, and once we configure a default view, it automatically navigates to it once iPhone app starts. This isn't great on a phone but makes total sense on an iPad. We can improve that by showing a sidebar for an iPad and a TabView on an iPhone.</p><h2>Checking if the device is an iPad</h2><p>At first, we need to distinguish whether an app is running on iPhone or iPad. To do that, we should use the <code>UIUserInterfaceIdiom</code> enum. It can answer the question of what kind of device the app is running, starting with a phone and ending with a car within carplay.</p><p>This time we are interested in two enum cases:</p><ul><li><code>phone</code> - interface for iPhone or iPod touch;</li><li><code>pad</code> - interface for iPad.</li></ul><p>To get the current device interface, we need to access it from the UIDevice class that represents the current running device. To retrieve the user interface idiom, we need to get it from the existing class variable from the UIDevice class. Then from the <code>userInterfaceIdiom</code> variable, we get the current device idiom.</p><p>To access this in a bit nicer way, we can extend the <code>UIDevice</code> class and add a new static variable that would be a shorthand version of the process explained before.</p><pre><code><span class="keyword">extension</span> <span class="type">UIDevice</span> {
  <span class="keyword">static var</span> idiom: <span class="type">UIUserInterfaceIdiom</span> {
    <span class="type">UIDevice</span>.<span class="property">current</span>.<span class="property">userInterfaceIdiom</span>
  }
}
</code></pre><p>To make it even more sugar-coated, we can add two static variables to see if the device is an iPhone or an iPad.</p><pre><code><span class="keyword">extension</span> <span class="type">UIDevice</span> {
<span class="keyword">static var</span> isIpad: <span class="type">Bool</span> {
    idiom == .<span class="dotAccess">pad</span>
  }
  
  <span class="keyword">static var</span> isiPhone: <span class="type">Bool</span> {
    idiom == .<span class="dotAccess">phone</span>
  }
}
</code></pre><h2>Dividing navigation</h2><p>Now that we know what kind of device our app users have, we can divide the navigation. That means we are going to use the <code>TabView</code> and for an iPad - sidebar for an iPhone.</p><p>After creating a new SwiftUI project with the Xcode, we could separate the navigation in the <code>ContentView.swift</code> file. Then right in the <code>body</code> we can add the logical statement checking if the device is an iPad, and in another way, it can be a phone view.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">if</span> <span class="type">UIDevice</span>.<span class="property">isIpad</span> {
     <span class="comment">// iPad view</span>
    } <span class="keyword">else</span> {
	    <span class="comment">// iPhone view</span>
    }
  }
}
</code></pre><p>Now we need to go over both steps to add a <a href="https://kristaps.me/blog/swiftui-sidebar/">sidebar for the iPad</a> and a <a href="https://kristaps.me/blog/swiftui-tabview/">tabview for the iPhone</a>. We have looked into doing both of these tasks before, so we aren't doing that in-depth again. Complete code you can check in the <a href="https://github.com/fassko/SwiftUITabViewSidebar">sample project</a>.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">if</span> <span class="type">UIDevice</span>.<span class="property">isIpad</span> {
      <span class="type">NavigationView</span> {
        <span class="type">List</span> {
          <span class="type">NavigationLink</span>(destination: <span class="type">DashboardView</span>()) {
            <span class="type">Label</span>(<span class="string">"Dashboard"</span>, systemImage: <span class="string">"square.dashed"</span>)
          }

          <span class="comment">// ...</span>
        }
      
        <span class="type">DashboardView</span>()
      }
    } <span class="keyword">else</span> {
      <span class="type">TabView</span> {
        <span class="type">DashboardView</span>()
          .<span class="call">tabItem</span> {
            <span class="type">Label</span>(<span class="string">"Dashboard"</span>, systemImage: <span class="string">"square.dashed"</span>)
          }

        <span class="comment">// ...</span>
      }
	  }
  }
}
</code></pre><p>What we can do is extract both steps to the struct variables to separate the concerns.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">if</span> <span class="type">UIDevice</span>.<span class="property">isIpad</span> {
      sidebar
    } <span class="keyword">else</span> {
      tabview
    }
  }
  
  <span class="keyword">private var</span> sidebar: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">List</span> {
        <span class="type">NavigationLink</span>(destination: <span class="type">DashboardView</span>()) {
          <span class="type">Label</span>(<span class="string">"Dashboard"</span>, systemImage: <span class="string">"square.dashed"</span>)
        }
        <span class="comment">// ...</span>
    }
      
      <span class="type">DashboardView</span>()
    }
  }
  
  <span class="keyword">private var</span> tabview: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TabView</span> {
      <span class="type">DashboardView</span>()
        .<span class="call">tabItem</span> {
          <span class="type">Label</span>(<span class="string">"Dashboard"</span>, systemImage: <span class="string">"square.dashed"</span>)
        }

      <span class="comment">// ..</span>
    }
  }
}
</code></pre><h2>Limitations</h2><p>Life isn't just rainbows and butterflies. There are some limitations to this approach. iPhone tab view can hold up to five items. If there are more tabs, then it goes under the more tab.</p><img src="https://kristaps.me/assets/swiftui-sidebar-tabview/iphone-tabview-more.png" alt="iPhone TabView More tab"/><p>We need to consider this approach by showing the tab view instead of the navigation list for an iPhone. Another way could be to show a custom view that we aren't looking into in this article.</p><h2>TL;DR</h2><p>Sidebar is a great way how to show quick navigation to multiple views on an iPad. Sadly, it looks wrong as a list on an iPhone and automatically navigates to the default view. We can improve that by showing a tab view for iPhone and sidebar for iPad user interfaces. We need to remember that a tab view can hold up to five items on an iPhone.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/SwiftUITabViewSidebar">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/uikit/uiuserinterfaceidiom">UIUserInterfaceIdiom documentation</a></li><li><a href="https://developer.apple.com/documentation/uikit/uidevice/">UIDevice documentation</a></li><li><a href="https://kristaps.me/blog/swiftui-tabview/">The hidden secrets of TabView in iOS with SwiftUI</a></li><li><a href="https://kristaps.me/blog/swiftui-sidebar/">How Sidebar works on iPad with SwiftUI</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-sidebar</guid><title>How Sidebar works on iPad with SwiftUI</title><description>Starting with iPadOS 14, Apple has redesigned the iPad sidebar by making it easier to navigate within an app. They are explaining that in the [Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/ios/bars/sidebars/). They are already using that in apps such as Photos, Files, Notes, Calendar, and more. This time let's check out how we can build a sidebar for iPad using SwiftUI. Currently, sidebar element is available only for iPads in landscape mode.</description><link>https://kristaps.me/blog/swiftui-sidebar</link><pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Starting with iPadOS 14, Apple has redesigned the iPad sidebar by making it easier to navigate within an app. They are explaining that in the <a href="https://developer.apple.com/design/human-interface-guidelines/ios/bars/sidebars/">Human Interface Guidelines</a>. They are already using that in apps such as Photos, Files, Notes, Calendar, and more. This time let's check out how we can build a sidebar for iPad using SwiftUI. Currently, sidebar element is available only for iPads in landscape mode.</p><h2>Creating a Sidebar</h2><p>To create a sidebar for the iPad with SwiftUI, we need to create a <code>List</code> view where we would have all the sections and wrap it in a <code>NavigationView</code>. In the list we need to add a <code>Label</code> element for each section.</p><p>The most crucial step here is to tell SwiftUI that the list should be rendered as the sidebar list type. To do so, we need to set the list style to <code>SidebarListStyle</code>.</p><pre><code><span class="type">NavigationView</span> {
  <span class="type">List</span> {
    <span class="type">Label</span>(<span class="string">"About"</span>, systemImage: <span class="string">"info.circle"</span>)
    <span class="type">Label</span>(<span class="string">"Settings"</span>, systemImage: <span class="string">"gear"</span>)
  }
  .<span class="call">listStyle</span>(<span class="type">SidebarListStyle</span>())
}
</code></pre><img src="https://kristaps.me/assets/swiftui-sidebar/ipad-sidebar.png" alt="iPad sidebar with SwiftUI"/><p>Now that we have the Sidebar, let's add a title that would represent the global name. Developers usually choose to put the app name, or, for instance, the Apple Notes app has <strong>Folders</strong> to mean what the Sidebar holds.</p><pre><code><span class="type">NavigationView</span> {
  <span class="type">List</span> {
    <span class="type">Label</span>(<span class="string">"About"</span>, systemImage: <span class="string">"info.circle"</span>)
    <span class="type">Label</span>(<span class="string">"Settings"</span>, systemImage: <span class="string">"gear"</span>)
  }
  .<span class="call">listStyle</span>(<span class="type">SidebarListStyle</span>())
  .<span class="call">navigationTitle</span>(<span class="string">"Sidebar"</span>)
}
</code></pre><img src="https://kristaps.me/assets/swiftui-sidebar/ipad-sidebar-name.png" alt="iPad sidebar with name"/><h2>Navigation from the Sidebar</h2><p>Now that we have the Sidebar, let's implement navigation for events after user taps on the section. To do that, we need to wrap the <code>Label</code> in the <code>NavigationLink</code> and provide a destination SwiftUI view.</p><p>For instance, if we would add About section in the app, it could look like this:</p><pre><code><span class="type">NavigationLink</span> {
  <span class="type">AboutView</span>()
} label: {
  <span class="type">Label</span>(<span class="string">"About"</span>, systemImage: <span class="string">"info.circle"</span>)
}
</code></pre><img src="https://kristaps.me/assets/swiftui-sidebar/ipad-sidebar-navigation.png" alt="iPad sidebar selection"/><h2>Default Home Screen</h2><p>When a user launches the app, they see an empty view until they select something from the Sidebar.</p><img src="https://kristaps.me/assets/swiftui-sidebar/ipad-sidebar-empty-default-screen.png"/><p>To avoid this misleading behavior, we should tell the SwiftUI layout engine to render a default or call it a home screen. The trick is to add another view inside the <code>NavigationView</code> and it will be the default screen when the app is launched for the first time.</p><pre><code><span class="type">NavigationView</span> {
  <span class="type">List</span> {
    <span class="comment">// ...</span>
  }
  .<span class="call">listStyle</span>(<span class="type">SidebarListStyle</span>())
  .<span class="call">navigationTitle</span>(<span class="string">"Sidebar"</span>)
  
  <span class="type">Text</span>(<span class="string">"Please select section"</span>)
    .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
}
</code></pre><p>A good home screen would be a dashboard, frequently used features, or similar functionality.</p><img src="https://kristaps.me/assets/swiftui-sidebar/default-home-screen.png" alt="Default home screen"/><h2>iPhone and iPad portrait mode</h2><p>We have only looked at how it would look like in the iPad in landscape mode. But how about in portrait mode or on the iPhone?</p><h3>iPad portrait mode</h3><p>Currently, a sidebar on the iPad in portrait mode is rendered off the screen. To show it, we need to press either the back button or swipe from the left side of the device.</p><img src="https://kristaps.me/assets/swiftui-sidebar/ipad-sidebar-portrait.gif" alt="iPad sidebar in portrait mode"/><h3>iPhone</h3><p>On the iPhone, the Sidebar is rendered as the default home screen with a navigation list.</p><img src="https://kristaps.me/assets/swiftui-sidebar/iphone-sidebar.gif" alt="iPhone rendering sidebar"/><p>Usually, this isn't what we would want, so in this case, we might need to consider changing it on the iPad size devices. This is out of the scope of this post.</p><h2>TL;DR</h2><p>Sidebar is a great way how to divide different parts of the app into iPad apps. Currently, it is rendered on the iPad in landscape mode and partly in portrait mode. After adding a list of the app sections, we should remember to provide a default home screen. Otherwise, our users will see an empty screen. Apple has implemented this approach in their apps as well in macOS.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/SwiftUISidebar">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/bars/sidebars/">Human Interface Guidelines - Sidebars</a></li><li><a href="https://developer.apple.com/documentation/swiftui/sidebarliststyle">Sidebar official documentation</a></li><li><a href="https://designcode.io/swiftui-handbook-sidebar">Learn how to create a Sidebar navigation for iOS, iPadOS and macOS</a></li><li><a href="https://swiftwithmajid.com/2020/07/21/sidebar-navigation-in-swiftui/">Sidebar navigation in SwiftUI</a></li><li><a href="https://sarunw.com/posts/how-to-toggle-sidebar-in-macos/">How to show and hide a sidebar in a SwiftUI macOS app</a></li><li><a href="https://betterprogramming.pub/using-sidebar-in-swiftui-without-a-navigationview-94f4181c09b">https://betterprogramming.pub/using-sidebar-in-swiftui-without-a-navigationview-94f4181c09b</a></li><li><a href="https://dev.to/tprezioso/how-to-make-a-sidebar-menu-in-swiftui-ejl">How to Make a Sidebar Menu in SwiftUI</a></li><li><a href="https://serialcoder.dev/text-tutorials/swiftui/implementing-three-column-navigation-in-swiftui/">Implementing Three Column Navigation in SwiftUI</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-three-ways-button</guid><title>Three brilliant ways to style button with SwiftUI</title><description>Using mobile apps, we navigate to another view, calculate business expenses, or send a tweet by tapping on a button. SwiftUI makes it a breeze to construct a button. This time we will talk how to do it in three ways using the view modifier approach, building a custom view modifier, and applying the button style.</description><link>https://kristaps.me/blog/swiftui-three-ways-button</link><pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Using mobile apps, we navigate to another view, calculate business expenses, or send a tweet by tapping on a button. SwiftUI makes it a breeze to construct a button. This time we will talk how to do it in three ways using the view modifier approach, building a custom view modifier, and applying the button style.</p><p>We are going to start with the most basic SwiftUI button and style.</p><pre><code><span class="type">Button</span>(<span class="string">"Continue"</span>, action: {})
</code></pre><img src="https://kristaps.me/assets/swiftui-three-ways-button/basic-button.png" alt="Basic SwiftUI button"/><h2>Using a Custom View Modifier</h2><p>In SwiftUI view modifiers are used to change the view in some kind of way. We can build a custom view modifiers ourselves. We will try to build one to create a custom button.</p><p>At first we need to create the custom modifier. To do that we should use the <code>ViewModifier</code> protocol that requires to implement one function <code>func body(content: Content) -&gt; some View</code> which takes in a view and produces a different version of that view.</p><pre><code><span class="keyword">struct</span> CustomButtonModifier: <span class="type">ViewModifier</span> {
  <span class="keyword">func</span> body(content: <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    content
      .<span class="call">font</span>(.<span class="dotAccess">title</span>)
      .<span class="call">foregroundColor</span>(.<span class="dotAccess">white</span>)
      .<span class="call">padding</span>()
      .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">blue</span>)
      .<span class="call">clipShape</span>(<span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">20</span>))
  }
}
</code></pre><p>We can apply the newly made view modifier with a <code>.modifier</code> modifier to the original view, but we can create an extension to the <code>View</code> protocol. That would allow us to use it in a more shorthand way.</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">func</span> customButton() -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">modifier</span>(<span class="type">CustomButtonModifier</span>())
  }
}
</code></pre><p>We can create a SwiftUI button view now and apply our freshly created view modifier.</p><pre><code><span class="type">Button</span>(<span class="string">"Continue"</span>, action: {})
  .<span class="call">customButton</span>()
</code></pre><h2>Building a Custom View</h2><p>Now let's look into how we can style a SwiftUI button by building a custom view. We need to create a custom view that we will pass into <code>label</code> parameter when constructing the Button with the <code>init(action: () -&gt; Void, label: () -&gt; Label)</code> initializer.</p><pre><code><span class="keyword">struct</span> CustomButtonView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Text</span>(<span class="string">"Continue"</span>)
      .<span class="call">font</span>(.<span class="dotAccess">title</span>)
      .<span class="call">foregroundColor</span>(.<span class="dotAccess">white</span>)
      .<span class="call">padding</span>()
      .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">blue</span>)
      .<span class="call">clipShape</span>(<span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">20</span>))
  }
}
</code></pre><p>Now that we have our custom view, we can use it and create the button.</p><pre><code><span class="type">Button</span>(action: {}, label: {
  <span class="type">CustomButtonView</span>()
})
</code></pre><h2>Applying the Button Style</h2><p>The most popular SwiftUI way of styling a button is by applying the custom button style. SwiftUI comes with couple of built-in button styles, but this time we will create our own. To do that we need to create a custom style struct and conform to the <code>ButtonStyle</code> protocol that applies the standard interaction behaviour and we can customize the appearance ourselves.</p><pre><code><span class="keyword">struct</span> CusttomButtonStyle: <span class="type">ButtonStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    configuration.<span class="property">label</span>
      .<span class="call">font</span>(.<span class="dotAccess">title</span>)
      .<span class="call">foregroundColor</span>(.<span class="dotAccess">white</span>)
      .<span class="call">padding</span>()
      .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">blue</span>)
      .<span class="call">clipShape</span>(<span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">20</span>))
  }
}
</code></pre><p>Now that we have defined our custom button style, we can apply it by using the <code>.buttonStyle</code> view modifier.</p><pre><code><span class="type">Button</span>(<span class="string">"Continue"</span>, action: {})
  .<span class="call">buttonStyle</span>(<span class="type">CusttomButtonStyle</span>())
</code></pre><h2>Outcome</h2><p>Let's put all the buttons one under another in the <code>VStack</code> and see the outcome. All of them should be the same.</p><img src="https://kristaps.me/assets/swiftui-three-ways-button/three-buttons-look-same.png" alt="All three buttons"/><h2>TL;DR</h2><p>A button is a gateway to most of our app functionalities like opening another view, sending a tweet or an email. With SwiftUI we can create a button in various ways like applying a view modifier, creating a custom view and styling it with a custom button style.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/SwiftUICustomButton">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/swiftui/viewmodifier">ViewModifier documentation</a></li><li><a href="https://developer.apple.com/documentation/swiftui/button">SwiftUI Button documentation</a></li><li><a href="https://swiftwithmajid.com/2020/02/19/mastering-buttons-in-swiftui/">Mastering buttons in SwiftUI</a></li><li><a href="https://sarunw.com/posts/swiftui-buttonstyle/">SwiftUI ButtonStyle</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/customizing-button-with-buttonstyle">Customizing Button with ButtonStyle</a></li><li><a href="https://www.fivestars.blog/articles/button-styles/">Exploring SwiftUI's Button styles</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-map-annotations</guid><title>Exploring SwiftUI map custom annotations</title><description>We [explored](https://kristaps.me/blog/swiftui-mapview/) the Mapview in SwiftUI a while back. This time we will look into creating custom map annotations, the limitations, and how to overcome some of them. Placing annotations on the map, like marking a specific place, is one of the most critical tasks when showing a map in our iOS applications.</description><link>https://kristaps.me/blog/swiftui-map-annotations</link><pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>We <a href="https://kristaps.me/blog/swiftui-mapview/">explored</a> the Mapview in SwiftUI a while back. This time we will look into creating custom map annotations, the limitations, and how to overcome some of them.</p><p>Placing annotations on the map, like marking a specific place, is one of the most critical tasks when showing a map in our iOS applications.</p><h2>MapAnnotation protocol</h2><p>We need to look into the <a href="https://developer.apple.com/documentation/mapkit/mapannotation">MapAnnotation</a>, when working with custom map annotations in SwiftUI. We can customize it exactly how we want and then place it on the map.</p><p>As a reminder, to show annotations on the map we need a list of places that conform to the <code>Identifiable</code> protocol and then use it when initializing the <code>Map</code> view in an array.</p><pre><code><span class="keyword">struct</span> Place: <span class="type">Identifiable</span> {
  <span class="keyword">let</span> id = <span class="type">UUID</span>()
  <span class="keyword">var</span> name: <span class="type">String</span>
  <span class="keyword">var</span> coordinate: <span class="type">CLLocationCoordinate2D</span>
}

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> region = <span class="type">MKCoordinateRegion</span>(center: <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="number">40.748433</span>, longitude: -<span class="number">73.985656</span>), span: <span class="type">MKCoordinateSpan</span>(latitudeDelta: <span class="number">0.01</span>, longitudeDelta: <span class="number">0.01</span>))
  
  <span class="keyword">var</span> empireStateBuilding =
  <span class="type">Place</span>(name: <span class="string">"Empire State Building"</span>, coordinate: <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="number">40.748433</span>, longitude: -<span class="number">73.985656</span>))
  
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Map</span>(coordinateRegion: <span class="property">$region</span>,
        annotationItems: [empireStateBuilding]
    ) { place <span class="keyword">in</span>
      <span class="comment">// ... create a custom MapAnnotation</span>
    }
  }
}
</code></pre><p>Now is the time to create a custom map annotation. Let's make a custom view so we could reuse it. We can use the map circle with fill from the SFSymbols and place a pin on the bottom to show the exact location precisely.</p><pre><code><span class="keyword">struct</span> PlaceAnnotationView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(spacing: <span class="number">0</span>) {
      <span class="type">Image</span>(systemName: <span class="string">"mappin.circle.fill"</span>)
        .<span class="call">font</span>(.<span class="dotAccess">title</span>)
        .<span class="call">foregroundColor</span>(.<span class="dotAccess">red</span>)
      
      <span class="type">Image</span>(systemName: <span class="string">"arrowtriangle.down.fill"</span>)
        .<span class="call">font</span>(.<span class="dotAccess">caption</span>)
        .<span class="call">foregroundColor</span>(.<span class="dotAccess">red</span>)
        .<span class="call">offset</span>(x: <span class="number">0</span>, y: -<span class="number">5</span>)
    }
  }
}
</code></pre><img src="https://kristaps.me/assets/swiftui-custom-map-annotations/map-pin.png" alt="Custom map pin view"/><p>We can use it in our 'Map' closure block now.</p><pre><code>   <span class="type">Map</span>(coordinateRegion: <span class="property">$region</span>,
        annotationItems: [empireStateBuilding]
    ) { place <span class="keyword">in</span>
      <span class="type">MapAnnotation</span>(coordinate: place.<span class="property">coordinate</span>) {
        <span class="type">PlaceAnnotationView</span>()
      }
    }
</code></pre><img src="https://kristaps.me/assets/swiftui-custom-map-annotations/empire-state-building-annotation.png" alt="Empire State Building custom annotation"/><p>When zooming in or out, we see that annotation is placed precisely where the Empire State Building is located.</p><p>After we have the annotation on the map, we would like to somehow interact with it. Let's explore in the following sections how to show an annotation title and navigate when clicking on it.</p><h2>Show and hide the annotation title</h2><p>To show (and hide) the annotation title, we need to include it in the custom annotation view because we are constructing it manually.</p><p>We can add the title in the <code>PlaceAnnotationView</code> <code>VStack</code> and show or hide it when a user taps it.</p><pre><code><span class="keyword">struct</span> PlaceAnnotationView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> showTitle = <span class="keyword">true
  
  let</span> title: <span class="type">String</span>
  
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(spacing: <span class="number">0</span>) {
      <span class="type">Text</span>(title)
        .<span class="call">font</span>(.<span class="dotAccess">callout</span>)
        .<span class="call">padding</span>(<span class="number">5</span>)
        .<span class="call">background</span>(<span class="type">Color</span>(.<span class="dotAccess">white</span>))
        .<span class="call">cornerRadius</span>(<span class="number">10</span>)
        .<span class="call">opacity</span>(showTitle ? <span class="number">0</span> : <span class="number">1</span>)
      
      <span class="type">Image</span>(systemName: <span class="string">"mappin.circle.fill"</span>)
        .<span class="call">font</span>(.<span class="dotAccess">title</span>)
        .<span class="call">foregroundColor</span>(.<span class="dotAccess">red</span>)
      
      <span class="type">Image</span>(systemName: <span class="string">"arrowtriangle.down.fill"</span>)
        .<span class="call">font</span>(.<span class="dotAccess">caption</span>)
        .<span class="call">foregroundColor</span>(.<span class="dotAccess">red</span>)
        .<span class="call">offset</span>(x: <span class="number">0</span>, y: -<span class="number">5</span>)
    }
    .<span class="call">onTapGesture</span> {
      <span class="call">withAnimation</span>(.<span class="dotAccess">easeInOut</span>) {
        showTitle.<span class="call">toggle</span>()
      }
    }
  }
}
</code></pre><p>We can make it appear and disappear with animation using the view state variable and changing the opacity accordingly. It would give that additional nice touch.</p><img src="https://kristaps.me/assets/swiftui-custom-map-annotations/show-hide-annotation-title.gif" alt="Show and hide custom annotation title"/><p>Another option is to show the annotation title all the time. In that case, our app users would understand without tapping what this place is.</p><pre><code><span class="keyword">struct</span> PlaceAnnotationView: <span class="type">View</span> {
  <span class="keyword">let</span> title: <span class="type">String</span>
  
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(spacing: <span class="number">0</span>) {
      <span class="type">Text</span>(title)
        .<span class="call">font</span>(.<span class="dotAccess">callout</span>)
        .<span class="call">padding</span>(<span class="number">5</span>)
        .<span class="call">background</span>(<span class="type">Color</span>(.<span class="dotAccess">white</span>))
        .<span class="call">cornerRadius</span>(<span class="number">10</span>)
      
      <span class="type">Image</span>(systemName: <span class="string">"mappin.circle.fill"</span>)
        .<span class="call">font</span>(.<span class="dotAccess">title</span>)
        .<span class="call">foregroundColor</span>(.<span class="dotAccess">red</span>)
      
      <span class="type">Image</span>(systemName: <span class="string">"arrowtriangle.down.fill"</span>)
        .<span class="call">font</span>(.<span class="dotAccess">caption</span>)
        .<span class="call">foregroundColor</span>(.<span class="dotAccess">red</span>)
        .<span class="call">offset</span>(x: <span class="number">0</span>, y: -<span class="number">5</span>)
    }
  }
}
</code></pre><h2>Navigation from map annotation</h2><p>When a user taps the annotation, we would like to navigate to a different view and show extra information about this place on the map. To do so, we can put the custom annotation view inside the <code>NavigationLink</code> and then navigate to the location details view.</p><pre><code><span class="type">MapAnnotation</span>(coordinate: place.<span class="property">coordinate</span>) {
  <span class="type">NavigationLink</span> {
    <span class="type">LocationDetailsView</span>(place: place)
  } label: {
    <span class="type">PlaceAnnotationView</span>(title: place.<span class="property">name</span>)
  }
}
</code></pre><p>A user will be brought to the details screen after tapping the annotation. That's it!</p><img src="https://kristaps.me/assets/swiftui-custom-map-annotations/navigate.gif" alt="Navigate from the custom annotation"/><h2>TL;DR</h2><p>Marking a place on the map with annotation is a significant feature when using a map view in iOS apps. We want to do it with a custom annotation view in many cases.</p><p>With SwiftUI, we can create custom annotations and show them on the map in a straightforward manner. It is very nice to use this approach because we have all the SwiftUI features like stacks, navigation, and more at our disposal.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/SwiftUIMapCustomAnnotations">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/mapkit/mapannotation">MapAnnotation documentation</a></li><li><a href="https://developer.apple.com/documentation/mapkit/mapannotationprotocol">MapAnnotationProtocol documentation</a></li><li><a href="https://www.youtube.com/watch?v=vfWxwDfX30I">Adding Annotations to Map in SwiftUI</a></li><li><a href="https://swiftuirecipes.com/blog/map-with-annotations-in-swiftui">Map with Annotations in SwiftUI</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-show-annotations-in-a-map-view">How to show annotations in a Map view</a></li><li><a href="https://www.appcoda.com/swiftui-map/">How to Work with SwiftUI Maps and Annotations</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-localization</guid><title>How to translate SwiftUI applications</title><description>Localizing our applications is more critical than we think. We usually stick with English as the primary language. Only 4.9% of the world‚Äôs 7.8 billion inhabitants speak English. Most of the people aren‚Äôt native English speakers. In the grand scheme of things, only 360 million people speak English as their first language.</description><link>https://kristaps.me/blog/swiftui-localization</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Localizing our applications is more critical than we think. We usually stick with English as the primary language. Only 4.9% of the world‚Äôs 7.8 billion inhabitants speak English. Most of the people aren‚Äôt native English speakers. In the grand scheme of things, only 360 million people speak English as their first language.</p><p>SwiftUI gives us great and easy-to-use options to translate our applications into multiple languages. We might all be familiar with the <code>Localizable.strings</code> file where we put all the translations. I‚Äôm not going into how to create this for your projects.</p><p>In addition, Xcode has the option to change build settings and change the default language without changing the system language itself.</p><img src="https://kristaps.me/assets/swiftui-localization/xcode-build-settings.png" alt="Change language in Xcode build settings"/><p>In this article, we will discuss how to translate our SwiftUI apps by checking out built-in features. We will also see how to translate dynamically changing text.</p><h2>Text approach</h2><p>Almost all SwiftUI building blocks like <code>Text</code>, <code>Button</code>, <code>TextField</code>, and more come with initializers using localization behind the scenes.</p><p>For instance, let‚Äôs say we create a <code>Text</code> view with the title <code>Name</code>. We can add that to the <code>Localizable.strings</code> file and it would be translated without us doing anything. If the translation isn‚Äôt provided, it will fall back to the specified default title. We can say that SwiftUI takes care of translating our apps without us doing extra work.</p><p>Let‚Äôs dig in a bit deeper and check out the <code>Text</code> initializer.</p><pre><code><span class="keyword">init</span>(<span class="keyword">_</span> key: <span class="type">LocalizedStringKey</span>, tableName: <span class="type">String</span>? = <span class="keyword">nil</span>, bundle: <span class="type">Bundle</span>? = <span class="keyword">nil</span>, comment: <span class="type">StaticString</span>? = <span class="keyword">nil</span>)
</code></pre><p>We can see that the first parameter is <code>LocalizedStringKey</code>. Let‚Äôs explore it.</p><h2>What is LocalizedStringKey?</h2><p>The <code>LocalizedStringKey</code> is the magic that powers all the translations in our SwiftUI apps. What it does is looks up in the <code>Localizable.strings</code> file and checks if there is a translation with this key. It conforms to <code>ExpressibleByStringLiteral</code> and that‚Äôs why we can use it in our SwiftUI view initializers.</p><p>Another way of using <code>LocalizedStringKey</code> is when a translation is passed into the view. Let‚Äôs say we have a greetings view that takes in a greeting text as a parameter. In such a case, we need to create a parameter that has type <code>LocalizedStringKey</code>. When constructing this, we pass in not the <code>String</code> value but initialized <code>LocalizedStringKey</code> by using the <code>LocalizedStringKey(_ value: String)</code> initializer. In this case, it isn‚Äôt treated as just text, but a key from the translations strings file.</p><h2>String interpolation</h2><p>Now we know how static translations work, but how does it work with dynamically created texts? For instance, we have a text view that would show a greeting with a user-provided name. It would be <code>Hello, Mary!</code>, but <code>Mary</code> would be substituted with an entry from the text field. To translate this kind of text, we should use string interpolation.</p><p>In the example above, we should add in the <code>Localizable.strings</code> file entry <code>Hello, %@!</code> and the <code>%@</code> would be a <code>String</code> parameter we pass in when creating the <code>LocalizedStringKey</code> like this:</p><pre><code><span class="type">Text</span>(<span class="string">"Hello,</span> \(name)<span class="string">!"</span>)
</code></pre><p>Behind the scenes, it is using the String formatting that can format numbers, dates, currency, and more, taking into consideration your user‚Äôs locale. In this blog post, we are not going to dig deeper into that topic.</p><h2>TL;DR</h2><p>Only 4.9% of all people on the planet speak English as their first language. This means that we have to translate our apps to reach a wider audience and make them more accessible.</p><p>SwiftUI has a great set of built-in features to facilitate translations. Most of the view elements can be translated by adding translations to the <code>Localizable.strings</code> file.</p><p>With dynamic text, we should use the string interpolation and format it accordingly, either passed in the parameter is a text, number, or date. And SwiftUI will format that in the user's defined locale.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/SwiftUILocalization">Sample code</a></li><li><a href="https://www.ibidemgroup.com/edu/traducir-aplicaciones-swiftui/">Spanish translation</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/xcode/localization">Localization guide by Apple</a></li><li><a href="https://swiftwithmajid.com/2019/10/16/localization-in-swiftui/">Localization in SwiftUI</a></li><li><a href="https://developer.apple.com/forums/thread/650492">Localization in SwiftUI forum thread</a></li><li><a href="https://benoitpasquier.com/localization-swiftui-how-top-preview-localized-content/">Localization with SwiftUI, how to preview your localized content</a></li><li><a href="https://www.empowerapps.show/96">Localization with Zach Brass</a></li><li><a href="https://www.ibabbleon.com/swiftui_localization_tutorial.html">Introduction to SwiftUI Localization tutorial</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2021-10220">Localize your SwiftUI app WWDC talk</a></li><li><a href="https://developer.apple.com/documentation/swiftui/preparing-views-for-localization">Preparing Views for Localization</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-gridview</guid><title>How to master grid layout in iOS with SwiftUI</title><description>Grid layouts enable us to show views in a grid that expands either vertically or horizontally. We've all seen it, for instance, in the iOS Photos application. Those who have worked with UIKit might recognize it as [UICollectionView](https://developer.apple.com/documentation/uikit/uicollectionview).</description><link>https://kristaps.me/blog/swiftui-gridview</link><pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Grid layouts enable us to show views in a grid that expands either vertically or horizontally. We've all seen it, for instance, in the iOS Photos application. Those who have worked with UIKit might recognize it as <a href="https://developer.apple.com/documentation/uikit/uicollectionview">UICollectionView</a>.</p><p>SwiftUI offers two excellent options - <code>LazyVGrid</code> and <code>LazyHGrid</code>. This time, we will dig deeper and understand how we can use these components. The great thing about these two components is their usage; views are loaded lazily, which means when those appear on the screen.</p><p>I want to point out that <code>HStack</code> and <code>VStack</code> are available from iOS 14 and upward. If you're going to use grid layout in iOS 13, you should look into <code>HStack</code> and <code>VStack</code>, but the drawback is that those don't support lazy loading.</p><h2>Creating a grid layout</h2><p>Three steps are involved in creating a grid layout - have data set to show, configure the grid system, and initialize the grid layout itself. We are going to look into the last two. How to provide the data is an extensive topic and out of the scope of this post.</p><p>The initialization of a <code>LazyVGrid</code> is done by providing the columns, alignment of the items, spacing between the items, pinned views to the footer or header, and the content itself.</p><pre><code><span class="keyword">var</span> columns = [
  <span class="type">GridItem</span>(.<span class="call">flexible</span>()),
  <span class="type">GridItem</span>(.<span class="call">flexible</span>()),
  <span class="type">GridItem</span>(.<span class="call">flexible</span>()),
  <span class="type">GridItem</span>(.<span class="call">flexible</span>())
]

<span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">ScrollView</span> {
    <span class="type">LazyVGrid</span>(columns: columns, spacing: <span class="number">20</span>, pinnedViews: .<span class="dotAccess">sectionHeaders</span>) {
      <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">"Smilies"</span>).<span class="call">font</span>(.<span class="dotAccess">title</span>),
              footer: <span class="type">Text</span>(<span class="string">"Emoji smilies"</span>).<span class="call">font</span>(.<span class="dotAccess">subheadline</span>)) {
        <span class="type">ForEach</span>(<span class="type">Emoji</span>.<span class="property">smilies</span>, id: \.<span class="keyword">self</span>) { emoji <span class="keyword">in</span>
          <span class="type">Text</span>(emoji)
            .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
        }
      }
      
      <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">"Animals"</span>).<span class="call">font</span>(.<span class="dotAccess">title</span>),
              footer: <span class="type">Text</span>(<span class="string">"Emoji animals"</span>).<span class="call">font</span>(.<span class="dotAccess">subheadline</span>)) {
        <span class="type">ForEach</span>(<span class="type">Emoji</span>.<span class="property">animals</span>, id: \.<span class="keyword">self</span>) { emoji <span class="keyword">in</span>
          <span class="type">Text</span>(emoji)
            .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
        }
      }
      
      <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">"Food"</span>).<span class="call">font</span>(.<span class="dotAccess">title</span>),
              footer: <span class="type">Text</span>(<span class="string">"Emoji food"</span>).<span class="call">font</span>(.<span class="dotAccess">subheadline</span>)) {
        <span class="type">ForEach</span>(<span class="type">Emoji</span>.<span class="property">food</span>, id: \.<span class="keyword">self</span>) { emoji <span class="keyword">in</span>
          <span class="type">Text</span>(emoji)
            .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
        }
      }
      
    }
    .<span class="call">padding</span>(.<span class="dotAccess">horizontal</span>)
  }
}
</code></pre><img src="https://kristaps.me/assets/swiftui-grid-layout/lazyvgrid-pinnedviews.png" alt="LazyVGrid"/><p>With the <code>LazyHGrid</code>, it is pretty similar. We just need to exchange <code>columns</code> parameter to `rows.</p><h2>Configure the grid layout</h2><p>When initializing the grid layout, it is paramount to specify how it would look like - rows for vertical-style and horizontal-style grid layout.</p><p>SwiftUI has a component to describe a single grid item, <code>GridItem</code>. Grid item is either row or column.</p><p>When initializing the <code>GridItem,</code> these three parameters are vital:</p><ul><li><code>size</code> - size of the item;</li><li><code>spacing</code> - spacing between the items;</li><li><code>alignment</code> - alignment when placing each grid item.</li></ul><h3>Grid item size</h3><p>We have three options to specify the size of the grid item:</p><ul><li><code>flexible(minimum: CGFloat, maximum: CGFloat)</code> - single flexible item in available space with optional parameters for min and max size;</li><li><code>adaptive(minimum: CGFloat, maximum: CGFloat)</code> - multiple items in available space;</li><li><code>fixed(CGFloat)</code> - single item with a fixed size in available space.</li></ul><p>Let's see how each case works in practice with <code>LazyVGrid</code> and <code>LazyHGrid</code>.</p><h4>Flexible</h4><p>With the flexible grid item size, we can provide minimum and maximum, but it works great even without that. The item size is calculated by dividing available space by item count.</p><pre><code>[
  <span class="type">GridItem</span>(.<span class="call">flexible</span>()),
  <span class="type">GridItem</span>(.<span class="call">flexible</span>()),
  <span class="type">GridItem</span>(.<span class="call">flexible</span>()),
  <span class="type">GridItem</span>(.<span class="call">flexible</span>())
]
</code></pre><h5>Vertical</h5><img src="https://kristaps.me/assets/swiftui-grid-layout/flexible-lazyvgrid.png" alt="Flexible LazyVGrid"/><h5>Horizontal</h5><img src="https://kristaps.me/assets/swiftui-grid-layout/flexible-lazyhgrid.png" alt="Flexible LazyHGrid"/><h4>Adaptive</h4><p>Adaptive grid layout size is the most suitable and appropriate 'GridItem` size. We need to provide the minimum and optionally maximum size, and the SwiftUI layout guide will take all the heavy-duty work away from us.</p><pre><code>[
  <span class="type">GridItem</span>(.<span class="call">adaptive</span>(minimum: <span class="number">50</span>))
]
</code></pre><h5>Vertical</h5><img src="https://kristaps.me/assets/swiftui-grid-layout/adaptive-lazyvgrid.png" alt="Adaptive LazyVGrid"/><h5>Horizontal</h5><img src="https://kristaps.me/assets/swiftui-grid-layout/adaptive-lazyhgrid.png" alt="Adaptive LazyHGrid"/><h4>Fixed</h4><p>Fixed <code>GridItem</code> layout size is meant to use when we know the item size, and it is constant.</p><pre><code>[
  <span class="type">GridItem</span>(.<span class="call">fixed</span>(<span class="number">100</span>)),
  <span class="type">GridItem</span>(.<span class="call">fixed</span>(<span class="number">100</span>)),
  <span class="type">GridItem</span>(.<span class="call">fixed</span>(<span class="number">100</span>))
]
</code></pre><h5>Vertical</h5><img src="https://kristaps.me/assets/swiftui-grid-layout/fixed-lazyvgrid.png" alt="Fixed LazyVGrid"/><h5>Horizontal</h5><img src="https://kristaps.me/assets/swiftui-grid-layout/fixed-lazyhgrid.png" alt="Fixed LazyHGrid"/><h2>TL;DR</h2><p>Grid layout or previously known UICollectionView from UIKit times is a prominent building block to present data in a grid system. SwiftUI affords us components to build a grid layout either vertically or horizontally in a lazy manner; it means that items are loaded only when needed. These two components are <code>LazyVGrid</code> and <code>LazyHGrid</code>.</p><p>To create a grid layout with SwiftUI, we need to provide a data set, columns or rows, spacing between the items, and optionally pinned views (header and footer).</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/SwiftUIGridView">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/swiftui/lazyvgrid">LazyVGrid Documentation</a></li><li><a href="https://developer.apple.com/documentation/swiftui/lazyhgrid">LazyHGrid Documentation</a></li><li><a href="https://developer.apple.com/documentation/swiftui/griditem">GridItem documentation</a></li><li><a href="https://developer.apple.com/documentation/swiftui/section">Section documentation</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-position-views-in-a-grid-using-lazyvgrid-and-lazyhgrid">How to position views in a grid using LazyVGrid and LazyHGrid</a></li><li><a href="https://swiftwithmajid.com/2020/07/08/mastering-grids-in-swiftui/">Mastering grids in SwiftUI</a></li><li><a href="https://swiftui-lab.com/impossible-grids/">https://swiftui-lab.com/impossible-grids/</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-navigationview</guid><title>Cracking the Navigation Bar Secrets with SwiftUI</title><description>Navigating from one view to another, or simply showing a title and buttons, is one of the most crucial building blocks of modern iOS applications. Almost every app has this feature. SwiftUI brings some new approaches for how to show the Navigation Bar, set the title, and add buttons. So let's check it out.</description><link>https://kristaps.me/blog/swiftui-navigationview</link><pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Navigating from one view to another, or simply showing a title and buttons, is one of the most crucial building blocks of modern iOS applications. Almost every app has this feature. SwiftUI brings some new approaches for how to show the Navigation Bar, set the title, and add buttons. So let's check it out.</p><h2>Showing Navigation View</h2><p>To show a Navigation Bar using SwiftUI, we should use the <code>NavigationView</code> component that is responsible for this purpose. It requires that we provide the <code>Content</code> that is a <code>View</code> type. The <code>Content</code> can be anything from a text field to scrollable content. In short, it can be any SwiftUI view.</p><p>To show a title for the navigation, SwiftUI has a completely different approach than we are used to with UIKit. We should set it as a view modifier, not for the <code>NavigationView</code>, but the <code>Content</code>.</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">NavigationView</span> {
    <span class="type">Text</span>(<span class="string">"Hello, world!"</span>)
      .<span class="call">navigationTitle</span>(<span class="string">"Title"</span>)
  }
}
</code></pre><img src="https://kristaps.me/assets/swiftui-navigationview/navigation-title.png" alt="Navigation View with a Title"/><p>SwiftUI framework provides a means to specify the size of the <code>NavigationView</code>. We want to use the <code>.navigationBarTitleDisplayMode</code> modifier for the <code>Content</code> and provide a display mode. <code>DisplayMode</code> type is an enum that has three cases:</p><ul><li><code>automatic</code> - inherits from the previous navigation item;</li><li><code>inline</code> - small navigation size;</li><li><code>large</code> - large navigation size.</li></ul><p>Let's see how to use it in the code.</p><pre><code><span class="type">NavigationView</span> {
  <span class="type">Text</span>(<span class="string">"Hello, world!"</span>)
    .<span class="call">navigationTitle</span>(<span class="string">"Title"</span>)
    .<span class="call">navigationBarTitleDisplayMode</span>(.<span class="dotAccess">inline</span>)     
}
</code></pre><img src="https://kristaps.me/assets/swiftui-navigationview/navigationview-small.png" alt="Small NavigationView"/><p>When we want to change the <code>NavigationView</code> to a larger size, we simply change the <code>.inline</code> to <code>.large</code>.</p><pre><code><span class="type">NavigationView</span> {
  <span class="type">Text</span>(<span class="string">"Hello, world!"</span>)
    .<span class="call">navigationTitle</span>(<span class="string">"Title"</span>)
    .<span class="call">navigationBarTitleDisplayMode</span>(.<span class="dotAccess">large</span>)
}
</code></pre><h2>Add Navigation View Buttons</h2><p>Now that we know how to show the <code>NavigationView</code>, let's explore how to add buttons. I want to point out that previously with SwiftUI, we used the <code>.navigationBarItems</code> view modifier, but this is now deprecated. With the latest SwiftUI version, we should call the <code>.toolbar</code> modifier. Let's dig deeper into how to use it in various scenarios.</p><h3>Add a Single Button</h3><p>Let's add a <code>Button</code> to the leading and trailing side of the <code>NavigationView</code>. To achieve this, we need to use the <code>.toolbar</code> view modifier and pass the <code>.ToolbarItem</code> view. To initialize the <code>.ToolbarItem</code>, we should provide the placement and content. The placement parameter is a type <code>ToolbarItemPlacement</code>, which is a struct. There are a couple ways to manage the placement, but for now we will look into two of them:</p><ul><li><code>navigationBarLeading</code> - shows the button on the leading side of the navigation bar;</li><li><code>navigationBarTrailing</code> - shows the button on the trailing side of the navigation bar.</li></ul><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">NavigationView</span> {
    <span class="type">Text</span>(<span class="string">"Buttons Example"</span>)
      .<span class="call">navigationTitle</span>(<span class="string">"Buttons"</span>)
      .<span class="call">toolbar</span> {
        <span class="type">ToolbarItem</span>(placement: .<span class="dotAccess">navigationBarLeading</span>) {
          <span class="type">Button</span>(action: {
            <span class="call">print</span>(<span class="string">"Refresh"</span>)
          }) {
            <span class="type">Label</span>(<span class="string">"Send"</span>, systemImage: <span class="string">"paperplane.fill"</span>)
          }
        }
        <span class="type">ToolbarItem</span>(placement: .<span class="dotAccess">navigationBarTrailing</span>) {
          <span class="type">Button</span>(action: {
            <span class="call">print</span>(<span class="string">"Refresh"</span>)
          }) {
            <span class="type">Label</span>(<span class="string">"Refresh"</span>, systemImage: <span class="string">"arrow.clockwise"</span>)
          }
        }
      }
  }
}
</code></pre><img src="https://kristaps.me/assets/swiftui-navigationview/navigationview-single-button.png" alt="Single Button NavigationView"/><h3>Add multiple buttons</h3><p>Now that we know how to add a single button, let's learn how to add multiple buttons. This time we need to use the <code>ToolbarItemGroup</code> that represents a group of toolbar items.</p><pre><code>.<span class="call">toolbar</span> {
  <span class="type">ToolbarItemGroup</span>(placement: .<span class="dotAccess">navigationBarLeading</span>) {
    <span class="type">Button</span>(action: {
      <span class="call">print</span>(<span class="string">"Send"</span>)
    }) {
      <span class="type">Label</span>(<span class="string">"Send"</span>, systemImage: <span class="string">"paperplane.fill"</span>)
    }
  }

  <span class="type">ToolbarItemGroup</span>(placement: .<span class="dotAccess">navigationBarTrailing</span>) {
    <span class="type">Button</span>(action: {
      <span class="call">print</span>(<span class="string">"Refresh"</span>)
    }) {
      <span class="type">Label</span>(<span class="string">"Refresh"</span>, systemImage: <span class="string">"arrow.clockwise"</span>)
    }

    <span class="type">Button</span>(action: {
      <span class="call">print</span>(<span class="string">"Edit"</span>)
    }) {
      <span class="type">Label</span>(<span class="string">"Edit"</span>, systemImage: <span class="string">"slider.horizontal.3"</span>)
    }
  }
}
</code></pre><img src="https://kristaps.me/assets/swiftui-navigationview/navigationview-multiple-buttons.png" alt="Multiple Buttons NavigationView"/><p>When adding multiple buttons, we shouldn't go too crazy. Eventually it may become difficult to use the app because the buttons could cover up the the navigation bar title.</p><h2>Change Navigation View Color</h2><p>Right now, SwiftUI doesn‚Äôt have the option to change the color of the <code>NavigationView</code>. For that we need to turn back to UIKit and use the <code>UINavigationBarAppearance</code> object to customize the navigation bar.</p><p>To change the color of the SwiftUI navigation bar, we can add the <code>init</code> method to the SwiftUI view and change the navigation bar appearance inside there, like this:</p><pre><code><span class="keyword">init</span>() {
  <span class="keyword">let</span> coloredAppearance = <span class="type">UINavigationBarAppearance</span>()
  coloredAppearance.<span class="call">configureWithOpaqueBackground</span>()
  coloredAppearance.<span class="property">backgroundColor</span> = .<span class="dotAccess">systemRed</span>
  coloredAppearance.<span class="property">titleTextAttributes</span> = [.<span class="dotAccess">foregroundColor</span>: <span class="type">UIColor</span>.<span class="property">white</span>]
  coloredAppearance.<span class="property">largeTitleTextAttributes</span> = [.<span class="dotAccess">foregroundColor</span>: <span class="type">UIColor</span>.<span class="property">white</span>]
  
  <span class="type">UINavigationBar</span>.<span class="call">appearance</span>().<span class="property">standardAppearance</span> = coloredAppearance
  <span class="type">UINavigationBar</span>.<span class="call">appearance</span>().<span class="property">compactAppearance</span> = coloredAppearance
  <span class="type">UINavigationBar</span>.<span class="call">appearance</span>().<span class="property">scrollEdgeAppearance</span> = coloredAppearance
  
  <span class="type">UINavigationBar</span>.<span class="call">appearance</span>().<span class="property">tintColor</span> = .<span class="dotAccess">white</span>
}

<span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">NavigationView</span> {
    <span class="type">Text</span>(<span class="string">"Navigtion Bar with different color"</span>)
      .<span class="call">navigationTitle</span>(<span class="string">"Title"</span>)
  }
}
</code></pre><p>We can see from the code that we are doing multiple things, like changing the background color and title text color. We can use either system colors or bring in colors from the iOS app assets catalog.</p><img src="https://kristaps.me/assets/swiftui-navigationview/navigationview-custom-color.png" alt="Navigation Bar with custom color"/><h2>TL;DR</h2><p>The Navigation Bar is a vital element of modern iOS and iPadOS applications. A majority of apps have more than one screen and our users have to navigate back and forth inside our apps.</p><p>SwiftUI comes with a new view, <code>NavigationView</code>, and we are required to completely shift our thinking about the navigation and how to use it compared with the UIKit.</p><p>With SwiftUI, it is very straightforward to add navigation on the screen, change the title, and add buttons to the Navigation Bar. But if we want to change the color, we should go back to the UIKit. I believe this will change quite soon.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/SwiftUINavigationView">Sample code</a></li></ul><ul><li><a href="https://www.hackingwithswift.com/articles/216/complete-guide-to-navigationview-in-swiftui">The Complete Guide to NavigationView in SwiftUI</a></li><li><a href="https://www.simpleswiftguide.com/swiftui-navigationview-tutorial-with-examples/">SwiftUI NavigationView tutorial with examples</a></li><li><a href="https://youtu.be/kCJyhG8zjvY">Navigation Bar Styling in SwiftUI</a></li><li><a href="https://swiftuirecipes.com/blog/navigation-bar-styling-in-swiftui">Navigation bar styling in SwiftUI</a></li><li><a href="https://medium.com/@francisco.gindre/customizing-swiftui-navigation-bar-8369d42b8805">Customizing SwiftUI Navigation Bar</a></li><li><a href="https://medium.com/swlh/custom-navigationview-bar-in-swiftui-4b782eb68e94">Custom NavigationView Bar in SwiftUI</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-add-bar-items-to-a-navigation-view">https://www.hackingwithswift.com/quick-start/swiftui/how-to-add-bar-items-to-a-navigation-view</a></li><li><a href="https://medium.com/@francisco.gindre/customizing-swiftui-navigation-bar-8369d42b8805">Customizing SwiftUI Navigation Bar</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-tabview</guid><title>The hidden secrets of TabView in iOS with SwiftUI</title><description>TabBar is a vital component of iOS and has been from iOS 2.0. This element appears at the bottom of the iOS and iPadOS devices and allows our app users to switch between different views or functions quickly. It is a major element of Apple's apps like Music, Podcasts, and App Store.</description><link>https://kristaps.me/blog/swiftui-tabview</link><pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>TabBar is a vital component of iOS and has been from iOS 2.0. This element appears at the bottom of the iOS and iPadOS devices and allows our app users to switch between different views or functions quickly.</p><p>It is a major element of Apple's apps like Music, Podcasts, and App Store.</p><img src="https://kristaps.me/assets/swiftui-tabview/appstore-tabview.png" alt="SwiftUI DisclosureGroup"/><p>In SwiftUI, we have a new element name <code>TabView</code> instead of <code>UITabBar</code> in UIKit. In this post, we will look into how to use it, especially how the <code>TabView</code> can be used to show page indicators.</p><h2>Ways to initialize TabView in SwiftUI</h2><p>Right now we have two options to create a tab view with SwiftUI. We can either take control of the selected tab or avoid it whatsoever. Let's look into both of these approaches.</p><h3>Create the TabView with SwiftUI</h3><p>To create a <code>TabView</code> element, we need to pass the <code>Content</code> that is a list of SwiftUI views. To mark this view as a tab bar item, we need to use the <code>tabItem</code> view modifier passing inside a <code>Label</code> that describes a title and image.</p><p>Let's now put all this together in the code.</p><pre><code><span class="type">TabView</span> {
  <span class="type">Text</span>(<span class="string">"The First Tab"</span>)
    .<span class="call">tabItem</span> {
      <span class="type">Label</span>(<span class="string">"First"</span>, systemImage: <span class="string">"1.square.fill"</span>)
    }
  
  <span class="type">Text</span>(<span class="string">"The Second Tab"</span>)
    .<span class="call">tabItem</span> {
      <span class="type">Label</span>(<span class="string">"Second"</span>, systemImage: <span class="string">"2.square.fill"</span>)
    }
  
  <span class="type">Text</span>(<span class="string">"The Third Tab"</span>)
    .<span class="call">tabItem</span> {
      <span class="type">Label</span>(<span class="string">"Third"</span>, systemImage: <span class="string">"3.square.fill"</span>)
    }
}
</code></pre><p>Now we can unpack the code above. Each tab is just a <code>Text</code> view, and the tab item is a <code>Label</code> with a title and system image that is an SF Symbol.</p><img src="https://kristaps.me/assets/swiftui-tabview/swiftui-tabview.gif" alt="SwiftUI DisclosureGroup"/><h3>Control the selected tab programmatically</h3><p>Suppose we want to control the selected tab programmatically. In that case, we need to use the second approach to initialize the method where besides the content, we need to pass a state variable that keeps the currently selected tab. Another critical step is to mark each tab with a <code>tag</code> modifier with a value that conforms to the <code>Hashable</code> protocol. This is how the SwiftUI layout engine differs between the tabs and can understand the uniqueness.</p><pre><code><span class="type">TabView</span>(selection: <span class="property">$selectedTab</span>) {
  <span class="type">VStack</span> {
    <span class="type">Button</span>(<span class="string">"Move to Second Tab"</span>) {
      selectedTab = <span class="number">2</span>
    }
  }
  .<span class="call">tabItem</span> {
    <span class="type">Label</span>(<span class="string">"First"</span>, systemImage: <span class="string">"1.square.fill"</span>)
  }
  .<span class="call">tag</span>(<span class="number">1</span>)
  
  <span class="type">VStack</span> {
    <span class="type">Button</span>(<span class="string">"Move to Third Tab"</span>) {
      selectedTab = <span class="number">3</span>
    }
  }
  .<span class="call">tabItem</span> {
    <span class="type">Label</span>(<span class="string">"Second"</span>, systemImage: <span class="string">"2.square.fill"</span>)
  }
  .<span class="call">tag</span>(<span class="number">2</span>)
  
  <span class="type">VStack</span> {
    <span class="type">Button</span>(<span class="string">"Move to First Tab"</span>) {
      selectedTab = <span class="number">1</span>
    }
  }
  .<span class="call">tabItem</span> {
    <span class="type">Label</span>(<span class="string">"Third"</span>, systemImage: <span class="string">"3.square.fill"</span>)
  }
  .<span class="call">tag</span>(<span class="number">3</span>)
}
</code></pre><p>Let's go over the code above step by step.</p><p>Firstly we are using the <code>VStack</code> views with a <code>Button</code> inside to select the next tab or the last the first accordingly.</p><p>Then we are using the <code>tag</code> modifier for each of the tab items. We are using the <code>Int</code> value type to keep track of the currently selected tab. We are not limited to the <code>Int</code> value type, which conforms to the <code>Hashable</code> protocol, but we can use our type if we want to. For the sake of simplicity, we are using the <code>Int</code> this time.</p><img src="https://kristaps.me/assets/swiftui-tabview/swiftui-tabview-selected-programmatically.gif" alt="Select current tab programmatically"/><h2>Customize TabView</h2><p>Sadly there aren't many options for customizing the <code>TabView</code> in SwiftUI. We can change the image and title for the tabs, but that is quite understandable.</p><p>We can change the default accent color. Let's change it to purple.</p><pre><code><span class="type">TabView</span> {
 <span class="comment">// ...</span>
}
.<span class="call">accentColor</span>(.<span class="dotAccess">purple</span>)
</code></pre><img src="https://kristaps.me/assets/swiftui-tabview/swiftui-tabview-accentcolor.png" alt="SwiftUI TabView with accentColor"/><h2>TabView styles in SwiftUI</h2><p>In SwiftUI, we are not limited to the regular tab bar style. Right now, we have three ways how to change the <code>TabView</code> styles:</p><ul><li><code>DefaultTabViewStyle	</code> - regular style that we all know;</li><li><code>PageTabViewStyle</code> - scrolling pages with the page indicator;</li><li><code>CarouselTabViewStyle</code> - specific style for watchOS that we're not going to look into in this post.</li></ul><h3>Create scrolling pages</h3><p>To create scrolling pages with the <code>TabView</code> in SwiftUI, we need to call the view modifier <code>tabViewStyle	</code> and pass an instance of <code>	PageTabViewStyle</code> style.</p><pre><code><span class="type">TabView</span> {
  <span class="type">Color</span>.<span class="property">gray</span>
  <span class="type">Color</span>.<span class="property">green</span>
  <span class="type">Color</span>.<span class="property">blue</span>
}
.<span class="call">tabViewStyle</span>(<span class="type">PageTabViewStyle</span>())
</code></pre><p>If we want to hide the page indicator, we specify the <code>indexDisplayMode</code> parameter for the <code>PageTabViewStyle</code> instance and set it to <code>.never</code>.</p><pre><code><span class="type">TabView</span> {
  <span class="comment">// ...</span>
}
.<span class="call">tabViewStyle</span>(<span class="type">PageTabViewStyle</span>(indexDisplayMode: .<span class="dotAccess">never</span>))
</code></pre><img src="https://kristaps.me/assets/swiftui-tabview/swiftui-tabview-scrolling-pages.gif" alt="SwiftUI TabView with scrolling pages"/><h2>TL;DR</h2><p>TabBar on the bottom of the screen is one of the most important building blocks for modern iOS applications. Apple themselves is using it frequently in their apps.</p><p>With SwiftUI, this element now has the new name <code>TabView</code>. It allows us to add the tab view and control the currently selected tab programmatically.</p><p>The hidden feature of the <code>TabView</code> is that we can use it to show the multiple tabs with page indicators, and those can be controlled by scrolling between them. In UIKit, it was <code>UIPageViewController</code>.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/SwiftUITabView">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/bars/tab-bars/">Human Interface Guidelines - Tab Bars</a></li><li><a href="https://developer.apple.com/documentation/swiftui/tabview">SwiftUI documentation - TabView</a></li><li><a href="https://www.iosapptemplates.com/blog/swiftui/tabview-swiftui">How to Create a Tab Bar in SwiftUI with TabView</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/adding-tabview-and-tabitem">Adding TabView and tabItem()</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-embed-views-in-a-tab-bar-using-tabview">How to embed views in a tab bar using TabView</a></li><li><a href="https://www.appcoda.com/swiftui-tabview/">Introducing SwiftUI TabView and Working with Tab Bar Customization</a></li><li><a href="https://serialcoder.dev/text-tutorials/swiftui/working-with-the-tab-view-in-swiftui/">Working with the Tab View in SwiftUI</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-disclosure-group</guid><title>How to show and hide content with DisclosureGroup using SwiftUI</title><description>Showing and hiding some parts of information is a vital feature in mobile apps, especially considering that phone screens are much smaller than those on laptops or desktop computers. Now with the new SwiftUI capabilities, we can collapse content with `DisclosureGroup`. Let's see how we could use it in various ways.</description><link>https://kristaps.me/blog/swiftui-disclosure-group</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Showing and hiding some parts of information is a vital feature in mobile apps, especially considering that phone screens are much smaller than those on laptops or desktop computers.</p><p>Now with the new SwiftUI capabilities, we can collapse content with <code>DisclosureGroup</code>. Let's see how we could use it in various ways.</p><h2>Display a collapsable content</h2><p>Let's start with the most straightforward way to set up a collapsable view that we could show or hide. It comes with a disclosure arrow indicator and nice animation.</p><p>In this blog post, let's use an example showing weather conditions that would be a SwiftUI view <code>WeatherDetailsView</code> and show temperature and wind information.</p><p>If we would like to show or hide that information, we can use the <code>DisclosureGroup</code> initializer by just passing a string value and content out the <code>WeatherDetailsView</code> view.</p><pre><code><span class="type">DisclosureGroup</span>(<span class="string">"Current Weather Details"</span>) {
  <span class="type">WeatherDetailsView</span>()
}
</code></pre><img src="https://kristaps.me/assets/disclosuregroup-swiftui/disclosuregroup-string-init.gif" alt="SwiftUI DisclosureGroup"/><h2>Modify <code>DisclosureGroup</code></h2><p>Now let's check out how we can modify the <code>DisclosureGroup</code>. Currently, we can't do much, and it is pretty limited, but we can change the accent color and disable it.</p><p>Let's start with disabling the option to show and hide the weather information. We could do this by using the <code>disabled</code> modifier.</p><pre><code><span class="type">DisclosureGroup</span>(<span class="string">"Current Weather Details"</span>) {
  <span class="type">WeatherDetailsView</span>()
}
.<span class="call">disabled</span>(<span class="keyword">true</span>)
</code></pre><img src="https://kristaps.me/assets/disclosuregroup-swiftui/disclosuregroup-disabled.png" alt="SwiftUI DisclosureGroup"/><p>By default, the disclosure arrow comes in blue color. By using the <code>accentColor</code> modifier, we could switch to our desired color. We could use a system color or a defined color in the Assets catalog.</p><img src="https://kristaps.me/assets/disclosuregroup-swiftui/disclosuregroup-accent-color.png" alt="SwiftUI DisclosureGroup"/><h2>Configure <code>DisclosureGroup</code> title</h2><p>So far, we have only changed the inner content of the disclosure group view. How about if you would like to change the title to a label view? The new <a href="https://developer.apple.com/documentation/swiftui/label">Label</a> comes with an initializer to pass the textual title and a system image's use that. For that, we can use a special <code>DisclosureGroup</code> initializer providing a custom label.</p><pre><code><span class="type">DisclosureGroup</span>(
  content: {
    <span class="type">WeatherDetailsView</span>()
  },
  label: {
    <span class="type">Label</span>(<span class="string">"Current Weather Details"</span>, systemImage: <span class="string">"thermometer"</span>)
      .<span class="call">font</span>(.<span class="dotAccess">headline</span>)
  }
)
</code></pre><img src="https://kristaps.me/assets/disclosuregroup-swiftui/disclosuregroup-custom-label.png" alt="SwiftUI DisclosureGroup"/><h2>Manually control show/hide state</h2><p>To either show or hide the disclosure group's content, we relied on the user to click on the arrow. There can be cases where we would like to change this behavior using a toggle button. To do this, we could use a state boolean variable that indicates either the disclosure group is expanded or not.</p><pre><code><span class="keyword">@State private var</span> isExpanded = <span class="keyword">false</span>

<span class="comment">/// ...</span>

<span class="type">Toggle</span>(<span class="string">"Show Current Weather Details"</span>, isOn: <span class="property">$isExpanded</span>)

<span class="type">DisclosureGroup</span>(<span class="string">"Current Weather Details"</span>, isExpanded: <span class="property">$isExpanded</span>) {
  <span class="type">WeatherDetailsView</span>()
}
</code></pre><img src="https://kristaps.me/assets/disclosuregroup-swiftui/disclosuregroup-isExpanded-toggle.gif" alt="SwiftUI DisclosureGroup"/><p>It is odd that once you press on the title, it does not expand; instead, we need to point our finger and press on the disclosure arrow button. We could fix it by implementing the title as a button and control the <code>isExpanded</code> property.</p><pre><code><span class="type">DisclosureGroup</span>(
  isExpanded: <span class="property">$isExpanded</span>,
  content: { <span class="type">WeatherDetailsView</span>() },
  label: {
    <span class="type">Button</span>(<span class="string">"Current Weather Details"</span>) {
      <span class="call">withAnimation</span> {
        isExpanded.<span class="call">toggle</span>()
      }
    }
  }
)
</code></pre><img src="https://kristaps.me/assets/disclosuregroup-swiftui/disclosuregroup-isExpanded-label-button.gif" alt="SwiftUI DisclosureGroup"/><h2>TL;DR</h2><p>Showing and hiding some information is a nice touch for mobile applications because of the limiting screen size.</p><p>The New SwiftUI version gives us a component out of the box specifically for <code>DisclosureGroup</code>.</p><p>Currently, it is pretty limited but offers some possibilities to customize it if we need to.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/swiftui-DisclosureGroup">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/swiftui/disclosuregroup">Official documentation</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-hide-and-reveal-content-using-disclosuregroup">How to hide and reveal content using DisclosureGroup</a></li><li><a href="https://www.ioscreator.com/tutorials/swiftui-disclosure-group-tutorial">SwiftUI DisclosureGroup Tutorial</a></li><li><a href="https://betterprogramming.pub/swiftuis-groupbox-outlinegroup-and-disclosuregroup-in-ios-14-cf9fb127cdc0">SwiftUI‚Äôs GroupBox, OutlineGroup, and DisclosureGroup in iOS 14</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-alert</guid><title>How to use Alert with SwiftUI</title><description>Alerts are one of the most crucial building blocks of iOS applications. We can use them to inform users about an error if something takes more time, like downloading a file or ensuring that everything is OK. Another use case with alerts is asking confirmation if our app users want to delete something or make a wire transfer.</description><link>https://kristaps.me/blog/swiftui-alert</link><pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Alerts are one of the most crucial building blocks of iOS applications. We can use them to inform users about an error if something takes more time, like downloading a file or ensuring that everything is OK. Another use case with alerts is asking confirmation if our app users want to delete something or make a wire transfer.</p><p>SwiftUI has the <code>Alert</code> component, and there are a couple of ways how to use it. Let's check it out.</p><h2>Alert</h2><p>One of the easiest ways how to show the alert with SwiftUI is to have a local state variable to indicate if the alert should be visible or not. After that, we need to add a view modifier <code>.alert</code> that requires returning the <code>Alert</code> view.</p><pre><code><span class="keyword">@State private var</span> showAlert = <span class="keyword">false

var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">VStack</span> {
    <span class="type">Button</span>(<span class="string">"Show alert"</span>) {
      showAlert = <span class="keyword">true</span>
    }
    .<span class="call">alert</span>(isPresented: <span class="property">$showAlert</span>) {
      <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Title"</span>))
    }
  }
}
</code></pre><p>In the previous example, we saw that the <code>showAlert</code> state variable keeps a <code>bool</code> value. At first, the alert isn't visible, and it is <code>false</code>. When we press the button, we need to change the state variable to <code>true</code> which triggers the alert to be visible on the screen.</p><img src="https://kristaps.me/assets/swiftui-alert/alert.png" alt="Alert with SwiftUI"/><p>We can see that by default, the alert has an OK button to dismiss it. We will try to add more buttons later in this post.</p><p>For the <code>Alert</code> view, we can provide not only <code>title</code> but also a <code>message</code> field that is one under another.</p><pre><code><span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Title"</span>),
      message: <span class="type">Text</span>(<span class="string">"Message"</span>))
</code></pre><img src="https://kristaps.me/assets/swiftui-alert/alert-with-message.png" alt="Alert with message"/><h2>Alert with identifiable item</h2><p>Another way to present an alert in the SwiftUI is by using an identifiable view state variable. Using this approach SwiftUI layout system passes the value of this state variable, and we can populate the alert title, message, or event buttons using its contents. The bonus is that once this item changes, the SwiftUI layout system would update the alert with the new value, which is a pretty neat feature that we get for free.</p><p>Let's see how to do it in the code. At first, we need to set up an object that implements the <code>Identifiable</code> protocol. Let's create a user structure. We need to create an <code>id</code> constant, and we could use the <code>UUID</code> structure that represents a globally unique value that can identify values between them.</p><pre><code><span class="keyword">struct</span> User: <span class="type">Identifiable</span> {
  <span class="keyword">let</span> id: <span class="type">UUID</span>
  <span class="keyword">let</span> name: <span class="type">String</span>
}
</code></pre><p>Next, let's move to the SwiftUI part and create our view.</p><pre><code><span class="keyword">@State private var</span> user: <span class="type">User</span>?

<span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">VStack</span> {
    <span class="type">Button</span>(<span class="string">"Show alert"</span>) {
      user = <span class="type">User</span>(id: <span class="type">UUID</span>(), name: <span class="string">"Kristaps"</span>)
    }
    .<span class="call">alert</span>(item: <span class="property">$user</span>) { user <span class="keyword">in</span>
      <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Hello,</span> \(user.<span class="property">name</span>)<span class="string">!"</span>))
    }
  }
}
</code></pre><p>It is important to note that the view state variable is optional because SwiftUI determines if the alert should be visible on the screen.</p><p>When using the <code>.alert</code> view modifier, we have the closure with an input variable which is the current value of the state variable. This way, we could populate, for instance, the alert title.</p><img src="https://kristaps.me/assets/swiftui-alert/alert-identifiable-item.png" alt="Alert with identifiable item"/><h2>Alert Buttons</h2><p>Now we know how to show an alert on the screen using SwiftUI with two different approaches. But how to show more than one button and customize them?</p><p>To add buttons for the alert, we could use either the <code>Alert</code> initializer specifying the dismiss button, or have the way to initialize the <code>Alert</code>, providing the primary and secondary button.</p><p>Let's create a confirmation alert that would ask our users if they want to delete something from a list.</p><pre><code><span class="keyword">@State private var</span> showAlert = <span class="keyword">false
  
var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">VStack</span> {
    <span class="type">Button</span>(<span class="string">"Show alert"</span>) {
      showAlert = <span class="keyword">true</span>
    }
    .<span class="call">alert</span>(isPresented: <span class="property">$showAlert</span>) {
      <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Do you want to delete this item?"</span>),
        primaryButton: .<span class="call">cancel</span>(),
        secondaryButton: .<span class="call">destructive</span>(<span class="type">Text</span>(<span class="string">"Delete"</span>)) {
          <span class="call">print</span>(<span class="string">"Delete item"</span>)
        }
      )
    }
  }
}
</code></pre><p>Let's unwrap the code. To show the alert, we are using our first approach with the view state variable that indicates when we want to show the alert on the screen.</p><p>Inside the <code>.alert</code> view modifier where we are constructing the <code>Alert</code> representation, we see that we are using a different initializer to provide information about alert buttons. That is a specific <a href="https://developer.apple.com/documentation/swiftui/alert/button">button</a> that represents an operation of an alert. There are four different styles of buttons we could use in SwiftUI:</p><ul><li>default;</li><li>cancel - indicates cancellation with a system provided label;</li><li>cancel - similar like above, but with a custom label;</li><li>destructive - indicates destructive action, for example, deletion.</li></ul><p>We are using the cancel and destructive button styles for our confirmation alert because our users could cancel or delete the item from a list.</p><img src="https://kristaps.me/assets/swiftui-alert/alert-buttons.png" alt="Alert with buttons"/><h2>Show multiple alerts</h2><p>To show multiple alerts on a view, we have two ways.</p><h3>Using state variables</h3><p>The first is to keep a view state variable per each alert. But we need to add the <code>.alert</code> modifier, not for the full view, but we can add it, for example, for the button that invokes the alert. If we add two <code>.alert</code> modifiers one after another, the SwiftUI layout engine will show only the first one.</p><pre><code><span class="keyword">@State var</span> firstAlertShown = <span class="keyword">false
@State var</span> secondAlertShown = <span class="keyword">false

var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">VStack</span>(spacing: <span class="number">50</span>) {
    <span class="type">Button</span>(<span class="string">"Show first alert"</span>) {
      firstAlertShown = <span class="keyword">true</span>
    }
    .<span class="call">alert</span>(isPresented: <span class="property">$firstAlertShown</span>) {
      <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"First alert"</span>))
    }

    <span class="type">Button</span>(<span class="string">"Show second alert"</span>) {
      secondAlertShown = <span class="keyword">true</span>
    }
    .<span class="call">alert</span>(isPresented: <span class="property">$secondAlertShown</span>) {
      <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Second alert"</span>))
    }
  }
}
</code></pre><h3>Using identifiable state variable</h3><p>I like the second approach much better - it is more type safe. At first, we need to set up a structure representing the alert that conforms to the <code>Identifiable</code> protocol. Inside this structure, we have a local enumeration type representing all alerts types we would like to show and return the specific alert view. Ideally, it should be separated, but to show this example, I kept it like this.</p><pre><code><span class="keyword">struct</span> AlertIdentifier: <span class="type">Identifiable</span> {
  <span class="keyword">enum</span> ActiveAlert {
    <span class="keyword">case</span> first
    <span class="keyword">case</span> second

    <span class="keyword">var</span> alertView: <span class="type">Alert</span> {
      <span class="keyword">switch self</span> {
      <span class="keyword">case</span> .<span class="dotAccess">first</span>:
        <span class="keyword">return</span> <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"First alert"</span>))
      <span class="keyword">case</span> .<span class="dotAccess">second</span>:
        <span class="keyword">return</span> <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Second alert"</span>))
      }
    }
  }

  <span class="keyword">var</span> id: <span class="type">ActiveAlert</span>
}
</code></pre><p>Next, we want to create the SwiftUI view and use it. Our view would have the local state variable with our new <code>AlertIdentifier</code> type when invoking and constructing the alert. We can use it and the computed <code>alertView</code> property that we had built before inside the <code>ActiveAlert</code> enum.</p><pre><code><span class="keyword">struct</span> MultipleAlertsViewIdentifiable: <span class="type">View</span> {
  <span class="keyword">@State var</span> alert: <span class="type">AlertIdentifier</span>?

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(spacing: <span class="number">50</span>) {
      <span class="type">Button</span>(<span class="string">"Show first alert"</span>) {
        alert = <span class="type">AlertIdentifier</span>(id: .<span class="dotAccess">first</span>)
      }

      <span class="type">Button</span>(<span class="string">"Show second alert"</span>) {
        alert = <span class="type">AlertIdentifier</span>(id: .<span class="dotAccess">second</span>)
      }
    }
    .<span class="call">alert</span>(item: <span class="property">$alert</span>) {
      $0.<span class="property">id</span>.<span class="property">alertView</span>
    }
  }
}
</code></pre><p>A lot to unpack here, but the main point is that it's safe to show multiple alerts on the same view without adding a state variable for each alert. Using this approach, we don't need to worry if our alert would be shown to the user because we don't have multiple <code>.alert</code> view modifiers scattered around the view itself.</p><h2>TL;DR</h2><p>Showing an alert to inform our app users or ask for confirmation is essential for the user interface. We can show the alert with SwiftUI in two ways. The first one is by using a state variable that indicates if the alert is visible. The second uses an identifiable state variable that can be used to populate the alert title, message, and buttons.</p><p>We can set up multiple types of buttons for the alert. If we would like to show more than two, we need to use the SwiftUI sheets.</p><p>To present multiple alerts in the same view, we can achieve it either by multiple view state variables or by using one identifiable structure that would be responsible for creating the alert itself.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/swiftui-alert">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/swiftui/alert">Alert official documentation</a></li><li><a href="https://developer.apple.com/documentation/swiftui/alert/button">Alert Button official documentation</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-show-an-alert">How to show an alert</a></li><li><a href="https://www.hackingwithswift.com/books/ios-swiftui/working-with-identifiable-items-in-swiftui">Working with Identifiable items in SwiftUI</a></li><li><a href="http://www.thomashanning.com/swiftui-alert/">SwiftUI: Alert</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-text-in-circle</guid><title>How to show text inside a circle with SwiftUI</title><description>This time, we will look at several ways to show a text label inside a circle using SwiftUI. We will dig deeper into three different ways using the `ZStack` view and `.background` and `.overlay` modifiers. As a small bonus, we will check out how to present a text label over a circle using the `.clipShape` modifier.</description><link>https://kristaps.me/blog/swiftui-text-in-circle</link><pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>This time, we will look at a couple of ways to show a text label inside a circle using SwiftUI. We will dig deeper into three different ways using the <code>ZStack</code> view, <code>.background</code> and <code>.overlay</code> modifiers. In the end, as a small bonus, we will check out how to present a text label over a circle using the <code>.clipShape</code> modifier.</p><p>Our end goal is something like this:</p><img src="https://kristaps.me/assets/text-inside-circle-swiftui/text-inside-circle-swiftui.png" alt="Text inside a circle"/><h2>Layout out with <code>ZStack</code></h2><p><code>ZStack</code> in SwiftUI is a unique view that shows all its children on top of each other. It works similarly to <code>z-index</code> in CSS. So let's try to show a <code>Circle</code> view and then the <code>Text</code> view on top. To not allow the <code>Circle</code> to fill the whole screen, we need to set a constant view width and height.</p><pre><code><span class="type">ZStack</span> {
  <span class="type">Circle</span>()
    .<span class="call">stroke</span>(circleColor, lineWidth: <span class="number">4</span>)
  
  <span class="type">Text</span>(<span class="string">"13"</span>)
}
.<span class="call">frame</span>(width: <span class="number">40</span>, height: <span class="number">40</span>)
</code></pre><h2>Practicing the <code>.background</code> modifier</h2><p>Now let's see how to use the <code>.background</code> modifier. Sadly Apple has not provided us with any documentation on how to use it, so we need to understand it ourselves the hard way. We can check out the source code and try to understand what is this view modifier doing.</p><pre><code><span class="keyword">func</span> background&lt;Background&gt;(<span class="keyword">_</span> background: <span class="type">Background</span>, alignment: <span class="type">Alignment</span> = .<span class="dotAccess">center</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> <span class="keyword">where</span> <span class="type">Background</span> : <span class="type">View</span>
</code></pre><p>By applying this modifier, we need to pass in a <code>View</code> and optionally specify the alignment in both axes. Let's set how can we use it for our <code>Text</code> field. This time we are not going to check out the <code>alignment</code> parameter. We want to show a circle as a background for the <code>Text</code> field.</p><pre><code><span class="type">Text</span>(<span class="string">"13"</span>)
  .<span class="call">background</span>(
    <span class="type">Circle</span>()
      .<span class="call">stroke</span>(circleColor, lineWidth: <span class="number">4</span>)
      .<span class="call">padding</span>(<span class="number">6</span>)
  )
</code></pre><img src="https://kristaps.me/assets/text-inside-circle-swiftui/text-inside-circle-swiftui-no-padding.png" alt="Text inside a circle without padding"/><p>The outcome is not exactly what we wanted. To improve it, we need some space between the text and the circle to look a bit better.</p><p>To have a nice gap between the number and the circle, we could use the <code>.padding()</code> modifier. Now the text and the circle have some room to breathe between them.</p><pre><code><span class="type">Text</span>(<span class="string">"13"</span>)
  .<span class="call">padding</span>()
  .<span class="call">background</span>(
    <span class="type">Circle</span>()
      .<span class="call">stroke</span>(circleColor, lineWidth: <span class="number">4</span>)
      .<span class="call">padding</span>(<span class="number">6</span>)
  )
</code></pre><img src="https://kristaps.me/assets/text-inside-circle-swiftui/text-inside-circle-swiftui.png" alt="Text inside a circle with padding"/><h2>Untangling the <code>overlay</code> modifier</h2><p>This time Apple hasn't provided documentation explanation again. Let's read the source code. It is relatively straight forward and similar to <code>.background</code> modifier.</p><pre><code><span class="keyword">func</span> overlay&lt;Overlay&gt;(<span class="keyword">_</span> overlay: <span class="type">Overlay</span>, alignment: <span class="type">Alignment</span> = .<span class="dotAccess">center</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> <span class="keyword">where</span> <span class="type">Overlay</span> : <span class="type">View</span>
</code></pre><p>It places the view on top of it, not under. We should not forget about the <code>.padding()</code> modifier to have a gap between the number and the circle. Using the previous example and changing <code>background</code> to <code>overlay</code> we have the same outcome.</p><pre><code><span class="type">Text</span>(<span class="string">"13"</span>)
  .<span class="call">padding</span>()
  .<span class="call">overlay</span>(
    <span class="type">Circle</span>()
      .<span class="call">stroke</span>(circleColor, lineWidth: <span class="number">4</span>)
      .<span class="call">padding</span>(<span class="number">6</span>)
  )
</code></pre><p>Although it looks identical, it works differently. This approach comes in handy if we would like to show an interactable view on top. Let's say we would like to present a tappable button on top. I wouldn't specifically advise doing so, but it explains the idea.</p><h2>Bonus: Clipping as Shape</h2><p>As a bonus tip, let's check out how we can use the <code>.clipShape</code> modifier to show a text field inside the circle filled with a color. The <code>.clipShape</code> modifier clips the view to a specific shape that we should pass as a parameter. For that, we can use a couple of shapes provided by Apple like circles, capsules, rectangles, and <a href="https://developer.apple.com/documentation/swiftui/shape">more</a>. Or we can draw a shape ourselves with the help of the <code>Path</code> outline. Custom shapes we are leaving out of the scope of this blog post.</p><pre><code><span class="type">Text</span>(<span class="string">"13"</span>)
  .<span class="call">padding</span>()
  .<span class="call">background</span>(circleColor)
  .<span class="call">clipShape</span>(<span class="type">Circle</span>())
</code></pre><img src="https://kristaps.me/assets/text-inside-circle-swiftui/text-on-circle-swiftui.png" alt="Text on top of a circle"/><h2>TL;DR</h2><p>With SwiftUI achieving the same thing visually can be done in various ways. Placing a circle around the text can be done either stacking all the views on top of them using <code>ZStack</code>. Another approach is using <code>.background</code> or <code>.overlay</code> modifier.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/text-in-circle-swiftui">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/swiftui/zstack"><code>ZStack</code> documentation</a></li><li><a href="https://developer.apple.com/documentation/swiftui/view/clipshape(_:style:"><code>clipShape</code> documentation</a>)</li><li><a href="https://developer.apple.com/documentation/swiftui/shape">Shape documentation</a></li><li><a href="https://developer.apple.com/tutorials/swiftui/drawing-paths-and-shapes">Drawing Paths and Shapes tutorial</a></li><li><a href="https://developer.apple.com/documentation/swiftui/path">Path documentation</a></li><li><a href="https://ordinarycoding.com/articles/swiftui-masks-and-overlays/">SwiftUI masks and overlays</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-select-image-with-phpickerviewcontroller</guid><title>How to select images using PHPickerViewController with SwiftUI</title><description>Selecting images from our iPhone library is needed when changing a profile picture, posting an update, or sharing the photo of your pet. In this post, we are going to look into how to use `PHPickerViewController` with SwiftUI. Apple announced this view controller at WWDC2020.</description><link>https://kristaps.me/blog/swiftui-select-image-with-phpickerviewcontroller</link><pubDate>Sat, 9 Jan 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Selecting images from our iPhone library is needed when changing a profile picture, posting an update, or sharing the photo of your pet. In this post, we are going to look into how to use <code>PHPickerViewController</code> with SwiftUI. Apple announced this view controller at <a href="https://developer.apple.com/wwdc20/">WWDC2020</a>.</p><h2>What is PHPickerViewController?</h2><p><code>PHPickerViewController</code> is a view controller that gives way for our app users to pick assets from their photo library. It provides a well-known user interface, and we don‚Äôt need to bother about building that.</p><p>One nicety that comes with this approach is that we don‚Äôt need to worry about adding information to access our user‚Äôs photo library in <code>Info.plist</code> file. Users can decide to allow access either to all photo library or selectively grant access to particular photos. That solves privacy concerns where apps could read the whole library and even <a href="https://krausefx.com/blog/ios-privacy-detectlocation-an-easy-way-to-access-the-users-ios-location-data-without-actually-having-access">track people</a>.</p><h3>Creating a <code>PHPickerViewController</code></h3><p>To create a <code>PHPickerViewController</code> we need to initialize it by passing configuration, which is an instance of <code>PHPickerConfiguration</code>. For the configuration, we need to specify what type of pictures we want and set the selection limit.</p><p>For the <code>PHPickerViewController</code> itself, we set the delegate that needs to implement <code>PHPickerViewControllerDelegate</code> protocol. It has just one method that gives a signal when our user has selected photos.</p><h2>Integrate with SwiftUI</h2><p>To use the <code>PHPickerViewController</code> in SwiftUI apps, we need to use the <code>UIViewControllerRepresentable</code> to represent an UIKit view controller. Let‚Äôs go over all the steps required in doing that.</p><h3>Setting up the UIKit view controller</h3><p><code>UIViewControllerRepresentable</code> is a protocol and requires to implement two methods:</p><ul><li><code>makeUIViewController</code> - create and configure the view controller;</li><li><code>updateUIViewControoler</code> - update the state of the view controller.</li></ul><p>We are going to create and configure the <code>PHPickerViewController</code> in the <code>makeUIViewController</code> method. We don‚Äôt need to update it, so we can leave the <code>updateUIViewControoler</code> empty.</p><pre><code><span class="keyword">struct</span> PhotoPicker: <span class="type">UIViewControllerRepresentable</span> {
  <span class="keyword">@Binding var</span> pickerResult: [<span class="type">UIImage</span>] <span class="comment">// pass images back to the SwiftUI view</span>
  <span class="keyword">@Binding var</span> isPresented: <span class="type">Bool</span> <span class="comment">// close the modal view</span>
  
  <span class="keyword">func</span> makeUIViewController(context: <span class="type">Context</span>) -&gt; <span class="keyword">some</span> <span class="type">UIViewController</span> {
    <span class="keyword">var</span> configuration = <span class="type">PHPickerConfiguration</span>(photoLibrary: <span class="type">PHPhotoLibrary</span>.<span class="call">shared</span>())
    configuration.<span class="property">filter</span> = .<span class="dotAccess">images</span> <span class="comment">// filter only to images</span>
    configuration.<span class="property">selectionLimit</span> = <span class="number">0</span> <span class="comment">// ignore limit</span>
    
    <span class="keyword">let</span> photoPickerViewController = <span class="type">PHPickerViewController</span>(configuration: configuration)
    photoPickerViewController.<span class="property">delegate</span> = context.<span class="property">coordinator</span> <span class="comment">// Use Coordinator for delegation</span>
    <span class="keyword">return</span> photoPickerViewController
  }
  
  <span class="keyword">func</span> updateUIViewController(<span class="keyword">_</span> uiViewController: <span class="type">UIViewControllerType</span>, context: <span class="type">Context</span>) { }
}
</code></pre><h3>Coordinator</h3><p>Now we can present the <code>PHPickerViewController</code>, but how can we transfer back the selected images? We need to use the <code>makeCoordinator</code> method and create the <code>Coordinator</code> class that implements the <code>PHPickerViewControllerDelegate</code> protocol. It is a thoughtful approach to how the SwiftUI can communicate with the UIKit delegation pattern idea.</p><pre><code><span class="keyword">struct</span> PhotoPicker: <span class="type">UIViewControllerRepresentable</span> {

  <span class="comment">// ...</span>

  <span class="keyword">func</span> makeCoordinator() -&gt; <span class="type">Coordinator</span> {
    <span class="type">Coordinator</span>(<span class="keyword">self</span>)
  }
  
  <span class="comment">// Create the Coordinator, in this case it is a way to communicate with the PHPickerViewController</span>
  <span class="keyword">class</span> Coordinator: <span class="type">PHPickerViewControllerDelegate</span> {
    <span class="keyword">private let</span> parent: <span class="type">PhotoPicker</span>
    
    <span class="keyword">init</span>(<span class="keyword">_</span> parent: <span class="type">PhotoPicker</span>) {
      <span class="keyword">self</span>.<span class="property">parent</span> = parent
    }
    
    <span class="keyword">func</span> picker(<span class="keyword">_</span> picker: <span class="type">PHPickerViewController</span>, didFinishPicking results: [<span class="type">PHPickerResult</span>]) {
    }
  }
}
</code></pre><h2>Using UIKit with SwiftUI</h2><p>Let‚Äôs put it all together. We need to create a SwiftUI view to present the photo picker view and present it as a modal. You can read more about how to display a modal view in SwiftUI in my <a href="https://kristaps.me/blog/swiftui-modal-view/">previous post</a>.</p><pre><code>.<span class="call">sheet</span>(isPresented: <span class="property">$photoPickerIsPresented</span>) {
  <span class="comment">// Present the photo picker view modally</span>
  <span class="type">PhotoPicker</span>(pickerResult: <span class="property">$pickerResult</span>,
              isPresented: <span class="property">$photoPickerIsPresented</span>)
}
</code></pre><h3>Passing data from UIKit to SwiftUI</h3><p>To get photos of what users have selected, let‚Äôs use <code>@State</code> variable and pass it to the <code>PhotoPicker</code> view using <code>@Binding</code> <a href="https://swiftuipropertywrappers.com/#binding">property wrapper</a>.</p><p>Now we can fully complete the <code>PHPickerViewControllerDelegate</code> protocol for our <code>Coordinator</code> class.</p><pre><code><span class="keyword">func</span> picker(<span class="keyword">_</span> picker: <span class="type">PHPickerViewController</span>, didFinishPicking results: [<span class="type">PHPickerResult</span>]) {
  parent.<span class="property">pickerResult</span>.<span class="call">removeAll</span>() <span class="comment">// remove previous pictures from the main view
  
  // unpack the selected items</span>
  <span class="keyword">for</span> image <span class="keyword">in</span> results {
    <span class="keyword">if</span> image.<span class="property">itemProvider</span>.<span class="call">canLoadObject</span>(ofClass: <span class="type">UIImage</span>.<span class="keyword">self</span>) {
      image.<span class="property">itemProvider</span>.<span class="call">loadObject</span>(ofClass: <span class="type">UIImage</span>.<span class="keyword">self</span>) { [<span class="keyword">weak self</span>] newImage, error <span class="keyword">in
        if let</span> error = error {
          <span class="call">print</span>(<span class="string">"Can't load image</span> \(error.<span class="property">localizedDescription</span>)<span class="string">"</span>)
        } <span class="keyword">else if let</span> image = newImage <span class="keyword">as</span>? <span class="type">UIImage</span> {
          <span class="comment">// Add new image and pass it back to the main view</span>
          <span class="keyword">self</span>?.<span class="property">parent</span>.<span class="property">pickerResult</span>.<span class="call">append</span>(image)
        }
      }
    } <span class="keyword">else</span> {
      <span class="call">print</span>(<span class="string">"Can't load asset"</span>)
    }
  }
  
  <span class="comment">// close the modal view</span>
  parent.<span class="property">isPresented</span> = <span class="keyword">false</span>
}
</code></pre><p>What we are doing here is unpacking selected items from the photo library and set them to the parent‚Äôs <code>@Binding</code> variable. By doing so, we are transferring the data back to the main view.</p><h3>Present the selected images</h3><p>To present the picked photos, we can iterate over and show them in a <code>ScrollView</code>.</p><pre><code><span class="type">ScrollView</span> {
  <span class="type">ForEach</span>(pickerResult, id: \.<span class="keyword">self</span>) { uiImage <span class="keyword">in</span>
    <span class="type">ImageView</span>(uiImage: uiImage)
  }
}
</code></pre><p>An important fact is that the type of image is <code>UIImage</code>, but luckily SwiftUI provides a nice initializer for the <code>Image</code> view passing the <code>UIImage</code> type.</p><p>You can check out the full implementation <a href="https://github.com/fassko/PHPickerViewController-SwiftUI">here</a>.</p><h2>TL;DR</h2><p>Selecting images and using them in our apps is an essential feature in modern iOS applications. Apple announced in WWDC2020 a new way to do it in a more secure and granular way - <code>PHPickerViewController</code>. Note that it is available only from iOS14 and later versions.</p><p>To use the <code>PHPickerViewController</code> with SwiftUI, we need to implement the <code>UIViewControllerRepresentable</code> protocol. It allows communicating from and to UIKit view controllers flawlessly.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/PHPickerViewController-SwiftUI">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/photokit/phpickerviewcontroller">PHPickerViewController documentation</a></li><li><a href="https://krausefx.com/blog/ios-privacy-detectlocation-an-easy-way-to-access-the-users-ios-location-data-without-actually-having-access">iOS Privacy: detect.location - An easy way to access the user's iOS location data without actually having access</a></li><li><a href="https://www.kairadiagne.com/2020/11/04/adopting-the-new-photo-picker.html">Adopting the new PHPicker</a></li><li><a href="https://nemecek.be/blog/30/checking-out-the-new-phpickerviewcontroller-in-ios-14-to-select-photos-or-videos">Checking out the new PHPickerViewController in iOS 14</a></li><li><a href="https://ohmyswift.com/blog/2020/08/29/replacing-uiimagepickercontroller-with-phpickerviewcontroller/">Replacing UIImagePickerController with PHPickerViewController</a></li><li><a href="https://christianselig.com/2020/09/phpickerviewcontroller-efficiently/">Using PHPickerViewController Images in a Memory-Efficient Way</a></li><li><a href="https://codakuma.com/the-library-is-open/">Accessing the photo library in SwiftUI</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/background-swiftui</guid><title>Background Color with SwiftUI</title><description>Once you create a SwiftUI view, it has the default background color. White for light mode and black for dark mode respectively. But how to change it to something different? Let's look into that today.</description><link>https://kristaps.me/blog/background-swiftui</link><pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Once you create a SwiftUI view, it has the default background color. White for light mode and black for dark mode respectively. But how to change it to something different? Let's look into that today.</p><p>In this article, we will talk about different techniques that we can use to change the default background for our SwiftUI views.</p><h2>Using modifier</h2><p>First approach that comes in mind is using <code>.background()</code> <a href="http://apple.co/3mSzqar">modifier</a>. Sadly Apple hasn't provided documentation for this. It takes in a view that is set as a background for the view we are adding this modifier to.</p><p>In this case, we want to change the background color. We can pass in, for instance, <code>Color.gray</code>.</p><pre><code><span class="type">Text</span>(<span class="string">"Hello, world!"</span>)
  .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">gray</span>)
</code></pre><img src="https://kristaps.me/assets/swiftui-background-color/text-background-color.png" alt="Text background color"/><p>We see that it sets the background color only for the text view. That is how SwiftUI works. We want to set it for the whole screen. We could approach it using <code>VStack</code>, <code>HStack</code>, and a couple of <code>Spacer()</code> views.</p><pre><code><span class="type">VStack</span> {
  <span class="type">Spacer</span>()
  <span class="type">HStack</span> {
    <span class="type">Spacer</span>()
    <span class="type">Text</span>(<span class="string">"Test"</span>)
    <span class="type">Spacer</span>()
  } 
  <span class="type">Spacer</span>()
}.<span class="call">background</span>(<span class="type">Color</span>.<span class="property">gray</span>)
</code></pre><img src="https://kristaps.me/assets/swiftui-background-color/text-background-safearea.png" alt="Text background color not extending safe area"/><p>It looks a bit better, but we want to set it for the whole screen, ignoring the safe area. We can do it using <code>.edgesIgnoringSafeArea</code> <a href="http://apple.co/38HHk1c">modifier</a>. Using this modifier, we can tell the SwiftUI layout engine to extend outside the screen's safe area. It takes in a parameter that defines which edges we can expand. In this case, we will pass in <code>.all</code>.</p><pre><code>.<span class="call">background</span>(<span class="type">Color</span>.<span class="property">gray</span>.<span class="call">edgesIgnoringSafeArea</span>(.<span class="dotAccess">all</span>))
</code></pre><img src="https://kristaps.me/assets/swiftui-background-color/text-background-color-fullscreen.png" alt="Text background color fullscreen"/><p>It looks exactly how we wanted. The issue is that the code is quite cumbersome and has a lot of nesting views and spacers. Let's look at it in another way. ‚Äã</p><h2>Using <code>ZStack</code></h2><p>We could dramatically improve the code readability and complexity is to utilize the <code>ZStack</code> <a href="https://developer.apple.com/documentation/swiftui/zstack">view</a>. Using this view, we can layer multiple views on top of each other. Our approach would be to add the background color and then the content on top of it.</p><pre><code><span class="type">ZStack</span> {
  <span class="type">Color</span>.<span class="property">gray</span>
    .<span class="call">edgesIgnoringSafeArea</span>(.<span class="dotAccess">all</span>)
  
  <span class="type">Text</span>(<span class="string">"Hello, world!"</span>)
}
</code></pre><p>The code looks much cleaner now, and we have a gray background and text on top of it. The best part of this approach is that we ignore the safe area only for the background color view. Other views won't extend outside the safe area.</p><img src="https://kristaps.me/assets/swiftui-background-color/zstack-color.png" alt="Background color with ZStack"/><blockquote><p><a href="https://twitter.com/gimly">Dimi Chakarov</a> <a href="https://twitter.com/gimly/status/1347300659691999233">posted</a> about how to create <a href="https://gist.github.com/dchakarov/d841e709ccb0bcc961302b2a248912ec">a <code>ViewModifier</code> to apply to a view</a>.</p></blockquote><h2>Multiple colors</h2><p>Now that we know how to change background color to one single color, how about setting it to two colors vertically and horizontally? ‚Äã We could achieve that by using the approach with <code>ZStack</code> and wrapping colors in a <code>VStack</code> <a href="https://developer.apple.com/documentation/swiftui/vstack">view</a> for vertical alignment or <code>HStack</code> <a href="https://developer.apple.com/documentation/swiftui/hstack">view</a> for vertical alignment.</p><h3>Vertical alignment</h3><p>Let's use two colors - gray and black. By wrapping them in <code>VStack</code> view and using <code>ZStack</code> we can split the screen in half vertically. One of them is filled with gray and the other with black color.</p><pre><code><span class="type">ZStack</span> {
  <span class="type">VStack</span>(spacing: <span class="number">0</span>) {
    <span class="type">Color</span>.<span class="property">gray</span>
    <span class="type">Color</span>.<span class="property">black</span>
  }
  .<span class="call">edgesIgnoringSafeArea</span>(.<span class="dotAccess">all</span>)
}
</code></pre><img src="https://kristaps.me/assets/swiftui-background-color/vertical-alignment-background-colors.png" alt="Vertical alignment background colors"/><h3>Horizontal alignment</h3><p>By changing the <code>VStack</code> to <code>HStack</code> we can fill the screen horizontally with gray and black colors.</p><pre><code><span class="type">ZStack</span> {
  <span class="type">HStack</span>(spacing: <span class="number">0</span>) {
    <span class="type">Color</span>.<span class="property">gray</span>
    <span class="type">Color</span>.<span class="property">black</span>
  }
  .<span class="call">edgesIgnoringSafeArea</span>(.<span class="dotAccess">all</span>)
}
</code></pre><img src="https://kristaps.me/assets/swiftui-background-color/horizontal-alignment-background-colors.png" alt="Horizontal alginment background colors"/><h3>Chess table background</h3><p>Let's do something a bit crazy by building a background that would look like a chess table. We can iterate a couple of times the previous example with multiple colors vertically and horizontally.</p><pre><code><span class="type">ZStack</span> {
  <span class="type">VStack</span>(spacing: <span class="number">0</span>) {
    <span class="type">ForEach</span>((<span class="number">1</span>...<span class="number">10</span>).<span class="call">reversed</span>(), id: \.<span class="keyword">self</span>) { i <span class="keyword">in</span>
      <span class="type">HStack</span>(spacing: <span class="number">0</span>) {
        <span class="type">ForEach</span>((<span class="number">1</span>...<span class="number">5</span>).<span class="call">reversed</span>(), id: \.<span class="keyword">self</span>) { i <span class="keyword">in</span>
          <span class="type">Color</span>.<span class="property">gray</span>
          <span class="type">Color</span>.<span class="property">black</span>
        }
      }
      <span class="type">HStack</span>(spacing: <span class="number">0</span>) {
        <span class="type">ForEach</span>((<span class="number">1</span>...<span class="number">5</span>).<span class="call">reversed</span>(), id: \.<span class="keyword">self</span>) { i <span class="keyword">in</span>
          <span class="type">Color</span>.<span class="property">black</span>
          <span class="type">Color</span>.<span class="property">gray</span>
        }
      }
    }
  }.<span class="call">edgesIgnoringSafeArea</span>(.<span class="dotAccess">all</span>)
}
</code></pre><p>Here we see the power of the SwiftUI layout engine and Swift code combined.</p><img src="https://kristaps.me/assets/swiftui-background-color/chess-background.png" alt="Chess table background"/><h2>TL;DR</h2><p>SwiftUI views come with default background color - white on light mode and black in dark mode. In many cases, we would like to change it to something else. The first way would be to use the <code>.background</code> modifier and pass <code>Color</code>which is a view in SwiftUI. The second approach would be using <code>ZStack</code> and add one color or multiple colors wrapped in <code>VStack</code> for vertical and <code>HStack</code> for horizontal layout. ‚Äã If you have other ideas about changing the background color for a SwiftUI view, let me know. Thank you for reading.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/swiftui-view-background-color">Sample code</a></li></ul><ul><li><a href="https://www.hackingwithswift.com/books/ios-swiftui/colors-and-frames">Colors and frames</a></li><li><a href="https://www.ioscreator.com/tutorials/swiftui-background-color-tutorial">SwiftUI Background Color Tutorial</a></li><li><a href="http://apple.co/3mSzqar"><code>.background</code> modifier</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-modal-view</guid><title>How to deal with modal views (a.k.a. sheets) with SwiftUI</title><description>When presenting a small piece of extra information on the screen, showing a modal view is essential. With UIKit, we could do this with `presentViewController:animated:completion:` [function](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621380-presentviewcontroller). However, using SwiftUI, we need to twist our thinking towards using view or environment state, as the modal view is now called a sheet.</description><link>https://kristaps.me/blog/swiftui-modal-view</link><pubDate>Sun, 22 Nov 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>When presenting a small piece of extra information on the screen, showing a modal view is essential. With UIKit, we could do this with <code>presentViewController:animated:completion:</code> <a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621380-presentviewcontroller">function</a>.</p><p>However, using SwiftUI, we need to twist our thinking towards using view or environment state, as the modal view is now called a sheet.<br><br>Let's check it out in detail.</p><blockquote><p>Thank you <a href="https://twitter.com/janiskirsteins">JƒÅnis Kir≈°teins</a> for a great <a href="https://twitter.com/janiskirsteins/status/1337398222386434053">suggestion</a> to use <code>@ViewBuilder</code> instead of <code>AnyView</code>.</p></blockquote><h2>Open modal view (a.k.a. sheet)</h2><p>SwiftUI sheets help us show a modal view to users. <code>sheet</code> is an instance method to the <a href="https://developer.apple.com/documentation/swiftui/view-presentation">View Presentation</a>. It describes how we can show our SwiftUI views, covering specific user journey scenarios.</p><p>Let's say we want to display information about our app to users.</p><p>Firstly, we need to define whether the app should show a modal view or not, binding this with the <code>Bool</code> value.</p><p>The keyword here is 'should' because once we dismiss, the presented view value is set back to <code>false</code>. This value is decorated with a <code>@State</code> property wrapper, or could come from <code>ObservableObject</code> ViewModel. For simplicity reasons, we're not going to talk about ViewModels in this post.</p><p>Secondly, we need to change the view or, in some cases, the environment state. Once we are using the <code>@State</code> property wrapper, we can just set it to <code>true</code> and SwiftUI will do the rest to present the modal view.</p><p>Let‚Äôs look how we can do it in the code:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> showInfoModalView: <span class="type">Bool</span> = <span class="keyword">false
  
  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(spacing: <span class="number">50</span>) {
      <span class="type">Text</span>(<span class="string">"Main View"</span>)
        .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
      
      <span class="type">Button</span>(action: {
        showInfoModalView = <span class="keyword">true</span>
      }, label: {
        <span class="type">Label</span>(<span class="string">"Show Info View"</span>, systemImage: <span class="string">"info.circle"</span>)
      })
    }
    .<span class="call">sheet</span>(isPresented: <span class="property">$showInfoModalView</span>) {
      <span class="type">InfoView</span>()
    }
  }
}
</code></pre><p>When we run the app, we can now open the modal view and see the detailed information.</p><img src="https://kristaps.me/assets/img/modal-view-swiftui/show-modal-view.gif" alt="Show Modal View"/><h2>Close modal view programmatically</h2><p>Our app users can simply slide the modal view down, and it will hide with a nice animation. Set the state to false to hide this from the view responsible for showing the modal view.</p><p>Now is the question of how to do it from the modal view itself? We have these two options at our disposal:</p><ul><li>using <code>@Environment</code> property <code>presentationMode</code>;</li><li>passing the state to the modal view as binding.</li></ul><h3>Using Environment</h3><p>Property wrapper <code>@Environment</code> allows us to read and change the values of the view environment state. To hide the modal view, we need to change the <code>presentationMode</code> property. At first, we need to define our view. To do this, we add it to the modal view properties. To dismiss the modal view, we need to alter the presentation mode wrapped value.</p><pre><code><span class="keyword">struct</span> InfoView: <span class="type">View</span> {
  <span class="keyword">@Environment</span>(\.<span class="property">presentationMode</span>) <span class="keyword">var</span> presentationMode
  
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(spacing: <span class="number">50</span>) {
      <span class="type">Text</span>(<span class="string">"Information view."</span>)
        .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
      
      <span class="type">Button</span>(action: {
        presentationMode.<span class="property">wrappedValue</span>.<span class="call">dismiss</span>()
      }, label: {
        <span class="type">Label</span>(<span class="string">"Close"</span>, systemImage: <span class="string">"xmark.circle"</span>)
      })
    }
  }
}
</code></pre><p>This method is quite cumbersome, and dealing with environmental properties can cause accidental issues that are difficult to track down and debug.</p><h3>Using a binding</h3><p>Using a binding between the view that is presenting the modal view and the modal view itself is another method to hide it from the code.</p><p>First, we need to add a new property to the modal view structure using <code>@Binding</code> property wrapper. This describes that this value comes from somewhere else outside the view scope.</p><pre><code><span class="keyword">struct</span> InfoView: <span class="type">View</span> {
  <span class="keyword">@Binding var</span> isPresented: <span class="type">Bool</span>
  
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(spacing: <span class="number">50</span>) {
      <span class="type">Text</span>(<span class="string">"Information view."</span>)
        .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
      
      <span class="type">Button</span>(action: {
        isPresented = <span class="keyword">false</span>
      }, label: {
        <span class="type">Label</span>(<span class="string">"Close"</span>, systemImage: <span class="string">"xmark.circle"</span>)
      })
    }
  }
}
</code></pre><p>Now when we are initializing the <code>ModalView</code> we need to pass the <code>isPresented</code>:</p><pre><code>.<span class="call">sheet</span>(isPresented: <span class="property">$showInfoModalView</span>) {
  <span class="type">InfoView</span>(isPresented: <span class="property">$showInfoModalView</span>)
}
</code></pre><p>Using this approach, we are sure that this variable only belongs to these two views. It is more straightforward to test and debug.</p><h2>Multiple sheets on one SwiftUI view</h2><p>Now we know how to present a modal view, but how can we show multiple modal views?</p><p>Imagine we would like to present information about the app and the settings view from the primary app view.<br><br>We can do this using these two approaches:</p><ul><li>using multiple sheets presenting functions;</li><li>using <code>Identifiable</code> enum to keep the state of the currently shown sheet.</li></ul><h3>Multiple sheet functions in one SwiftUI view</h3><p>We can attach <code>sheet</code> function to any SwiftUI view or control, for instance to the <code>Button</code>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> showInfoModalView: <span class="type">Bool</span> = <span class="keyword">false
  @State var</span> showSettingsModalView: <span class="type">Bool</span> = <span class="keyword">false
  
  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(spacing: <span class="number">50</span>) {
      <span class="type">Text</span>(<span class="string">"Main View"</span>)
        .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
      
      <span class="type">Button</span>(action: {
        showInfoModalView = <span class="keyword">true</span>
      }, label: {
        <span class="type">Label</span>(<span class="string">"Show Info View"</span>, systemImage: <span class="string">"info.circle"</span>)
      })
      .<span class="call">sheet</span>(isPresented: <span class="property">$showInfoModalView</span>) {
        <span class="type">InfoView</span>()
      }
      
      <span class="type">Button</span>(action: {
        showSettingsModalView = <span class="keyword">true</span>
      }, label: {
        <span class="type">Label</span>(<span class="string">"Show Settings View"</span>, systemImage: <span class="string">"gear"</span>)
      })
      .<span class="call">sheet</span>(isPresented: <span class="property">$showSettingsModalView</span>) {
        <span class="type">SettingsView</span>()
      }
    }
  }
}
</code></pre><p>It can be fine to have two buttons, but let's say we have more than that. It can get quite messy, so we should deal with many <code>@State</code> variables.</p><h3>Using enumeration of all modal views</h3><p>If we look at Apple's official documentation, there is another <a href="https://developer.apple.com/documentation/swiftui/view/actionsheet(item:content:">function</a>) to show a sheet. Let's try to use it.</p><p>At first, we will define an <code>enum</code> with all modal view options:</p><pre><code><span class="keyword">enum</span> Sheet: <span class="type">Identifiable</span> {
  <span class="keyword">case</span> info
  <span class="keyword">case</span> settings
}
</code></pre><p>Now we can use this in the SwiftUI view. We need a new <code>@State</code> variable with the optional type <code>Sheet</code> and to use this to determine which modal view we would like to present.</p><pre><code><span class="keyword">enum</span> Sheet: <span class="type">Identifiable</span> {
  <span class="keyword">case</span> info
  <span class="keyword">case</span> settings
  
  <span class="keyword">var</span> id: <span class="type">Int</span> {
    hashValue
  }
}

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> activeSheet: <span class="type">Sheet</span>?
  
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(spacing: <span class="number">50</span>) {
      <span class="type">Text</span>(<span class="string">"Main View"</span>)
        .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
      
      <span class="type">Button</span>(action: {
        activeSheet = .<span class="dotAccess">info</span>
      }, label: {
        <span class="type">Label</span>(<span class="string">"Show Info View"</span>, systemImage: <span class="string">"info.circle"</span>)
      })
      
      <span class="type">Button</span>(action: {
        activeSheet = .<span class="dotAccess">settings</span>
      }, label: {
        <span class="type">Label</span>(<span class="string">"Show Settings View"</span>, systemImage: <span class="string">"gear"</span>)
      })
    }
    .<span class="call">sheet</span>(item: <span class="property">$activeSheet</span>) { sheet <span class="keyword">in
      switch</span> sheet {
      <span class="keyword">case</span> .<span class="dotAccess">info</span>:
        <span class="type">InfoView</span>()
      <span class="keyword">case</span> .<span class="dotAccess">settings</span>:
        <span class="type">SettingsView</span>()
      }
    }
  }
}
</code></pre><p>We don't need to stop here. We can declutter this code by adding a computed property to <code>Sheet</code> enum:</p><pre><code><span class="keyword">extension</span> <span class="type">Sheet</span> {
  <span class="keyword">@ViewBuilder
  var</span> modalView: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">switch self</span> {
    <span class="keyword">case</span> .<span class="dotAccess">info</span>:
      <span class="type">InfoView</span>()
    <span class="keyword">case</span> .<span class="dotAccess">settings</span>:
      <span class="type">SettingsView</span>()
    }
  }
}
</code></pre><p>Then we can use it when opening the sheet:</p><pre><code>   .<span class="call">sheet</span>(item: <span class="property">$activeSheet</span>) { $0.<span class="property">modalView</span> }
</code></pre><p>Using the fancy new keypaths functionality in closures, we can simplify this even more:</p><pre><code>   .<span class="call">sheet</span>(item: <span class="property">$activeSheet</span>, content: \.<span class="property">modalView</span>)
</code></pre><p>One caveat to this approach is that we need to change part of our process to hide the view from the code. To do this, we set it to <code>nil</code> instead of <code>false</code>.</p><p>This approach is much safer, because we use the enumeration type to keep everything well organized.</p><p>Let's see it in action.</p><img src="https://kristaps.me/assets/img/modal-view-swiftui/show-multiple-modal-views-close.gif" alt="Show Modal View"/><h2>TL;DR</h2><p>Modal views in SwiftUI are presented using the sheet modifier on a view or control. The simplest way is to have <code>@State</code> property to indicate when it should be visible.</p><p>To hide the modal view, we can use the environment parameter or pass a binding to the modal view object. Showing multiple sheets can be achieved either with multiple sheet modifiers or using an object with all possible modal view enumerations.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/ModalViewApp">Demo app - there are multiple branches for everything we talked about</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/swiftui/view/sheet(ispresented:ondismiss:content:">Apple official documention</a>)</li><li><a href="https://www.simpleswiftguide.com/how-to-present-sheet-modally-in-swiftui/">How to present a sheet modally in SwiftUI</a></li><li><a href="https://swiftwithmajid.com/2019/07/24/alerts-actionsheets-modals-and-popovers-in-swiftui/">Alerts, Action Sheets, Modals and Popovers in SwiftUI</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-present-a-new-view-using-sheets">How to present a new view using sheets</a></li><li><a href="https://masilotti.com/multiple-sheets-swiftui/">How to manage multiple sheets in SwiftUI</a></li><li><a href="https://stackoverflow.com/questions/58837007/multiple-sheetispresented-doesnt-work-in-swiftui">Thread in StackOverflow</a></li><li><a href="https://www.youtube.com/watch?feature=player_embedded&v=7dZfpAn_P2g">Enums for Multiple Sheets</a></li><li><a href="https://github.com/davdroman/MultiSheet">MultiSheet</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-launch-screen</guid><title>Launch Screen with SwiftUI</title><description>Launch  Screen is the first interaction that users see when using our apps. That's why investing time in making our app launch screens feel responsive and visually appealing is important. We are playing with the perceived time and it can be a great first impression.</description><link>https://kristaps.me/blog/swiftui-launch-screen</link><pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Launch Screen is the first interaction that users see when using our apps. That's why investing time in making our app launch screens feel responsive and visually appealing is important. We are playing with the perceived time and it can be a great first impression.</p><p>Apple in the last WWDC 2020 introduced a new way how to implement launch screen for SwiftUI apps in iOS 14 using Xcode 12. When we create a new SwiftUI app, this is the new way to make launch screens. We can still use the old way with the Storyboard launch screen with our existing apps.</p><h2>Launch Screen in Info.plist</h2><p>All the setup is done in the Info.plist file. We can see that there is an empty key <code>Launch Screen</code> with the Dictionary type. When we press the plus button there are a couple of options.</p><img src="https://kristaps.me/assets/img/swiftui-launch-screen/launch-screen-info.plist.png" alt="Info.plist Launch Screen Dictionary options"/><p>Now let's go over all of these options and learn how we can use them to set up our Launch Screens.</p><h2>Background color</h2><p>At first, we can change the launch screen background color. It is a <code>String</code> value of the color name from the Asset catalog. By default, iOS is using the <code>systemBackground</code> color.</p><p>Let's add a new Color Set in our Assets catalog and name it <code>launchScreenBackground</code>:</p><img src="https://kristaps.me/assets/img/swiftui-launch-screen/color-assets-catalog.png" alt="Color in Assets Catalog"/><p>Then we can add a new key <code>launchScreenBackground</code> to the <code>Launch Screen</code> dictionary in the Info.plist file. Now when we run the app we'll see this color background on the launch screen.</p><h2>Background Image</h2><p>After the background color is set let's show an image in front of it. There are two options we can use to configure that:</p><ul><li><code>Image Name</code> is an image name from the Assets catalog.</li><li><code>Image respects safe area insets</code> is a <code>Boolean</code> describing if the image needs to respect the safe area, respectively it won't go outside the safe area borders.</li></ul><p>Let's say we have a Swift logo in the Assets catalog which is an SVG file. In Xcode 12 SVG images are fully supported (finally). The name for this image is <code>swift</code>:</p><img src="https://kristaps.me/assets/img/swiftui-launch-screen/swift-logo-assets.png" alt="Swift logo in Assets Catalog"/><p>Now we can add the image in the Info.plist in the <code>Launch Screen</code> dictionary using the key <code>Image Name</code>. By setting the <code>Image respects safe area insets</code> option to <code>true</code> we are sure that it scales correctly and does not go outside the safe area. The image is in SVG file format and scales perfectly without sacrificing the image quality.</p><p>Now when launching the app we can see the background color and the Swift logo on top of it.</p><img src="https://kristaps.me/assets/img/swiftui-launch-screen/launch-screen-swift-logo.png" alt="Swift logo on the Launch Screen"/><h2>Extra options</h2><p>There are a couple of options more we can use to configure the Launch Screen:</p><ul><li><code>Show Navigation bar</code> - show the navigation bar with an image.</li><li><code>Show Tab bar</code> - show the tab ar with an image.</li><li><code>Show Toolbar</code> - show the toolbar with an image.</li></ul><p>This time we won't look more into these options, because most of the time the launch screen would consist of background color and image.</p><h2>TL;DR</h2><p>Launch screen "perceived time" should feel fast for the user.</p><p>In WWDC 2020 Apple introduced a new way for SwiftUI apps on how to create the launch screens by using Info.plist and Assets catalog capabilities.</p><p>The old way with storyboard launch screens still works fine, but we can assume that in the future it may be deprecated.</p><h2>Links</h2><ul><li><a href="https://danielbernal.co/creating-a-launch-screen-with-swift-ui/">Launch Screens and the SwiftUI App Life Cycle on iOS 14</a></li><li><a href="https://wwdcbysundell.com/2020/launch-screen-info-plist/">Customize your app‚Äôs Launch Screen using its Info Plist</a></li><li><a href="https://www.avanderlee.com/xcode/launch-screen/">Launch screens in Xcode: All the options explained</a></li><li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/launch-screen/">Human Interface Guidelines - Launch Screen</a></li><li><a href="https://useyourloaf.com/blog/dropping-launch-storyboards/">Dropping launch storyboards</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/custom-font-dynamic-type</guid><title>Use Custom Font with Dynamic Type in iOS apps</title><description>A while back we looked into dynamic type with the system font. This time we are going to check out how to use the dynamic type with a custom font in our iOS apps. Apple provides great APIs to make our apps accessible even if we're using custom font styles.</description><link>https://kristaps.me/blog/custom-font-dynamic-type</link><pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>A while back we <a href="https://kristaps.me/embracing-dynamic-type/">looked into</a> dynamic type with the system font. This time we are going to check out how to use the dynamic type with a custom font in our iOS apps. Apple provides great APIs to make our apps accessible even if we're using custom font styles.</p><h2>Add custom font to app</h2><p>At first, we need to add our custom font to the project. There are several steps involved so let's go over them.</p><p>We need to add a font file to the Xcode app project. Currently <strong>True Type Font</strong> (.ttf) and <strong>Open Type Font</strong> (.otf) files are being supported. Just drag and drop files in your XCode project. Be careful and select targets you want to use this font in.</p><img src="https://kristaps.me/assets/img/custom-dynamic-type/add-custom-font-to-xcode.gif" alt="Add custom font to Xcode"/><p>If you forget to add the font to specific target membership in your Xcode project, you will run into an issue when the font file is not found.</p><img src="https://kristaps.me/assets/img/custom-dynamic-type/error-font-file-not-found.png" alt="Custom font not found"/><p>To fix that just check the checkbox and add it to your designated target.</p><img src="https://kristaps.me/assets/img/custom-dynamic-type/custom-font-xcode-target-membership.png" alt="Add custom font to target membership"/><p>After that is done head down to the <code>Info.plist</code> file and add a new entry with key <code>Fonts provided by application</code>. There we need to provide an array with all the font files we have added to the project.</p><p>Check that the font files have been added and that we can use this piece of code to print all available font families and names:</p><pre><code><span class="type">UIFont</span>.<span class="property">familyNames</span>.<span class="call">sorted</span>().<span class="call">forEach</span> { fontFamily <span class="keyword">in</span>
  <span class="call">print</span>(<span class="string">"Family:</span> \(fontFamily)<span class="string">"</span>)
  
  <span class="type">UIFont</span>.<span class="call">fontNames</span>(forFamilyName: fontFamily).<span class="call">forEach</span> { fontName <span class="keyword">in</span>
    <span class="call">print</span>(<span class="string">"name:</span> \(fontName)<span class="string">"</span>)
  }
}
</code></pre><p>Just paste this code in your <code>AppDelegate</code> <code>didFinishLaunchingWithOptions</code> and when you run the app it will print font families and names in the console.</p><h2>Use Custom Font with Dynamic type</h2><p>To use Dynamic Type with custom fonts we need to use <code>UIFontMetrics</code>. It is a utility object that helps to obtain custom fonts that scale accordingly to text size presences and accessibility settings. In other words, this class helps us to show the custom font taking into account user font and accessibility settings.</p><p>To do it at first we need to initialize an instance of a custom font with a concrete size. To determine specific size we can use the dynamic type sizes <a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/typography/">table</a> from the human interface guidelines typography section.</p><img src="https://kristaps.me/assets/img/custom-dynamic-type/dynamic-type-sizes-ios.png" alt="Dynamic Type Sizes in iOS"/><p>Let‚Äôs say we have added a label that has a large title behavior, so it means we need to use a 34 point size font. Then we use <code>UIFontMetrics</code> and initialize an instance for a specific text style. In the end, we set the font for our label using the <code>scaledFont</code> function and provide our custom font.</p><pre><code><span class="keyword">guard let</span> font = <span class="type">UIFont</span>(name: <span class="string">"Proxima Nova-Regular"</span>, size: <span class="number">34</span>) <span class="keyword">else</span> {
  <span class="call">fatalError</span>(<span class="string">"Can't find the custom font"</span>)
}

<span class="keyword">let</span> fontMetrics = <span class="type">UIFontMetrics</span>(forTextStyle: .<span class="dotAccess">largeTitle</span>)
label.<span class="property">font</span> = fontMetrics.<span class="call">scaledFont</span>(for: font)
</code></pre><h2>Update upon Text Size changes</h2><p>To test how everything works we can enable text size in Xcode Environment Overrides.</p><img src="https://kristaps.me/assets/img/custom-dynamic-type/xcode-environment-overrides-dynamic-type.png" alt="Enable Dynamic Type in Xcode Environment OVerrides"/><p>If you change it you can notice that nothing is happening in our app. To enable automatic change we need to set <code>adjustsFontForContentSizeCategory</code>. It indicates that the object should automatically update it‚Äôs font when device category changes.</p><pre><code>label.<span class="property">adjustsFontForContentSizeCategory</span> = <span class="keyword">true</span>
</code></pre><p>Now we can fully test and we should see that our label font adjusts according to the text size and accessibility settings.<br>## TL;DR</p><p>Supporting Dynamic Type with custom font might sound like a tricky task to do, but it doesn't have to be. Using the <code>UIFontMetrics</code> utility object we can scale our custom font according to what the user has specified in text size or accessibility settings.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/custom-font-dynamic-type">Example app</a></li></ul><ul><li><a href="https://developer.apple.com/videos/play/wwdc2017/245/">Building Apps with Dynamic Type</a></li><li><a href="https://www.hackingwithswift.com/example-code/uikit/how-to-resize-a-custom-font-using-uifontmetrics">How to resize a custom font using UIFontMetrics</a></li><li><a href="https://useyourloaf.com/blog/using-a-custom-font-with-dynamic-type/">Using A Custom Font With Dynamic Type</a></li><li><a href="https://learnui.design/blog/ios-font-size-guidelines.html">The iOS Font Size Guidelines</a></li><li><a href="https://developer.apple.com/documentation/uikit/text_display_and_fonts/adding_a_custom_font_to_your_app">Adding a Custom Font to Your App</a></li><li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/typography/">Typography - Human Interface Guidelines</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-mapview</guid><title>Mapview with SwiftUI</title><description>Finding places, navigating our way, or simply checking what's around - these are essential things that smartphones can help with. This year Apple added maps functionality to the SwiftUI framework. Let's check out how we can use it and what are the current problems.</description><link>https://kristaps.me/blog/swiftui-mapview</link><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Finding places, navigating our way, or simply checking what's around - these are essential things that smartphones can help with. This year Apple added maps functionality to the SwiftUI framework. Let's check out how we can use it and what are the current problems.</p><blockquote><p>I would like to point out that this covers Xcode 12 beta software and it can change in future releases.</p></blockquote><h2>Present the MapView</h2><p>To show MapView we need to use MapKit's structure <code>Map</code> that is specifically designed to use with SwiftUI. It is a view that displays an embedded map interface. We can use it to configure user-allowed interactions, show and track current location, and add annotations on the map.</p><p>It comes with several <a href="https://developer.apple.com/documentation/mapkit/map">initialize methods</a>. Let's see how to create a map specifying the map visible map region and add annotations.</p><p>The coordinate region defines the area that is visible on the map. It is a <code>Binding</code> that takes an <code>MKCoordinateRegion</code> object that is a combination of center coordinate and a coordinate span around it.</p><pre><code><span class="keyword">struct</span> MapView: <span class="type">View</span> {
  <span class="keyword">@State var</span> coordinateRegion = <span class="type">MKCoordinateRegion</span>(
    center: <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="number">56.948889</span>, longitude: <span class="number">24.106389</span>),
    span: <span class="type">MKCoordinateSpan</span>(latitudeDelta: <span class="number">0.2</span>, longitudeDelta: <span class="number">0.2</span>))
  
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Map</span>(coordinateRegion: <span class="property">$coordinateRegion</span>)
      .<span class="call">edgesIgnoringSafeArea</span>(.<span class="dotAccess">all</span>)
  }
}
</code></pre><p>Now we have a map showing the capital city of Latvia - Riga. With this init method we can specify other things like interaction capabilities, showing user location, and more.</p><img src="https://kristaps.me/assets/img/swiftui-map/mapview.png" alt="SwiftUI Map view"/><h2>Add annotations on the map</h2><p>If we want to add annotation on the map we need to use a different initializer method that takes <code>MKCoordinateRegion</code>, identifiable collection of annotations and block that creates returns <code>MapAnnotationProtocol</code> protocol object.</p><p>Right now MapKit offers three simple annotation views:</p><ul><li><code>MapPin</code> - pin-shaped annotation</li><li><code>MapMarker</code> - balloon-shaped annotation</li><li><code>MapAnnoation</code> - custom view annoation</li></ul><p>The simplest way is to use the first two annotation types, in this blog post we're going to look into <code>MapMarker</code> annotation type. To <a href="https://developer.apple.com/documentation/mapkit/mapmarker/3601335-init">initalize</a> need to pass a coordinate and optional tint color.</p><pre><code><span class="type">MapMarker</span>(coordinate: place.<span class="property">coordinate</span>, tint: .<span class="dotAccess">green</span>)
</code></pre><p>By putting it all together, we can show couple of annoations on the map like this:</p><pre><code><span class="keyword">struct</span> MapViewWithAnnotations: <span class="type">View</span> {
  <span class="keyword">let</span> veganPlacesInRiga = [
    <span class="type">VeganFoodPlace</span>(name: <span class="string">"Kozy Eats"</span>, latitude: <span class="number">56.951924</span>, longitude: <span class="number">24.125584</span>),
    <span class="type">VeganFoodPlace</span>(name: <span class="string">"Green Pumpkin"</span>, latitude:  <span class="number">56.967520</span>, longitude: <span class="number">24.105760</span>),
    <span class="type">VeganFoodPlace</span>(name: <span class="string">"Terapija"</span>, latitude: <span class="number">56.9539906</span>, longitude: <span class="number">24.13649290000000</span>)
  ]
  
  <span class="keyword">@State var</span> coordinateRegion = <span class="type">MKCoordinateRegion</span>(
    center: <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="number">56.948889</span>, longitude: <span class="number">24.106389</span>),
    span: <span class="type">MKCoordinateSpan</span>(latitudeDelta: <span class="number">0.2</span>, longitudeDelta: <span class="number">0.2</span>))
  
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Map</span>(coordinateRegion: <span class="property">$coordinateRegion</span>,
        annotationItems: veganPlacesInRiga) { place <span class="keyword">in</span>
      <span class="type">MapMarker</span>(coordinate: place.<span class="property">coordinate</span>, tint: .<span class="dotAccess">green</span>)
    }.<span class="call">edgesIgnoringSafeArea</span>(.<span class="dotAccess">all</span>)
  }
}
</code></pre><p>Let's not forget those collection elements should conform to <code>Identifiable</code> - provide <code>ID</code> value. The easiest way is to just use the <code>UUID</code> like this:</p><pre><code><span class="keyword">struct</span> VeganFoodPlace: <span class="type">Identifiable</span> {
  <span class="keyword">var</span> id = <span class="type">UUID</span>()
  <span class="keyword">let</span> name: <span class="type">String</span>
  <span class="keyword">let</span> latitude: <span class="type">Double</span>
  <span class="keyword">let</span> longitude: <span class="type">Double</span>
  
  <span class="keyword">var</span> coordinate: <span class="type">CLLocationCoordinate2D</span> {
    <span class="type">CLLocationCoordinate2D</span>(latitude: latitude, longitude: longitude)
  }
}
</code></pre><p>As we see that there is no way how to initialize an annotation with the title right now. For that, we need to use <code>MapAnnotation</code> that allows us to create custom map annotation.</p><h2>Current drawbacks</h2><p>Adding Map view with SwiftUI is a very straight forward task, but current implementation lacks some important components. Let's discuss some of the drawbacks.</p><p>Adding a callout view for map annotation is one of the most essential things that is lacking with the current implementation.</p><p>After clicking on an annotation and showing a callout usually, there is the navigation or a modal view is presented. With a custom <code>MapAnnoation</code> we can partially do it, but for sure it is not a great solution.</p><p>Right now you can add only add annotations on the map. There isn't support for polyline or other elements.<br>## TL;DR</p><p>Adding Map view with SwiftUI is simple. It comes with ways to add binding to the map region, specify annotation list, track user's location, and more. Sadly with current Xcode Beta 3, it lacks features like showing titles for annotations, callout view, and SwiftUI way of navigation. Let's hope Apple will add it in the future.</p><h2>Links</h2><ul><li><a href="Map official documentation">https://developer.apple.com/documentation/mapkit/map</a></li><li><a href="Hacking with Swift article">https://www.hackingwithswift.com/quick-start/swiftui/how-to-show-a-map-view</a></li><li><a href="SwiftUI Map view implementation">https://github.com/fassko/RigaVeganMap</a></li><li><a href="Using MapKit with SwiftUI">https://swiftwithmajid.com/2020/07/29/using-mapkit-with-swiftui/</a></li><li><a href="Adventures in SwiftUI 2's MapKit support">https://codakuma.com/swiftui-mapkit-fun/</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/embracing-dynamic-type</guid><title>Embracing the Dynamic Type</title><description>Every year the third Thursday of May is the Global Accessibility Awareness Day. This time I want to focus on Dynamic Type in our iOS, iPadOS, and macOS projects. By implementing font scaling we can improve lives for loads of people with disabilities and impairments.</description><link>https://kristaps.me/blog/embracing-dynamic-type</link><pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Every year the third Thursday of May is the <a href="https://en.wikipedia.org/wiki/Global_Accessibility_Awareness_Day">Global Accessibility Awareness Day (GAAD)</a>. This time I want to focus on Dynamic Type in our iOS, iPadOS, and macOS projects. By implementing font scaling we can improve lives for loads of people with disabilities and impairments.</p><p><a href="https://twitter.com/browgrammer/status/1031630345551065089">More than 40%</a> of iOS users have changed the font size to non-default one. It isn‚Äôt just a bigger font size. Quite a large chunk of folks have set it to smaller just because more information fits on the screen.</p><p>We should take into account how users want to interact with the apps we build. Apple - a huge accessibility advocate has written in <a href="https://developer.apple.com/design/human-interface-guidelines/accessibility/overview/introduction/">Human Interface Guidelines</a> that we should use text styles that provide flexibility and adaptability by default.</p><h2>What is Dynamic Type</h2><p>Dynamic Type is a feature to help developers to trigger and change text size according to the user‚Äôs text settings. It has been available from iOS 7 and we should embrace it.</p><p>Users can change text size in Settings app &gt; General &gt; Accessibility &gt; Larger Text. By default text size slider is in the center.</p><img src="https://kristaps.me/assets/img/dynamic-type/ios-settings.jpeg" alt="iOS Text Size Settings"/><h2>How to support Dynamic Type</h2><p>The easiest way to support Dynamic Type in your apps is to use system provided text styles. By using this option we get Dynamic Type support without putting in any extra effort. For our disposal there are many text styles for titles, body, captions, and more.</p><p>Starting from iOS 11 we can implement scaling for custom fonts with UIFontMetrics. During this post, we won‚Äôt look into that.</p><p>Let‚Äôs see how we can use system text styles using UIKit and SwiftUI.</p><h3>UIKit</h3><p>With good old UIKit we can use Dynamic Text Styles either with Storyboard or programmatically. We will not start a battle on which one is better during this post. :)</p><h4>Storyboard</h4><p>In Storyboard let‚Äôs say we have a Label view. In Inspector pane we need to check the Dynamic Type checkbox.</p><img src="https://kristaps.me/assets/img/dynamic-type/dynamic-type-storyboard.png" alt="Dynamic Type in Storyboard"/><p>Once that is done then just change the font by selecting one of the provided Text Style.</p><img src="https://kristaps.me/assets/img/dynamic-type/dynamic-type-font.png" alt="Custom Font"/><img src="https://kristaps.me/assets/img/dynamic-type/dynamic-type-text-styles.png" alt="Text Style"/><h4>Programmatically</h4><p>If we wish to create the user interface from code we need to use <code>preferredFont(forTextStyle:)</code> and set <code>adjustsFontForContentSizeCategory</code> to true. It does the same that we saw with Storyboard approach.</p><pre><code>label.<span class="property">font</span> = <span class="type">UIFont</span>.<span class="call">preferredFont</span>(forTextStyle: .<span class="dotAccess">largeTitle</span>)
label.<span class="property">adjustsFontForContentSizeCategory</span> = <span class="keyword">true</span>
</code></pre><h3>SwiftUI</h3><p>SwiftUI supports font scaling out of the box for free. But once we want to set custom font we can use Dynamic Text System Style. For that, we need to use <code>.font</code> directive passing a text style.</p><pre><code><span class="keyword">struct</span> TextView: <span class="type">View</span> {
  <span class="keyword">let</span> text: <span class="type">String</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(alignment: .<span class="dotAccess">leading</span>) {
      <span class="type">Text</span>(text)
        .<span class="call">font</span>(.<span class="dotAccess">headLine</span>)
    }
  }
}
</code></pre><h2>How to test Dynamic Type</h2><p>When developing apps we can test Dynamic Type support in two ways - changing font size using Environment Overrides or Accessibility inspector. Both options can give quick and rapid feedback.</p><img src="https://kristaps.me/assets/img/dynamic-type/xcode-environment-overrides.png" alt="Xcode Environment Overrides"/><p>When running our app either in Simulator or on the device we can change environment variables from Debug Menu. That allows quickly to change text size and more.</p><img src="https://kristaps.me/assets/img/dynamic-type/accessibility-inspector.png" alt="Accessibility Inspector"/><p>The second option is to use the Accessibility Inspector tool. This option is tailored to check how our apps support accessibility features and quickly enable, disable, or change each of them.<br>## TL;DR</p><p>Accessibility has been an important topic in last couple of WWDC and overall in technology. By making our apps and solutions accessible we help our current users and support new users who previously couldn‚Äôt use our apps.</p><p>Dynamic Type is an iOS feature that scales font according to the user settings. More than 40% of iOS users have changed the default system font size. Both larger and smaller.</p><p>The easiest way to support Dynamic Type is to use System Font Styles either from Storyboard or programmatically with UIKit. With SwiftUI font scaling comes out of the box, but sure enough we can use System Styles let‚Äôs say for titles and captions.</p><h2>Links</h2><ul><li><a href="https://developer.apple.com/documentation/uikit/uifont/scaling_fonts_automatically">Apple Human Interface Guidelines</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2017/245/">Building Apps with Dynamic Type - WWDC 2017</a></li><li><a href="https://blog.timroesner.com/supporting-dynamic-type">Supporting Dynamic Type with Custom Fonts on iOS</a></li><li><a href="https://fluffy.es/introduction-to-dynamic-type/">Introduction to supporting Dynamic Type</a></li><li><a href="https://pspdfkit.com/blog/2018/improving-dynamic-type-support/">Improving Dynamic Type Support</a></li><li><a href="https://swiftwithmajid.com/2019/10/09/dynamic-type-in-swiftui/">Dynamic Type in SwiftUI</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-use-dynamic-type-with-a-custom-font">How to use Dynamic Type with a custom font</a></li><li><a href="https://github.com/fassko/DynamicType">Dynamic Type project with UIKit and SwiftUI</a></li><li><a href="https://devchat.tv/iphreaks/ips-288-accessibility-dynamic-type-and-voiceover-with-jeff-watkins/">iPS 288: Accessibility, Dynamic Type, and Voiceover with Jeff Watkins</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/different-flavors-of-websockets-vapor</guid><title>Different flavors of WebSockets on Vapor with Swift</title><description>Swift on the server lately is getting more traction despite IBM leaving the club. One of the most popular frameworks out there is Vapor. It is built on top of Apple‚Äôs SwiftNIO and written fully in Swift programming language. This time we will look into how to work with WebSockets using Vapor framework. We are going to see how to create a client and server using Vapor‚Äôs module WebSocketKit and Vapor framework itself.</description><link>https://kristaps.me/blog/different-flavors-of-websockets-vapor</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Swift on the server lately is getting more traction despite <a href="https://forums.swift.org/t/december-12th-2019/31735">IBM leaving the club</a>. One of the most popular frameworks out there is <a href="https://vapor.codes/">Vapor</a>. It is built on top of Apple‚Äôs <a href="https://github.com/apple/swift-nio">SwiftNIO</a> and written fully in Swift programming language.</p><p>This time we will look into how to work with WebSockets using Vapor framework. We are going to see how to create a client and server using Vapor‚Äôs module <a href="https://github.com/vapor/websocket-kit">WebSocketKit</a> and Vapor framework itself.</p><h2>WebSocketKit</h2><p><a href="https://github.com/vapor/websocket-kit">WebSocketKit</a> is a WebSocket client library built on SwiftNIO. Vapor framework consists of many smaller modules and this is one of them. WebSocketKit is hiding away SwiftNIO lower-level complexity and nicely abstracting the event loops. Let‚Äôs see how can we use it.</p><h3>Client</h3><p>When creating a WebSocket client with WebSocketKit we need to follow a couple of steps. At first, we need to create an event loop group where we can receive the WebSocket events such as receiving a text.</p><pre><code><span class="keyword">var</span> eventLoopGroup = <span class="type">MultiThreadedEventLoopGroup</span>(numberOfThreads: <span class="number">2</span>)
</code></pre><p>After that, we should create a WebSocket promise within the created event loop group. Within the promise, we specify the WebSocket events. In this example, we are sending <code>hello</code> String value and printing out text that we receive back.</p><pre><code><span class="keyword">let</span> port: <span class="type">Int</span> = <span class="number">8080</span>
<span class="keyword">let</span> promise = eventLoopGroup.<span class="call">next</span>().<span class="call">makePromise</span>(of: <span class="type">String</span>.<span class="keyword">self</span>)
<span class="type">WebSocket</span>.<span class="call">connect</span>(to: <span class="string">"ws://localhost:</span>\(port)<span class="string">"</span>, on: eventLoopGroup) { ws <span class="keyword">in</span>
  ws.<span class="call">send</span>(<span class="string">"hello"</span>)
  ws.<span class="call">onText</span> { ws, string <span class="keyword">in</span>
    <span class="call">print</span>(string)
  }
}.<span class="call">cascadeFailure</span>(to: promise)
</code></pre><p>After that, we need to wait for executing events within this promise and event loop group.</p><pre><code><span class="keyword">_</span>  = <span class="keyword">try</span> promise.<span class="property">futureResult</span>.<span class="call">wait</span>()
</code></pre><h3>Server</h3><p>Creating a server with WebSocketKit is a bit more complicated - let‚Äôs move step by step.</p><p>Similarly, when creating the client we need to create the event loop group.</p><pre><code><span class="keyword">var</span> eventLoopGroup = <span class="type">MultiThreadedEventLoopGroup</span>(numberOfThreads: <span class="number">2</span>)
</code></pre><p>A <code>GET</code> connection can be transformed into WebSocket connection via upgrade dance. When using this approach, we need to configure that ourselves.</p><pre><code><span class="keyword">let</span> upgradePipelineHandler: (<span class="type">Channel</span>, <span class="type">HTTPRequestHead</span>) -&gt; <span class="type">EventLoopFuture</span>&lt;<span class="type">Void</span>&gt; = { channel, req <span class="keyword">in</span>
  <span class="type">WebSocket</span>.<span class="call">server</span>(on: channel) { ws <span class="keyword">in</span>
    ws.<span class="call">send</span>(<span class="string">"You have connected to WebSocket"</span>)
    
    ws.<span class="call">onText</span> { ws, string <span class="keyword">in</span>
      <span class="call">print</span>(<span class="string">"received"</span>)
      ws.<span class="call">send</span>(string.<span class="call">trimmingCharacters</span>(in: .<span class="dotAccess">whitespacesAndNewlines</span>).<span class="call">reversed</span>())
    }
    
    ws.<span class="call">onBinary</span> { ws, buffer <span class="keyword">in</span>
      <span class="call">print</span>(buffer)
    }
    
    ws.<span class="property">onClose</span>.<span class="call">whenSuccess</span> { value <span class="keyword">in</span>
      <span class="call">print</span>(<span class="string">"onClose"</span>)
    }
  }
}
</code></pre><p>Now as we have created the WebSocket upgrade pipeline let‚Äôs use it. To do that we need to create the promise in which we will receive the events.</p><pre><code><span class="keyword">let</span> promise = eventLoopGroup.<span class="call">next</span>().<span class="call">makePromise</span>(of: <span class="type">String</span>.<span class="keyword">self</span>)

<span class="keyword">let</span> server = <span class="keyword">try</span> <span class="type">ServerBootstrap</span>(group: eventLoopGroup).<span class="call">childChannelInitializer</span> { channel <span class="keyword">in
  let</span> webSocket = <span class="type">NIOWebSocketServerUpgrader</span>(
    shouldUpgrade: { channel, req <span class="keyword">in
      return</span> channel.<span class="property">eventLoop</span>.<span class="call">makeSucceededFuture</span>([:])
  },
    upgradePipelineHandler: upgradePipelineHandler
  )
  
  <span class="keyword">return</span> channel.<span class="property">pipeline</span>.<span class="call">configureHTTPServerPipeline</span>(
    withServerUpgrade: (
      upgraders: [webSocket],
      completionHandler: { ctx <span class="keyword">in</span>
        <span class="comment">// complete</span>
    })
  )
}.<span class="call">bind</span>(host: <span class="string">"localhost"</span>, port: port).<span class="call">wait</span>()
</code></pre><p>To boot up the server we need to start waiting for the events with the freshly created promise and server object.</p><pre><code><span class="keyword">_</span> = <span class="keyword">try</span> promise.<span class="property">futureResult</span>.<span class="call">wait</span>()
<span class="keyword">try</span> server.<span class="call">close</span>(mode: .<span class="dotAccess">all</span>).<span class="call">wait</span>()
</code></pre><p>Now we have a running server using WebSocketKit framework. When a client sends text message we are reversing all the characters. For example when a client sends <code>Hello</code> we are sending back <code>olleH</code>.</p><h2>Vapor app approach</h2><p>All this seems quite complicated, but don‚Äôt worry - by using Vapor app approach, all this complexity goes away.</p><h3>Client</h3><p>Creating a client is much easier within Vapor app. You just need to create a new WebSocket instance using an event loop group from <code>app</code> object. Then connect to the network address. Within a closure, you get WebSocket object on which you can register events you want to trigger.</p><pre><code><span class="keyword">let</span> url = <span class="string">"wss://echo.websocket.org"</span>
<span class="keyword">let _</span> = <span class="type">WebSocket</span>.<span class="call">connect</span>(to: url, on: app.<span class="property">eventLoopGroup</span>) { ws <span class="keyword">in</span>
  ws.<span class="call">onText</span> { ws, text <span class="keyword">in</span>
    <span class="call">print</span>(text)
  }
  
  ws.<span class="call">send</span>(<span class="string">"Hello"</span>)
}
</code></pre><p>In this example, client sends <code>Hello</code> to the server once connected and prints out to the console any text that is received.</p><h3>Server</h3><p>When creating a server we need to provide an endpoint where clients can connect to. Then within a closure, we get WebSocket object and request object.</p><p>Similarly, like with the client, we can specify what we want to do when these events are triggered. For instance, once the server receives text it will reverse it and send back.</p><pre><code>app.<span class="call">webSocket</span>(<span class="string">""</span>) { request, ws <span class="keyword">in</span>
  ws.<span class="call">send</span>(<span class="string">"You have been connected to WebSockets"</span>)
  
  ws.<span class="call">onText</span> { ws, string <span class="keyword">in</span>
    ws.<span class="call">send</span>(string.<span class="call">trimmingCharacters</span>(in: .<span class="dotAccess">whitespacesAndNewlines</span>).<span class="call">reversed</span>())
  }
  
  ws.<span class="property">onClose</span>.<span class="call">whenComplete</span> { result <span class="keyword">in
    switch</span> result {
    <span class="keyword">case</span> .<span class="dotAccess">success</span>():
      <span class="call">print</span>(<span class="string">"Closed"</span>)
    <span class="keyword">case</span> .<span class="dotAccess">failure</span>(<span class="keyword">let</span> error):
      <span class="call">print</span>(<span class="string">"Failed to close connection</span> \(error)<span class="string">"</span>)
    }
  }
}
</code></pre><p>Additional to that we can can react once client disconnects and many <a href="http://api.vapor.codes/websocket/latest/WebSocket/Classes/WebSocket.html">more</a>.</p><h2>TL;DR</h2><p>Swift on the server has gained a lot of popularity especially now since iOS developers can create apps and backend services in the same language.</p><p>Most of the Swift server frameworks are built on top of SwiftNIO framework that gives a very granular way to configure WebSockets.</p><p>Using Vapor tools like WebSocketKit and app framework itself we can ease this complicated process. You can check out the <a href="https://github.com/fassko/vapor-websockets">code samples</a> and start using Swift when you need to deal with WebSockets on the backend.</p><h2>Links</h2><ul><li><a href="https://github.com/vapor/websocket-kit">WebSocketKit on Github</a></li><li><a href="http://api.vapor.codes/websocket/latest/WebSocket/index.html">WebSocketKit documentation</a></li><li><a href="https://github.com/fassko/vapor-websockets">Vapor 4.0 WebSockets documentation</a></li><li><a href="http://api.vapor.codes/websocket/latest/WebSocket/index.html">Vapor WebSockets code samples</a></li><li><a href="https://github.com/apple/swift-nio">SwiftNIO</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/nstimer-vs-cadisplaylink</guid><title>NSTimer vs CADisplayLink</title><description>`NSTimer` or just `Timer` in Swift world is a commonly used way to execute something repeatedly with an interval. For instance, a countdown timer is a perfect example. A hidden gem is `CADisplayLink` - a special flavor of timer that is linked to the device screen refresh rate. Usually, it is 60 frames per second, but in new iPads, it is 120 frames per second.</description><link>https://kristaps.me/blog/nstimer-vs-cadisplaylink</link><pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p><code>NSTimer</code> or just <code>Timer</code> in Swift world is a commonly used way to execute something repeatedly with an interval. For instance, a countdown timer is a perfect example.</p><p>A hidden gem is <code>CADisplayLink</code> - a special flavor of timer that is linked to the device screen refresh rate. Usually, it is 60 frames per second, but in new iPads, it is 120 frames per second.</p><h2>What is (NS)Timer?</h2><p>With <a href="https://developer.apple.com/documentation/quartzcore/cadisplaylink">Timer</a> you can line up one or multiple tasks in the future. You can specify if the timer needs to repeat.</p><pre><code><span class="keyword">let</span> timer = <span class="type">Timer</span>.<span class="call">scheduledTimer</span>(withTimeInterval: <span class="number">1.0</span>, repeats: <span class="keyword">true</span>) { timer <span class="keyword">in</span>
  <span class="call">print</span>(<span class="string">"1 second passed"</span>)
}
</code></pre><p>In the example above timer will fire every 1 second indefinitely.</p><p>To stop the timer you need to invalidate it.</p><pre><code>timer.<span class="call">invalidate</span>()
</code></pre><p>Timers are fired on the main thread. If the app is UI heavy timers won‚Äôt fire. To fix that you can: - attach to non-default <code>RunLoop</code> mode like common mode - it will allow a timer to fire even UI (main thread) is busy</p><pre><code><span class="type">RunLoop</span>.<span class="property">current</span>.<span class="call">add</span>(timer, forMode: .<span class="dotAccess">common</span>)
</code></pre><p>OR - you can synchronize with your screen updates with <code>CADisplayLink</code>.</p><h2>What is CADisplayLink?</h2><p><code>CADisplayLink</code> is a special flavor of Timer that lets your apps run a piece of code every time right after the screen has refreshed. Usually, it is 60 frames per second, but in selective devices like new iPads, it is 120 frames per second.</p><p>It is a great way to create smooth animations and calculate the next frame. This way you have a perfect timing between the frames unlike the classical <code>Timer</code> which is not guaranteed to fire on the exact time when the screen is refreshing.</p><pre><code><span class="keyword">class</span> DisplayLink {
  <span class="keyword">@objc func</span> displayRefreshed(displayLink: <span class="type">CADisplayLink</span>) {
    <span class="call">print</span>(displayLink.<span class="property">timestamp</span>)
  }

<span class="keyword">init</span>() {
  <span class="keyword">let</span> displayLink = <span class="type">CADisplayLink</span>(target: <span class="keyword">self</span>, selector: <span class="keyword">#selector</span>(<span class="call">displayRefreshed</span>(displayLink:)))
    displayLink.<span class="call">add</span>(to: .<span class="dotAccess">main</span>, forMode: .<span class="dotAccess">default</span>)
  }
}
</code></pre><p>When you create a <code>DisplayLink</code> it should be linked to an object and specified an <code>objc</code> function as a selector. This function will be fired as soon as redraw on the screen happens. We can see it by printing out the timestamp.</p><pre><code class="language-no-highlight">  ...
  93095.013681187
  93095.11224511401
  93095.12891178101
  93095.145578448
  93095.162245115
  93095.178911782
  93095.19557844901
  93095.21224511601
  ...
</code></pre><p><code>CADisplayLink</code> has a property <code>preferredFramesPerSecond</code> that lets you specify a callback rate calculated in frames per second. It means you can specify your refresh rate when you want the timer to fire. It is a great way if you don‚Äôt need to execute your code every time screen refreshes.</p><h2>Timer vs CADisplayLink</h2><p><code>Timer</code> and <code>CADisplayLink</code> both are ways to fire piece of code with an interval. These two approaches are different.</p><p><code>Timer</code> is useful when you just want to execute something let‚Äôs say every 5 seconds without it being tied to screen redrawing.</p><p><code>CADisplayLink</code> is tied to screen refresh rate which is either 60 or 120 frames per second. It is fired right after screen redraws and you have maximum amount of time to execute the code before the next screen refresh. This approach shines if you need to create seamless animations or it can be useful in game development where you can‚Äôt avoid any screen refresh drops.</p><h2>TL;DR</h2><p>We all might know <code>NSTimer</code> (or just <code>Timer</code>) which is good for executing piece of code after an interval with or without repeating it.</p><p>In some cases it‚Äôs worth to consider <code>CADisplayLink</code> especially if you want to work with animations and get most of the time between screen redraws itself.</p><h2>Links</h2><ul><li><a href="https://developer.apple.com/documentation/foundation/nstimer?language=objc">NSTimer official documentation</a></li><li><a href="https://developer.apple.com/documentation/quartzcore/cadisplaylink">CADisplayLink official documentation</a></li><li><a href="https://www.raywenderlich.com/113835-ios-timer-tutorial">Timer tutorial</a></li><li><a href="https://www.hackingwithswift.com/articles/117/the-ultimate-guide-to-timer">How to use Timer</a></li><li><a href="https://www.hackingwithswift.com/example-code/system/how-to-synchronize-code-to-drawing-using-cadisplaylink">How to use CADisplayLink</a></li><li><a href="https://medium.com/@dmitryivanov_54099/cadisplaylink-and-its-applications-bfafb760d738?source=linkShare-edb1354ca2c4-1583337923">In depth article about CADisplayLink</a></li><li><a href="https://stackoverflow.com/questions/30955847/ios-animation-cadisplaylink-vs-cashapelayer">Discussion about CADisplayLink and animations</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/clearing-subscriptions</guid><title>Clearing up after subscribing to Swift WebSockets</title><description>Opening and keeping a WebSocket connection alive isn't enough when dealing with it. The connection needs to be closed either from user or sever side. That is [mentioned](https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76#section-6) in the official WebSocket protocol.</description><link>https://kristaps.me/blog/clearing-subscriptions</link><pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Opening and keeping a WebSocket connection alive isn't enough when dealing with it. The connection needs to be closed either from user or sever side. That is <a href="https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76#section-6">mentioned</a> in the official WebSocket protocol.</p><p>Previously we have seen how to implement WebSockets using <a href="https://kristaps.me/websockets-swift/">Starscream library</a>, <a href="https://kristaps.me/websockets-ios-13-swift/">URLSessionWebSocketTask</a> and <a href="https://kristaps.me/graphql-subscriptions/">GraphQL</a> in Swift projects. This time we will look into cleaning up the connection after you don‚Äôt need it anymore.</p><p>If you leave the connection open and don‚Äôt clean up properly various problems can arise: memory leaks, server overworking and data corruptions.</p><h2>Closing the WebSocket</h2><p>As we are looking at how to close connection from user agent there are couple of things to consider. When closing the connection we need to inform server about the reason using "close" code which can be useful for server developers. There are several "close" codes which you can check out in <a href="https://tools.ietf.org/html/rfc6455#section-7.4.1">RFC 6455</a> specification or simplified version <a href="https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent">here</a>.</p><p>If anything goes wrong with the connection on user side connection should be closed. It is important to note that when user agent notices that server has closed its connection, it should do the same on the other side. That means you need to explicitly inform the server about such event (regardless of the closure on the user side). That is clearly <a href="https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76#section-6.3">stated</a> in the official WebSocket protocol.</p><h2>Cancel the URLSessionWebSocketTask</h2><p>To cancel a <code>URLSessionWebSocketTask</code> you need to call a <code>cancel</code> <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/3181200-cancel">method</a>.</p><p>When calling this instance method you need to provide a <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/closecode">close code</a> and a reason.</p><pre><code><span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"wss://echo.websocket.org"</span>)!
<span class="keyword">let</span> webSocketTask = <span class="type">URLSession</span>.<span class="property">shared</span>.<span class="call">webSocketTask</span>(with: url)

<span class="comment">// ...</span>

webSocketTask.<span class="call">cancel</span>(with: .<span class="dotAccess">goingAway</span>, reason: <span class="keyword">nil</span>)
</code></pre><h2>Disconnect with Starscream</h2><p>To close a WebSocket created with library <a href="https://github.com/daltoniam/Starscream">Starscream</a> you need to call a <code>disconnect</code> method. If you want to specify it in the close code you can do so, but it is optional.</p><pre><code><span class="keyword">let</span> socket = <span class="type">WebSocket</span>(url: <span class="type">URL</span>(string: <span class="string">"ws://localhost:8080/"</span>)!)

<span class="comment">// ...</span>

socket.<span class="call">disconnect</span>(closeCode: <span class="type">CloseCode</span>.<span class="property">normal</span>.<span class="property">rawValue</span>)
</code></pre><h2>Cancel subscriptions with GraphQL</h2><p>When using GraphQL with subscriptions Apollo protocol handles all the heavy duty work behind the scenes. Clients can get immediate data changes from the server.</p><p>In Apollo iOS SDK library subscriptions are <code>Cancellable</code> <a href="https://github.com/apollographql/apollo-ios/Sources/Apollo/Cancellable.swift">protocol</a> types. It is an object that can be cancelled when in progress and it has just one method <code>cancel</code>.</p><p>In order to clean up after GraphQL subscriptions are not needed anymore the easiest way is to keep track of all subscriptions and cancel when needed or do the cleanup within object <code>deinit</code> method.</p><pre><code><span class="keyword">var</span> subscriptions: [<span class="type">Cancellable</span>]

<span class="comment">// ...</span>

<span class="keyword">let</span> newPricesSubcriprion = <span class="type">ApolloClient</span>.<span class="call">subscribe</span>(<span class="type">NewPricesSubscription</span>()) { ... }

<span class="comment">// ...</span>

subscriptions.<span class="call">forEach</span> { subscription <span class="keyword">in</span>
    subscription.<span class="call">cancel</span>()
}
</code></pre><h2>TL;DR</h2><p>When working with WebSockets we need to remember to close connections and clean up. Forgetting to do so we can run into multiple issues which can later be hard to debug and understand.</p><p>We can use WebSockets in our Swift projects in multiple ways and each one requires a different approach to close the connection. But most importantly as WebSocket protocol tells us we need to do it either connection is closed from the user or server side.</p><h2>Links</h2><ul><li><a href="https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76#section-6">Closing the connection from WebSocket protocol</a></li><li><a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/3181200-cancel">Cancel URLSessionWebSocketTask</a></li><li><a href="https://github.com/daltoniam/Starscream">Starscream library documentation</a></li><li><a href="https://www.apollographql.com/docs/ios/subscriptions/">GraphQL subscriptions</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/ignorance-of-cache</guid><title>Ignorance of the URLRequest cache</title><description>Caching and invalidating cache is one of the hardest things in computer science [according to](https://martinfowler.com/bliki/TwoHardThings.html) Martin Fowler. Recently I was dealing with cache and invalidating it in three of my applications. I had some serious issues with that and wanted to dig deeper. This time we will discuss  `URLRequest` caching strategies and how to use it in your apps. I will share some of my learnings and problems that I found.</description><link>https://kristaps.me/blog/ignorance-of-cache</link><pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Caching and invalidating cache is one of the hardest things in computer science <a href="https://martinfowler.com/bliki/TwoHardThings.html">according to</a> Martin Fowler.</p><p>Recently I was dealing with cache and invalidating it in three of my applications. I had some serious issues with that and wanted to dig deeper. This time we will discuss <code>URLRequest</code> caching strategies and how to use it in your apps. I will share some of my learnings and problems that I found.</p><h2>Creating URLRequest with cache</h2><p>Not so many of us use caching strategy when creating <code>URLRequest</code> and hitting the network. If the server you‚Äôre accessing doesn‚Äôt have caching strategy implemented then making network requests can cause data corruption in your apps.</p><p>I had these issues with just a simple request and getting new <code>JSON</code> data from the network. For some reason, <code>URLRequest</code> thought that nothing has changed and returned data from internal app cache rather than the network.</p><p>The reason for this is that <code>NSURLCache</code> is set for the application by default according to the <a href="https://developer.apple.com/documentation/foundation/urlcache#//apple_ref/occ/clm/NSURLCache/setSharedURLCache:">documentation</a>. The cache will be purged when the device runs low on disk space, but mostly this isn‚Äôt the case. You can control <code>NSURLCache</code> behavior when launching the app but let‚Äôs leave that for another post.</p><h2>Caching strategies</h2><p><code>NSURLRequest</code> has a <a href="https://developer.apple.com/documentation/foundation/nsurlrequest/1407944-cachepolicy">property</a> <code>cachePolicy</code> which sets the caching strategy for the request you‚Äôre creating. It is an enum and has several <a href="https://developer.apple.com/documentation/foundation/nsurlrequest/cachepolicy">choices</a> defined as constants:</p><ul><li><code>case useProtocolCachePolicy</code> &gt; Use the caching logic defined in the protocol implementation, if any, for a particular URL load request.</li><li><code>case reloadIgnoringLocalCacheData</code> &gt; The URL load should be loaded only from the originating source.</li><li><code>case reloadIgnoringLocalAndRemoteCacheData</code> &gt; Ignore local cache data, and instruct proxies and other intermediates to disregard their caches so far as the protocol allows.</li><li><code>static var reloadIgnoringCacheData: NSURLRequest.CachePolicy</code> &gt; Replaced by NSURLRequest.CachePolicy.reloadIgnoringLocalCacheData</li><li><code>case returnCacheDataElseLoad</code> &gt; Use existing cache data, regardless of age or expiration date, loading from originating source only if there is no cached data.</li><li><code>case returnCacheDataDontLoad</code> &gt; Use existing cache data, regardless of age or expiration date, and fail if no cached data is available.</li><li><code>case reloadRevalidatingCacheData</code> &gt; Use cache data if the origin source can validate it; otherwise, load from the origin</li></ul><p>If you just read the documentation then all of these constants look confusing and hard to choose the right now. Let‚Äôs try to understand which of the caching policy you need to choose for your <code>URLRequest</code> and when.</p><h2>Which one to choose?</h2><p>The default policy for URL load requests is <code>useProtocolCachePolicy</code>. If a cached response does not exist then it is fetched from the originating source. Otherwise, if a response doesn‚Äôt tell to revalidate then a response is returned from the cache. For more detailed information you can go to <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13">RFC 2616 detailed documentation</a>. Here is an image to illustrate how this policy works.</p><img src="https://kristaps.me/assets/img/cache/cache-determination.png" alt="How useProtocolCachePolicy works"/><p>Option <code>reloadIgnoringLocalCacheData</code> ignores the local cache and <code>reloadIgnoringLocalAndRemoteCacheData</code> ignores local and remote cache.</p><p>With <code>returnCacheDataElseLoad</code> you tell to use cache no matter how out of date it is. If the cached request doesn‚Äôt exist it will be loaded from the network.</p><p>Option <code>returnCacheDataDontLoad</code> is the most confusion one. It means offline mode. Only cached data will be used and it won‚Äôt load from the network.</p><p>But the story doesn‚Äôt end here, if we check <code>reloadRevalidatingCacheData</code> <a href="https://developer.apple.com/documentation/foundation/nsurlrequest/cachepolicy/reloadrevalidatingcachedata">documentation</a> then we see that previous versions than macOS 15, iOS 13, watchOS 6, and tvOS 13 don‚Äôt implement this constant. <a href="https://twitter.com/mattt">Mattt</a> was <a href="https://nshipster.com/nsurlcache/">warning</a> us about that years ago. There is a <a href="http://openradar.appspot.com/radar?id=1755401">radar</a> opened in May 2012.</p><p>So which one to choose? There isn‚Äôt a right or wrong answer, but the rule of thumb is - if you want partial cache with default settings then choose <code>useProtocolCachePolicy</code>. If you want to load a request without cache then choose either <code>reloadIgnoringLocalCacheData</code> or <code>reloadIgnoringLocalAndRemoteCacheData</code>.</p><h2>TL;DR</h2><p>Handling cache and cache invalidation are one of the hardest topics in Computer Science. In iOS, macOS, tvOS and watchOS it isn‚Äôt easy and straight forward. The official documentation is confusing and isn‚Äôt clear how it works behind the scenes.</p><p><code>URLRequest</code> has a <a href="https://developer.apple.com/documentation/foundation/nsurlrequest/1407944-cachepolicy">property</a> <code>cachePolicy</code> which sets the caching strategy for the request.</p><p>For most of the cases default <code>useProtocolCachePolicy</code> option is what you want. If you want to avoid cache then one of <code>reloadIgnoringLocalCacheData</code> or <code>reloadIgnoringLocalAndRemoteCacheData</code> is the right one you have to choose.</p><h2>Links</h2><ul><li><a href="https://developer.apple.com/documentation/foundation/nsurlrequest/cachepolicy">URLRequest Cache Policy documentation</a></li><li><a href="https://nshipster.com/nsurlcache">Article about NSURLCache by NSHipster</a></li><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13">Caching in HTTP</a></li><li><a href="https://www.fabernovel.com/en/engineering/how-to-leverage-http-cache-in-ios">How to leverage HTTP cache in iOS</a></li><li><a href="https://codewithchris.com/preventing-nsurlconnection-cache-issues/">Preventing NSURLConnection Cache Issues</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/graphql-advances-with-swift</guid><title>GraphQL Advances when fetching data in iOS with Swift and Apollo SDK</title><description>In previous articles, we discussed how to [get started](/graphql-ios-swift/) with  and use [subscriptions](/graphql-subscriptions/) with GraphQL in iOS (and iPadOS, tvOS, and macOS) using Swift programming language.</description><link>https://kristaps.me/blog/graphql-advances-with-swift</link><pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In previous articles, we discussed how to <a href="https://kristaps.me/graphql-ios-swift/">get started</a> with and use <a href="https://kristaps.me/graphql-subscriptions/">subscriptions</a> with GraphQL in iOS (and iPadOS, tvOS, and macOS) using Swift programming language.</p><p>This time I want to discuss some advanced topics using GraphQL with Apollo SDK and Swift: usage of GraphQL fragments and Swift scalar types; optionality with GraphQL and it‚Äôs pros and cons.</p><h2>Using fragments</h2><p>At first, what is a <strong>fragment</strong> in GraphQL? It is a reusable piece of the query. For instance, if you need the same field in multiple queries you can extract that into a reusable piece called <a href="https://graphql.org/learn/queries/#fragments">GraphQL fragment</a>.</p><pre><code class="language-no-highlight">query Users($id: userID) {
  users(id $id) {
    ...UserDetails
    followers {
      ...UserDetails
    }
  }
}

fragment UserDetails on User {
  id
  firstName
  lastName
  email
}
</code></pre><p>When you use fragments in your Swift project queries, Apollo iOS SDK <a href="https://www.apollographql.com/docs/ios/fragments/">generates separate result types</a>. It is a good way to divide UI, for instance, UITableViewCell or UICollectionViewCell. This way a child view can be reused and only depends on the parent - UITableView or UICollectionView.</p><h2>GraphQL scalar types in Swift</h2><p>In GraphQL a <a href="https://graphql.org/learn/schema/#scalar-types">scalar type</a> is a field that has to resolve to some concrete type. In Swift language it can be <code>Date</code> or <code>enum</code>. Once you download schema JSON file you can see it like this:</p><pre><code class="language-no-highlight">"type": {
  "kind": "SCALAR",
  "name": "Date",
  "ofType": null
}
</code></pre><p>Using Apollo code generation argument <code>--passthroughCustomScalars</code> you can use your own types for custom scalars.</p><p>Swift <code>Date</code> type from Foundation framework is a good example. If you want to convert GraphQL Date type to Swift using Apollo iOS SDK, just pass <code>--passthroughCustomScalars</code> when generating the Swift code.</p><p>You can use custom formats for <code>Date</code> like <code>ISO8601</code> or use milliseconds. You just need to extend <code>Date</code> type and conform to <code>JSONDecodable</code> which requires implementing the initializing method.</p><pre><code><span class="keyword">extension</span> <span class="type">Date</span>: <span class="type">JSONDecodable</span> {
  <span class="keyword">public init</span>(jsonValue value: <span class="type">JSONValue</span>) <span class="keyword">throws</span> {
    <span class="keyword">guard let</span> isoString = value <span class="keyword">as</span>? <span class="type">String</span> <span class="keyword">else</span> {
      <span class="keyword">throw</span> <span class="type">JSONDecodingError</span>.<span class="call">couldNotConvert</span>(value: value, to: <span class="type">Date</span>.<span class="keyword">self</span>)
    }
    
    <span class="keyword">var</span> tmpDate: <span class="type">Date</span>?
    <span class="keyword">if</span> isoString.<span class="property">count</span> == <span class="number">17</span> {
      tmpDate = <span class="type">DateFormatter</span>.<span class="type">ISO8601short</span>.<span class="call">date</span>(from: isoString)
    } <span class="keyword">else if</span> isoString.<span class="property">count</span> == <span class="number">24</span> {
      tmpDate = <span class="type">DateFormatter</span>.<span class="type">ISO8601Milliseconds</span>.<span class="call">date</span>(from: isoString)
    } <span class="keyword">else</span> {
      tmpDate = <span class="type">DateFormatter</span>.<span class="type">ISO8601</span>.<span class="call">date</span>(from: isoString)
    }
    
    <span class="keyword">guard let</span> date = tmpDate <span class="keyword">else</span> {
      <span class="keyword">throw</span> <span class="type">JSONDecodingError</span>.<span class="call">couldNotConvert</span>(value: value, to: <span class="type">Date</span>.<span class="keyword">self</span>)
    }
    <span class="keyword">self</span> = date
  }
}
</code></pre><p><code>ISO8601short</code>, <code>ISO8601Milliseconds</code> and <code>ISO8601</code> declared in DateFormatter type extension as static instance properties.</p><h2>Dealing with optionals with GraphQL</h2><p>I think that optional type properties is one of the biggest downsides of the GraphQL with Apollo iOS SDK. It is so because in many cases GraphQL type field can not be specified, so it can be null.</p><p>When you are <a href="https://www.apollographql.com/docs/ios/fetching-queries/">fetching queries</a> with Apollo iOS SDK <code>GraphQLResult</code> type has optional property <code>data</code>. This property is a typed result data which means it has fetched type properties and those can be also optional.</p><p>This optional hell can be solved using extension for a specific type and add optional initializer:</p><pre><code><span class="keyword">extension</span> <span class="type">User</span> {  
  <span class="keyword">init</span>?(<span class="keyword">_</span> user: <span class="type">UsersQuery</span>.<span class="type">Data</span>.<span class="type">User</span>) {
    <span class="keyword">guard let</span> userID = <span class="type">Int</span>(user.<span class="property">id</span>) <span class="keyword">else</span> {
      <span class="keyword">return nil</span>
    }
    
    <span class="keyword">self</span>.<span class="property">id</span> = userID
    <span class="keyword">self</span>.<span class="property">firstName</span> = user.<span class="property">firstName</span>
    <span class="keyword">self</span>.<span class="property">lastName</span> = user.<span class="property">lastName</span>
    <span class="keyword">self</span>.<span class="property">email</span> = user.<span class="property">email</span>
  }
}
</code></pre><p>You can use this initializer when you fetch data and transform it from GraphQL types to your app models. By abstracting this with another layer you can hide it away and return, let‚Äôs say, a Swift Result type.</p><h2>TL;DR</h2><p>GraphQL fragments is a great way to extract some parts of the query code and reuse it in multiple places. Using Apollo iOS SDK it will generate Swift code for your apps and projects.</p><p>Converting types like GraphQL <code>Date</code> to Swift <code>Date</code> is a great hidden gem in Apollo iOS SDK. All you need to do is to add argument <code>--passthroughCustomScalars</code> during code generation.</p><p>Dealing with optionals can be a pain with GraphQL in your Swift projects. One way to improve the code base is to use custom initializers for your models.</p><h2>Links</h2><ul><li><a href="https://www.apollographql.com/docs/ios/fragments/">Using GraphQL fragments</a></li><li><a href="https://github.com/apollographql/apollo-tooling">Tooling for development and production Apollo workflows</a></li><li><a href="https://www.apollographql.com/docs/ios/fetching-queries/">Fetching queries</a></li><li><a href="https://blog.apollographql.com/mapping-graphql-types-to-swift-aa85e5693db4">Mapping GraphQL types to Swift</a></li><li><a href="https://github.com/apollographql/apollo-ios/issues/450">Add support for Date Type in Apollo iOS SDK</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/graphql-subscriptions</guid><title>How to use subscriptions with GraphQL using Apollo iOS SDK and Swift</title><description>GraphQL main functionality is to fetch and update data from the server. In addition to that subscriptions allow us to listen and to send messages from and to server in real-time. It is similar to regular queries, but the answer will be received when an event happens either on the server or on the client. Apollo iOS SDK library supports subscriptions and it is powered by the Swift WebSocket library [Starscream](/websockets-swift/) behind the scenes to connect to the server. Let's look at how to set it up and start using it.</description><link>https://kristaps.me/blog/graphql-subscriptions</link><pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>GraphQL main functionality is to fetch and update data from the server. In addition to that subscriptions allow us to listen and to send messages from and to server in real-time. It is similar to regular queries, but the answer will be received when an event happens either on the server or on the client.</p><p>Apollo iOS SDK library supports subscriptions and it is powered by the Swift WebSocket library <a href="https://kristaps.me/websockets-swift/">Starscream</a> behind the scenes to connect to the server. Let's look at how to set it up and start using it.</p><h2>Schema and code generation</h2><p>Subscriptions are already supported once you download your schema file from the GraphQL server and perform the code generation. It will generate all the subscriptions using <code>GraphQLSubscription</code> protocol which allows passing parameters to subscription you want to implement.</p><p>Let‚Äôs imagine we have a chat application and GraphQL server can get messages for a specific thread as soon as they are sent. We need to create a GraphQL query in our <code>.graphql</code> file like this:</p><pre><code>subscription <span class="call">messagesReceived</span>(<span class="property">$threadID</span>: <span class="type">ID</span>!) {
  <span class="call">messagesReceived</span>(threadID: <span class="property">$threadID</span>) {
    id
    date
    text
    author
  }
}
</code></pre><p>Once this is done we use Apollo iOS SDK to auto-generate type-safe Swift code. Which can be used in our app.</p><p>You can read more about using Apollo iOS SDK in my previous <a href="https://kristaps.me/graphql-ios-swift/">post</a>.</p><h2>Setting up the client</h2><p>Setting up the Apollo client using subscriptions can be the trickiest step, so let's go through it.</p><p>First, we need to create <code>WebSocketTransport</code> instance to send GraphQL subscription operations to the server.</p><pre><code><span class="keyword">let</span> webSocketTransport: <span class="type">WebSocketTransport</span> = {
  <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"ws://messaging.app/websocket"</span>)!
  <span class="keyword">let</span> request = <span class="type">URLRequest</span>(url: url)
  <span class="keyword">return</span> <span class="type">WebSocketTransport</span>(request: request)
}()
</code></pre><p>Then an HTTP transport instance will help us to use queries and mutations.</p><pre><code><span class="keyword">let</span> httpTransport = <span class="type">HTTPNetworkTransport</span>(url: <span class="type">URL</span>(string: <span class="string">"http://messaging.app/graphql"</span>)!)
</code></pre><p>A split network transport allows the use of HTTP Transport and WebSocket transport protocols. That enables us to avoid any potential issues of having multiple client objects.</p><pre><code><span class="keyword">let</span> splitNetworkTransport = <span class="type">SplitNetworkTransport</span>(
  httpNetworkTransport: httpTransport, 
  webSocketNetworkTransport: webSocketTransport
)
</code></pre><p>Then we create the Apollo client using network transport type which in this case is <code>SplitNetworkTransport</code>.</p><pre><code><span class="keyword">let</span> apolloClient = <span class="type">Apollo</span>(networkTransport: splitTransport)
</code></pre><h2>Using the subscription</h2><p>After we have created the Apollo client with subscription capabilities we can use it in our app to listen when a new message has been created to the specific thread.</p><pre><code><span class="keyword">let</span> receivedMessagesSubscription = <span class="type">MessagesReceivedSubscription</span>(id: threadID)
<span class="keyword">let</span> messagesSubsription = apolloClient.<span class="call">subscribe</span>(subscription: receivedMessagesSubscription) {[<span class="keyword">weak self</span>] result <span class="keyword">in
  switch</span> result {
  <span class="keyword">case</span> .<span class="dotAccess">success</span>(<span class="keyword">let</span> graphQLResult):
      <span class="keyword">if let</span> message = graphQLResult.<span class="property">data</span>.<span class="property">message</span> {
        <span class="call">print</span>(<span class="string">"Message received</span> \(message)<span class="string">"</span>)			
      }
  <span class="keyword">case</span> .<span class="dotAccess">failure</span>(<span class="keyword">let</span> error):
      <span class="call">print</span>(<span class="string">"Failed to subscribe</span> \(error)<span class="string">"</span>)
  }
}
</code></pre><p>Each time when a message has been sent, code inside closure is executed with new data.</p><h2>TL;DR</h2><p>GraphQL is not only for fetching data from the server and updating data on the server. You can be using GraphQL subscription feature to listen and send real-time messages using WebSockets.</p><p>Apollo iOS SDK library has the functionality to support subscriptions in your Swift applications. It is using WebSocket library Starscream behind the scenes to offload this cumbersome task. By leveraging code generation you can use strictly typed Swift code to interact with your GraphQL server in real-time in your iOS, iPadOS, macOS and tvOS apps.</p><h2>Links</h2><ul><li><a href="https://www.apollographql.com/docs/ios/subscriptions/">Apollo iOS SDK library subscriptions documentation</a></li><li><a href="https://stackoverflow.com/questions/51720378/how-to-implement-graphql-subscription-using-apollo-ios-client">Some use cases setting up Apollo iOS SDK</a></li><li><a href="https://www.apollographql.com/docs/react/data/subscriptions/">Apollo SDK official subscriptions documentation</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/apple-passkit</guid><title>What is PassKit and how to use it?</title><description>Apple [PassKit](https://developer.apple.com/documentation/passkit) framework is responsible for Apple Pay and managing user passes in Wallet app. This time let‚Äôs talk about passes, how to create and distribute them. Wallet app allows iOS users to organize boarding passes, tickets or gifts, business and loyalty cards. In short, passes are digital representations of information that usually is printed on paper or used as plastic cards.</description><link>https://kristaps.me/blog/apple-passkit</link><pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Apple <a href="https://developer.apple.com/documentation/passkit">PassKit</a> framework is responsible for Apple Pay and managing user passes in Wallet app.</p><p>This time let‚Äôs talk about passes, how to create and distribute them. Wallet app allows iOS users to organize boarding passes, tickets or gifts, business and loyalty cards. In short, passes are digital representations of information that usually is printed on paper or used as plastic cards.</p><h2>Pass building blocks</h2><p>Passes are created as packages (or bundles) with extension <code>.pass</code> and consists of:</p><ul><li><code>pass.json</code> - file that defines the pass, image assets, and other metadata;</li><li><code>manifest.json</code> - file that describes files inside the pass and has SHA1 checksums of each of the files</li><li>image assets<ul><li>background of the pass</li><li>logo - the logo in the pass header</li><li>icon - small icon for the pass</li><li>strip - image strip background behind the primary fields</li></ul></li></ul><img src="https://kristaps.me/assets/img/passkit/pass-in-wallet-app.jpg" alt="Pass in Wallet app"/><h3>Required fields creating a pass</h3><p>When creating a pass you need to provide the <a href="https://developer.apple.com/documentation/passkit/pkpass/1618783-passtypeidentifier">pass type identifier</a> and <a href="https://developer.apple.com/documentation/passkit/pkpass/1618788-serialnumber">serial number</a>. Type identifier is a String value using reverse DNS style - for example, <code>pass.com.example.loyalty-card</code>. Serial number is a string value that has a unique value in the scope of the pass type, like a membership number or a ticket identifier.</p><p>Other mandatory fields are:</p><ul><li>format version - file format version, usually need to use 1 (number)</li><li>team identifier - unique 10-character identifier provided by Apple which you can find out from developer.apple.com portal</li><li>organization name - displayed on the lock screen</li><li>description - helps to make the pass accessible by VoiceOver</li></ul><h3>Different flavors of the pass</h3><p>Passes can have different visual appearance:</p><ul><li><code>boardingPass</code> - pass for a flight, train, bus or any other type of transit</li><li><code>coupon</code> - coupons, special offers or discounts</li><li><code>eventTicket</code> - pass to enter any kind of event</li><li><code>storeCard</code> - loyalty card style</li><li><code>generic</code> - style appropriate for any pass</li></ul><p>Wallet app is using different layout to each of these styles. It is much easier for your users to distinguish passes and find the right one faster.</p><h2>Creating passes</h2><p>Creating a pass is the first step of the pass lifecycle. It happens on the server side and should be cryptographically signed and compressed. Signing process requires several steps and Apple has a <a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/PassKit_PG/Creating.html#//apple_ref/doc/uid/TP40012195-CH4-SW1">manual</a> or you can use a third party library and provide necessary certificates. By signing your passes your users can be sure that the pass is correct and not fake.</p><p>When you debug passes in iOS Simulator Wallet app you can see any errors in the system log which you can view in Console app.</p><h2>Distributing passes</h2><p>After creating, signing and compressing a pass into a bundle you can distribute it in several ways:</p><ul><li>sending with an email;</li><li>using file sharing options like iCloud or AirDrop;</li><li>using Add to Wallet button <a href="https://developer.apple.com/documentation/passkit/pkaddpassbutton">provided</a> by Apple.</li></ul><h2>Using passes</h2><p>Now you can provide not only barcode information but NFC data as well. When using NFC your users can simply hold the authorized device near the NFC reader and authorize the pass regardless - whether it's a flight boarding, student ID, gym membership or even a ticket for the <a href="https://kristaps.me/wwdc-2019/">WWDC</a>.</p><img src="https://kristaps.me/assets/img/passkit/scanning-pass-apple-watch.jpg" alt="Using pass from Apple Watch"/><h2>TL;DR</h2><p>Apple PassKit framework helps to create, distribute and manage passes that usually are printed on paper or plastic.</p><p>It is a secure way to provide a more modern way to your users using Wallet app on their iPhones or Apple Watches.</p><h2>Links</h2><ul><li><a href="https://developer.apple.com/documentation/passkit">PassKit documentation</a></li><li><a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/PassKit_PG/index.html#//apple_ref/doc/uid/TP40012195-CH1-SW1">Archived Wallet Developer Guide</a></li><li><a href="https://developer.apple.com/design/human-interface-guidelines/wallet/overview/pass-design/">Wallet Human Interface Guidelines</a></li><li><a href="https://www.youtube.com/watch?v=g5KRJgO7yJE">Video how to create passes</a></li><li>Outdated but still relevant tutorial, <a href="https://www.raywenderlich.com/2855-beginning-passbook-in-ios-6-part-1-2">Part 1</a> and <a href="https://www.raywenderlich.com/2853-beginning-passbook-in-ios-6-part-2-2">Part 2</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/dark-side-appstore</guid><title>Dark Side of the App Store</title><description>I am an Apple fanboy and I admit that. But one of the most frustrating things in being an app developer is dealing with the App Store review and compliance teams. This time I would like to share my experience with these problems.</description><link>https://kristaps.me/blog/dark-side-appstore</link><pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>I am an Apple fanboy and I admit that. But one of the most frustrating things in being an app developer is dealing with the App Store review and compliance teams. This time I would like to share my experience with these problems.</p><p>Even Apple‚Äôs former app approval chief has <a href="https://www.theverge.com/2019/5/29/18643868/apple-app-store-approval-process-antitrust-phillip-shoemaker-interview">said</a> that he is ‚Äòreally worried‚Äô about company‚Äôs anticompetitive behavior.</p><h2>App Store review rejections</h2><p>Quite recently I jumped on a project which promotes vegan food places in Latvia. All these food spots are validated by the project manager and have to have at least three proper vegan meal options. I thought it would be a great idea to make an app for that, because on the go it is always easier to use it from your phone. <a href="https://apps.apple.com/lv/app/augi-draugi/id1475145259">App</a> adds extra features like navigation, searchable list and more features that are not available on the <a href="https://augidraugi.lv/">website</a>.</p><p>So far this app has been released with 5 version updates each time adding extra features to it. People love and use it a lot. Even data shows that app retention, ratings and feedback from social media is very good.</p><img src="https://kristaps.me/assets/img/dark-side-appstore/rejected-app-appstoreconnect.png" alt="Reject app"/><p>But sadly Apple App Store review team thinks differently. They have rejected last update due to <em>minimum functionality</em>. I had a call with Apple representative and they even explained that approving this app has been a mistake by them.</p><blockquote><p><strong><a href="https://developer.apple.com/app-store/review/guidelines/#4.2">Guideline 4.2 - Design - Minimum Functionality</a></strong> We found that the usefulness of your app is limited by the minimal amount of content or features it includes.</p></blockquote><p>App is free and it does not include any adds. It uses only iOS standard UI elements. App Store has plenty of scams and very bad apps so treating an app which complies to all user interface guidelines, supports new iOS 13 and is widely used is not understandable to me. Not to mention that this project tries to solve environmental and animal rights issues which is a big topic right now.</p><h2>App Store Scams</h2><img src="https://kristaps.me/assets/img/dark-side-appstore/copycat-search.png" alt="Copycat"/><p>For quite a while I have been working on a <a href="https://apps.apple.com/lv/app/dodies-lv/id1080800199">project</a> which lists hiking paths in the Baltic states. Most of them have been reviewed by the project team and have great pictures. App has been opensourced in <a href="https://github.com/fassko/Dodies.lv">Github</a> and everyone can participate to it. Recently I found that someone has copied this whole app and released it in App Store with the same name. I understand it is public in Github, but how could App Store team let it go trough the review process?</p><img src="https://kristaps.me/assets/img/dark-side-appstore/copycat.png" alt="Copycat"/><p>I filed a complaint on August 12 - it has been more than a month now. There was an email conversation, but Apple can‚Äôt reach out to this copycat or take that app down. It is such an obvious copycat that even my screenshots have been copied.</p><h2>App Store Payments and Revenue Cut</h2><p>In my own company <a href="https://www.qminder.com/">Qminder</a> I have had numerous issues with App Store review team about app revenue sharing. In short, our clients pay subscription fee for accessing the system. They can opt in to use iOS apps, but it is not mandatory at all.</p><p>App Store guidelines state that if you process any payments trough App Store you need to use Apple‚Äôs provided payment system and you get only 70%. Rest 30% goes to Apple supporting publishing apps, processing payment cards and more. That is completely understandable, but what if customers don‚Äôt use apps from App Store right now and opt in future? Or use the app now and stop using after a while?</p><p>I have been talking with App Store review team a few times: the solution is to not have any marks of registration or links in your apps. Otherwise you lose 30% of your revenue since you have the same pricing on the App Store and outside of it. There have been <a href="https://www.theverge.com/2018/12/28/18159373/netflix-in-app-subscriptions-iphone-ipad-ios-apple">news</a> that because of this issue Netflix has stopped to process new sign ups via App Store. Amazon only has a sign-in form in their apps without any information how to sign up and are now introducing <a href="https://twitter.com/stevemoser/status/1174408011965747201">credits system</a>. The list goes on and on.</p><p>Apple is trying to <a href="https://www.theverge.com/2019/5/29/18644045/apple-defends-app-store-policies-antitrust-eu-spotify">defend themselves</a> by creating a new page about <a href="https://www.apple.com/ios/app-store/principles-practices/">App Store principles and practices</a>. Some people like how they speak openly, but others pointed that they have failed to address any of real issues what developers are facing.</p><h2>TL;DR;</h2><p>App Store review process is one of the most painful parts of iOS development. It is done by real humans and that means it can be inconsistent and error prone.</p><p>Another part where App Store team at Apple isn‚Äôt supportive to the developers is revenue sharing. 30% of all payments processed trough App Store go to Apple supporting the app publishing and processing payments. It is a huge percentage especially if your service can be used without apps.</p><p>On the good note app review process has been improved in recent years, but there is still a long way to go to make it smooth, consistent and fair for everyone.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/graphql-ios-swift</guid><title>Using GraphQL in iOS with Swift</title><description>GraphQL is an alternative to the commonly used REST API approach. When using [GraphQL](https://graphql.org/) you only get one single endpoint to the server and through that endpoint you need to specify the exact data you need. It was created by Facebook in 2012 and open-sourced in 2015.</description><link>https://kristaps.me/blog/graphql-ios-swift</link><pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>GraphQL is an alternative to the commonly used REST API approach. When using <a href="https://graphql.org/">GraphQL</a> you only get one single endpoint to the server and through that endpoint you need to specify the exact data you need. It was created by Facebook in 2012 and open-sourced in 2015.</p><p>Using GraphQL in your Swift applications is not that hard. The easiest way is to use <a href="https://github.com/apollographql/apollo-ios">Apollo iOS</a> client which recently has seen a lot of great improvements and bug fixes. Apollo iOS is a strongly-typed, caching GraphQL client for iOS, macOS, iPadOS, watchOS, and tvOS. It is written in Swift programming language.</p><h2>GraphQL vs REST</h2><p>REST API exposes one endpoint for each specific type of information. For example:</p><ul><li><code>/visitors</code> - list of all visitors</li></ul><ul><li><code>/visitors/ID/</code> - concrete visitor details with ID</li></ul><p>Imagine you would like to get a visitor by his name. At first, you need to get the visitors list and search by name. Once you find specific visitor ID you can get the rest of the visitor details from another endpoint.</p><p>Using GraphQL you could do this with just one request to the server. You just need to specify what kind of data would you like to get in declarative GraphQL syntax:</p><pre><code>{
  <span class="call">allVisitors</span>(name: <span class="string">"John Appleseed"</span>) {
    id
    name
    reasonOfVisit
    isServed
    signInTime
    feeedback
    ...
  } 
}
</code></pre><p>This is just one simple example. In reality, you could get multiple levels of data with just one call to the server.</p><h2>Setting up GraphQL using Swift in iOS</h2><p>You can use GraphQL in your iOS, iPadOS, macOS, watchOS and tvOS apps. The easiest way is to use <a href="https://github.com/apollographql/apollo-ios">Apollo iOS SDK</a> which is a strongly-typed, caching GraphQL client. It is written in Swift programming language.</p><h3>Installation</h3><p>To set up Apollo client you need to <a href="https://www.apollographql.com/docs/ios/installation/#installing-the-apollo-framework">install Apollo framework</a> and <a href="https://www.apollographql.com/docs/ios/installation/#adding-a-schema-file-to-your-target-directory">generate schema file</a> which describes how you can get information from the server and add to your Xcode app target.</p><p>Then you <a href="https://www.apollographql.com/docs/ios/installation/#creating-graphql-files-with-your-queries-or-mutations">can create</a> <code>.graphql</code> files with your queries or mutations on how you would like to get or change data from the server. After that, you need to add <a href="https://www.apollographql.com/docs/ios/installation/#adding-a-code-generation-build-step">code generation</a> build step in Xcode build process to generate type-safe Swift code to use for communication with your server.</p><p>Build your Xcode app target and <a href="https://www.apollographql.com/docs/ios/installation/#adding-the-generated-api-file-to-your-target">add generated</a> API file to use it.</p><h3>Communicate with the server</h3><p>Once the installation process is done you can set up <code>ApolloClient</code> instance and point to your GraphQL server.</p><pre><code><span class="keyword">import</span> Apollo

<span class="keyword">let</span> graphQLClient = <span class="type">ApolloClient</span>(url: <span class="type">URL</span>(string: <span class="string">"http://localhost:8080/graphql"</span>)!)
</code></pre><p>Then you can use <code>graphQLClient</code> to fetch data and process query results.</p><pre><code><span class="keyword">let</span> allVisitorsQuery = <span class="type">AllVisitorsQuery</span>(name: <span class="string">"John"</span>)

graphQLClient.<span class="call">fetch</span>(query: allVisitorsQuery) { result <span class="keyword">in
  switch</span> result {
  <span class="keyword">case</span> .<span class="dotAccess">failure</span>(<span class="keyword">let</span> error):
    <span class="call">print</span>(<span class="string">"Something bad happened</span> \(error)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">success</span>(<span class="keyword">let</span> graphQLResult):
    <span class="keyword">guard let</span> john = graphQLResult.<span class="property">data</span>?.<span class="property">visitor</span> <span class="keyword">else</span> {
      <span class="keyword">return</span>
    }
    
    <span class="call">print</span>(john)  
}
</code></pre><p>This is just a simple example in some of the next posts we will look into how we can mutate data and even use Websockets subscriptions.</p><h2>GraphQL pros and cons</h2><p>Every technology has its pros and cons. You need to understand if the tradeoffs are worth switching away from regular REST API.</p><h3>Pros</h3><p>GraphQL makes it faster to implement, change and maintain your applications. You don‚Äôt need to communicate every smaller detail with your backend or even create new endpoints.</p><p>Using Apollo iOS framework helps a lot to use GraphQL in your Swift applications. It does support iOS, iPadOS, watchOS, macOS and tvOS. You can use Swift type safety and other great features like Result type and more.</p><p>Lately, Apollo iOS framework has seen a lot of great updates and more bugs are being fixed. More and more companies switch to use GraphQL not only in web, but their mobile applications too.</p><h3>Cons</h3><p>Using GraphQL is not that straight forward especially if you are used to REST API approach. Switching your thinking and adapting a new way can take some time. It also adds an extra layer between server and your apps which you need to maintain in the future.</p><p>With Apollo iOS SDK you need to be very careful with <a href="https://www.apollographql.com/docs/ios/watching-queries/">caching</a>. There are several ways to deal with cache and when to not cache at all. Just to be sure to check out official documentation before or if you run into any data inconsistency issues.</p><p>Apollo helps a lot to use GraphQL with Swift, but one downside is optionals. If you have the freedom to tell what kind of data you want from the server that comes with optionality tradeoff. It is a minor issue, just you need to deal with that when you construct your models and get data back from the server.</p><h2>TL;DR</h2><p>GraphQL is a modern way to communicate with your server. It can replace commonly used REST API approach. With GraphQL you communicate with the backend via just one endpoint using declarative syntax.</p><p>Using GraphQL in your Swift applications for iOS, iPadOS, watchOS, macOS and tvOS is easy using Apollo framework. It is officially supported by GraphQL community and lately, it has been well maintained and supported.</p><h2>Links</h2><ul><li>Official iOS GraphQL <a href="https://www.apollographql.com/docs/ios/">documentation</a> and <a href="https://github.com/apollographql/apollo-ios">repository</a></li><li><a href="https://troubled.pro/2019/02/graphql.html">Blog post</a></li><li>Series of articles by Big Nerd Ranch. <a href="https://www.bignerdranch.com/blog/using-graphql-in-production-ios-applications-part-1/">Part 1</a>, <a href="https://www.bignerdranch.com/blog/using-graphql-in-production-ios-applications-part-2/">Part 2</a> and <a href="https://www.bignerdranch.com/blog/using-graphql-in-production-ios-applications-part-3/">Part 3</a></li><li>CocoaHeads Stockholm <a href="https://www.youtube.com/watch?v=ArMgdV-VwJ8">presentation</a></li><li>Swift Summit <a href="https://www.skilled.io/u/swiftsummit/interfacing-with-graphql-in-swift">presentation</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/websockets-ios-13-swift</guid><title>Websockets in iOS 13 using Swift and Xcode 11</title><description>Websockets in iOS 13, macOS 10.15, tvOS 13, watchOS 6 and Mac Catalyst have gained first-class citizen status in networking stack. Apple has finally added support in [URLSession](https://developer.apple.com/documentation/foundation/urlsessionwebsockettask) and for lower level in [Network.framework](https://developer.apple.com/documentation/network/nwprotocolwebsocket) for their platforms. This time we will focus on implementing Websockets using URLSession capabilities.</description><link>https://kristaps.me/blog/websockets-ios-13-swift</link><pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Websockets in iOS 13, macOS 10.15, tvOS 13, watchOS 6 and Mac Catalyst have gained first-class citizen status in networking stack. Apple has finally added support in <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask">URLSession</a> and for lower level in <a href="https://developer.apple.com/documentation/network/nwprotocolwebsocket">Network.framework</a> for their platforms.</p><p>This time we will focus on implementing Websockets using URLSession capabilities.</p><h2>Before iOS 13</h2><p>Previosly if you wanted to use Websockets in Apple platforms you had to rely on <a href="https://developer.apple.com/documentation/cfnetwork">CFNetwork</a> which was added in iOS 2.0. It is using C based foundation streams. You then have to deal with pointers and memory allocation issues which is quite common in C language.</p><p>Another way was to use third party solutions like <a href="https://github.com/daltoniam/Starscream">Starscream</a> which I have <a href="https://kristaps.me/websockets-swift/">described before</a>.</p><h2>Websockets using URLSession</h2><p>Here are three ways how you can construct a Websocket using <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask">URLSessionWebSocketTask</a> class provided by <a href="https://developer.apple.com/documentation/foundation/urlsession">URLSession</a>:</p><pre><code><span class="keyword">func</span> webSocketTask(with: <span class="type">URL</span>) -&gt; <span class="type">URLSessionWebSocketTask</span>
<span class="keyword">func</span> webSocketTask(with: <span class="type">URLRequest</span>) -&gt; <span class="type">URLSessionWebSocketTask</span>
<span class="keyword">func</span> webSocketTask(with: <span class="type">URL</span>, protocols: [<span class="type">String</span>]) -&gt; <span class="type">URLSessionWebSocketTask</span>
</code></pre><h3>Opening connection</h3><p>To create and open Websocket connection:</p><pre><code><span class="keyword">let</span> urlSession = <span class="type">URLSession</span>(configuration: .<span class="dotAccess">default</span>)
<span class="keyword">let</span> webSocketTask = urlSession.<span class="call">webSocketTask</span>(with: <span class="string">"wss://echo.websocket.org"</span>)
webSocketTask.<span class="call">resume</span>()
</code></pre><h3>Sending messages</h3><p>When connection has been established you can send <code>Data</code> or <code>String</code> message using <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/3281790-send">URLSessionWebSocketTask.send</a> function. You need to construct message with <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/message">URLSessionWebSocketTask.Message</a> enum type.</p><pre><code><span class="keyword">let</span> message = <span class="type">URLSessionWebSocketTask</span>.<span class="type">Message</span>.<span class="call">string</span>(<span class="string">"Hello World"</span>)
webSocketTask.<span class="call">send</span>(message) { error <span class="keyword">in
  if let</span> error = error {                
    <span class="call">print</span>(<span class="string">"WebSocket couldn‚Äôt send message because:</span> \(error)<span class="string">"</span>)
  }
}
</code></pre><h3>Receiving messages</h3><p>To receive messages from the server you need to use <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/3281789-receive">URLSessionWebSocketTask.receive</a> method. It accepts completion handler which is a <a href="https://developer.apple.com/documentation/swift/result">Result</a> of <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/message">Message</a> type.</p><pre><code>webSocketTask.<span class="call">receive</span> { result <span class="keyword">in
  switch</span> result {
  <span class="keyword">case</span> .<span class="dotAccess">failure</span>(<span class="keyword">let</span> error):
    <span class="call">print</span>(<span class="string">"Error in receiving message:</span> \(error)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">success</span>(<span class="keyword">let</span> message):
    <span class="keyword">switch</span> message {
    <span class="keyword">case</span> .<span class="dotAccess">string</span>(<span class="keyword">let</span> text):
      <span class="call">print</span>(<span class="string">"Received string:</span> \(text)<span class="string">"</span>)
    <span class="keyword">case</span> .<span class="dotAccess">data</span>(<span class="keyword">let</span> data):
      <span class="call">print</span>(<span class="string">"Received data:</span> \(data)<span class="string">"</span>)
    }
  }
}
</code></pre><p>Be aware that if you want to receive messages continuously you need to call this again once you are done with receiving a message. One way is to wrap this in a function and call the same function recursively.</p><pre><code><span class="keyword">func</span> receiveMessage() {
  webSocketTask.<span class="call">receive</span> { result <span class="keyword">in
    switch</span> result {
    <span class="keyword">case</span> .<span class="dotAccess">failure</span>(<span class="keyword">let</span> error):
      <span class="call">print</span>(<span class="string">"Error in receiving message:</span> \(error)<span class="string">"</span>)
    <span class="keyword">case</span> .<span class="dotAccess">success</span>(<span class="keyword">let</span> message):
      <span class="keyword">switch</span> message {
      <span class="keyword">case</span> .<span class="dotAccess">string</span>(<span class="keyword">let</span> text):
        <span class="call">print</span>(<span class="string">"Received string:</span> \(text)<span class="string">"</span>)
      <span class="keyword">case</span> .<span class="dotAccess">data</span>(<span class="keyword">let</span> data):
        <span class="call">print</span>(<span class="string">"Received data:</span> \(data)<span class="string">"</span>)
      }
      
      <span class="keyword">self</span>.<span class="call">receiveMessage</span>()                
    }
  }	
}
</code></pre><h3>Pings and pongs</h3><p>To keep connection active with the server it is a good approach to send PING message with an interval. You can achieve that with <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/3181206-sendping">URLSessionWebSocketTask.sendPing</a> function.</p><pre><code><span class="keyword">func</span> sendPing() {
  webSocketTask.<span class="call">sendPing</span> { (error) <span class="keyword">in
    if let</span> error = error {
      <span class="call">print</span>(<span class="string">"Sending PING failed:</span> \(error)<span class="string">"</span>)
    }

    <span class="type">DispatchQueue</span>.<span class="property">main</span>.<span class="call">asyncAfter</span>(deadline: .<span class="call">now</span>() + <span class="number">10</span>) {
      <span class="keyword">self</span>.<span class="call">sendPing</span>()
    }
  }
}
</code></pre><p>Here again you need to take care of the next PING sending yourself. Easiest way is to just use DispatchQueue or Timer functionality.</p><h3>Close connection</h3><p>Once you‚Äôre done and would like to close the Websocket connection you need to send a close code which is a <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/closecode">URLSessionWebSocketTask.CloseCode</a> enum type.</p><pre><code>webSocketTask.<span class="call">cancel</span>(closeCode: .<span class="dotAccess">goingAway</span>, reason: <span class="keyword">nil</span>)
</code></pre><h3>Checking connection state</h3><p>To monitor connection status you can use <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsocketdelegate">URLSessionWebSocketDelegate</a> protocol. You can check once connection has been opened or closed.</p><pre><code><span class="comment">/// connection disconnected</span>
<span class="keyword">func</span> urlSession(<span class="keyword">_</span> session: <span class="type">URLSession</span>, 
                webSocketTask: <span class="type">URLSessionWebSocketTask</span>,
                didCloseWith closeCode: <span class="type">URLSessionWebSocketTask</span>.<span class="type">CloseCode</span>,
                reason: <span class="type">Data</span>?)

<span class="comment">// connection established</span>
<span class="keyword">func</span> urlSession(<span class="keyword">_</span> session: <span class="type">URLSession</span>,
                webSocketTask: <span class="type">URLSessionWebSocketTask</span>,
                didOpenWithProtocol protocol: <span class="type">String</span>?)
</code></pre><h2>TL;DR</h2><p>Apple has finally added Websockets as first-class citzen to its platforms. Of course there are small quirks and rough edges. For instance, you can‚Äôt receive messages continously, but you don‚Äôt need to mess with constructing Websocket frame anymore which is a big win.</p><p>Right now it is available only for latest betas and if you support older versions of iOS, tvOS, watchOS or macOS you need to think about backwards compatibility yourself.</p><h2>Links</h2><ul><li><a href="https://developer.apple.com/documentation/foundation">URLsession documentation</a></li><li><a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask">URLSessionWebSocketTask documentation</a></li><li><a href="https://developer.apple.com/documentation/foundation/urlsessionwebsocketdelegate">URLSessionWebSocketDelegate documentation</a></li><li><a href="https://appspector.com/blog/websockets-in-ios-using-urlsessionwebsockettask">Blogpost by AppSpector</a></li><li><a href="https://kristaps.me/websockets-swift/">My previous blogpost about using Websockets</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/wwdc-2019</guid><title>WWDC 2019</title><description>This year I finally had a chance to attend [WWDC](https://developer.apple.com/wwdc19/) (Apple Worldwide Developers Conference). It has always been my dream to go there and see the Keynote, conference and all other events with my own eyes.</description><link>https://kristaps.me/blog/wwdc-2019</link><pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>This year I finally had a chance to attend <a href="https://developer.apple.com/wwdc19/">WWDC</a> (Apple Worldwide Developers Conference). It has always been my dream to go there and see the Keynote, conference and all other events with my own eyes.</p><img src="https://kristaps.me/assets/img/wwdc2019/ios-craig-federighi.jpg" alt="Keynote"/><h2>Waiting</h2><p>First thing what comes into my mind about this event is waiting. You need to line up for getting the badge, food and sessions. For everything, really.</p><img src="https://kristaps.me/assets/img/wwdc2019/waiting.jpg" alt="Waiting in line for Keynote WWDC 2019"/><p>The biggest wait is for the Monday morning Keynote presentation, of course. Some people started to wait for it on the previous evening, but usually people arrive at 5AM in the morning. I arrived at 7:30AM and got a decent seat in 12th row. I was sitting right next to some other folks who arrived an hour earlier than me. I guess I was lucky.</p><p>While you‚Äôre waiting go and talk to others! For me it is quite hard to start a conversation with strangers, but most of the attendees are there to socialize and meet other people.</p><h2>Labs</h2><p>Everyone who has attended WWDC is telling that you need to go to labs. Sessions are recored and you can watch them afterwards, but talking with Apple employees is something you can only get during this event. I would suggest to make appointments to labs as early as you can. Not only will you have more questions to prep, appointment times also fill up pretty quickly.</p><img src="https://kristaps.me/assets/img/wwdc2019/labs.jpg" alt="App Store Labs"/><p>Preparation is the key when you want to get most out of the labs. Having questions, test project and showing actual code with your app helps a lot. And even Apple folks are humans. Sometimes they don‚Äôt have answers to everything but can at least steer you in the right direction.</p><p>While you are waiting in the line for appointment or next free Apple engineer, talk with others around you. You can learn, exchange opinions or even get answers while you‚Äôre still in the queue.</p><h2>Meeting people</h2><p>We all know that developers are bad at socializing, but most of them are willing to talk about common subjects and share their experience. Be the person who starts the conversation. Either it is during the lunch, waiting for the appointment in labs or in a party. I went there alone and didn‚Äôt have a company, so I had nothing to loose.</p><p>Try to connect with people who you meet in Twitter, LinkedIn or email. You can never underestimate all the connections that can come handy at some point or you can learn from each other's work or experience.</p><img src="https://kristaps.me/assets/img/wwdc2019/with-chris-lattner.jpg" alt="Meeting Chris Lattner"/><p>During this week you can meet a lot of well known people from the community because most of them are there in San Jose. I had chance to meet many of them. During try! Swift I met <a href="https://twitter.com/clattner_llvm">Chris Lattner</a> who is the creator of the Swift language. This event was one of the highlight's of the week because I made my first contribution to the Swift language which will be included in upcoming Xcode version.</p><h2>TL;DR</h2><p>A lot of things are happening during WWDC week and it is easy to be overwhelmed. Besides WWDC itself there are many events like <a href="http://altconf.com/">Altconf</a> and <a href="https://www.tryswift.co/events/2019/sanjose/">try! Swift</a>. Every evening multiple meetups, parties and other events are happening.</p><p>Everyone is so much excited and hyped about the new technologies, APIs and products, but what happens afterwards? Once you go back home to regular jobs, projects and apps it is hard to implement these new things right away. You can't and shouldn't rewrite existing working products. It just does not make any sense.</p><p>I think WWDC is a great conference and we need to look about all these new things in long term rather jumping and using it all from day zero.</p><h2>Links</h2><ul><li><a href="https://developer.apple.com/wwdc19/">WWDC19</a></li><li><a href="http://altconf.com/">AltConf</a></li><li><a href="https://www.tryswift.co/events/2019/sanjose/">try! Swift</a></li><li><a href="https://developer.apple.com/">Apple Developer portal</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/uiview-vs-calayer</guid><title>UIView vs CALayer</title><description>Here's something useful to know - [UIView‚Äôs](https://developer.apple.com/documentation/uikit/uiview) are backed by [CALayer‚Äôs](https://developer.apple.com/documentation/quartzcore/calayer). Layers offer a lower-level interface to the visual content. When we need more flexibility or performance, we can go to layer level.</description><link>https://kristaps.me/blog/uiview-vs-calayer</link><pubDate>Fri, 3 May 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Here's something useful to know - <a href="https://developer.apple.com/documentation/uikit/uiview">UIView‚Äôs</a> are backed by <a href="https://developer.apple.com/documentation/quartzcore/calayer">CALayer‚Äôs</a>. Layers offer a lower-level interface to the visual content. When we need more flexibility or performance, we can go to layer level.</p><img src="https://kristaps.me/assets/img/uiview-calayer.png" alt="Each UIView has an assigned layer"/><p>One good example is animations. UIView animations are so called ‚Äústock‚Äù or "low cost" animations. When we need more flexibility we can go one level deeper to layers and use <a href="">Core Animation</a> instead UIView animations.</p><p>To understand more about views and layers let‚Äôs see how they differ.</p><h2>UIView</h2><p>Views have more complex hierarchy layouts. To lay them out on the screen we can use <a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/index.html">Auto Layout</a>.</p><p>They can receive user interactions like taps, pinches, cliks and more.</p><p>When you need to create custom views, you can subclass UIView or many other specialized types provided by <a href="https://developer.apple.com/documentation/uikit">UIKit</a> or <a href="https://developer.apple.com/documentation/appkit">AppKit</a>. They are very flexible to do that.</p><p>Working with UIViews happens on the main thread, it means it is using CPU power.</p><h2>CALayer</h2><p>Layers on other hand have simpler hierarchy. That means they are faster to resolve and quicker to draw on the screen.</p><p>There is no responder chain overhead unlike with views.</p><p>CALayer has no custom logic by default. It means that they are not so flexible and fewer classes to subclass for specific needs.</p><p>Layers are drawn directly on the GPU. It happens on a separate thread without burdening the CPU.</p><h2>TL;DR;</h2><p>Each UIView is backed by CALayer which is one level deeper. Views are being drawn using CPU on the main thread. Drawing layers on other hand is on separate thread using GPU power. When you need more flexibility you can move one level down from UIView by using CALayer capabilities.</p><h2>Links</h2><ul><li><a href="https://www.raywenderlich.com/402-calayer-tutorial-for-ios-getting-started">Ray Wenderlich</a></li><li><a href="https://dzone.com/articles/ios-brownbag-views-vs-layers">iOS Brownbag: Views vs. Layers</a></li><li><a href="https://www.objc.io/issues/12-animations/view-layer-synergy/">View-Layer Synergy</a></li><li><a href="https://developer.apple.com/documentation/uikit/uiview">UIView documentation</a></li><li><a href="https://developer.apple.com/documentation/quartzcore/calayer">CALayer documentation</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/what-is-animation-core-animation</guid><title>What is (Core) Animation</title><description>Animation has been an important part of the Mac OS X user interface since the very beginning. You‚Äôve probably seen the Genie effect, which occurs when you minimize an application, so many times that you hardly notice it anymore. Apple integrates animation into its operating systems and applications, and it is becoming so commonplace that users are starting to expect it. Core Animation is a group of features that makes it easy to build animated user interfaces for the Apple ecosystem devices like iPhone, iPad, Apple TV, and Mac.</description><link>https://kristaps.me/blog/what-is-animation-core-animation</link><pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Animation has been an important part of the Mac OS X user interface since the very beginning. You‚Äôve probably seen the Genie effect, which occurs when you minimize an application, so many times that you hardly notice it anymore.</p><p>Apple integrates animation into its operating systems and applications, and it is becoming so commonplace that users are starting to expect it.</p><p>Core Animation is a group of features that makes it easy to build animated user interfaces for the Apple ecosystem devices like iPhone, iPad, Apple TV, and Mac.</p><img src="https://kristaps.me/assets/img/cat-animation.gif" alt="Cat animation"/><h2>What is Animation?</h2><p>Animation is a change of value or state over time. If we look closer at the cat animation above, it consists of two animations. Firstly, cat slides from left to right, which is a value change of X axis coordinate over time. Secondly, picture fades out, and that is a state value change.</p><p>We always need to think about value or state we would like to change, end time (when we want this animation to finish), and sometimes begin time if we want to delay the animation.</p><h2>What is Core Animation?</h2><p>Core Animation is a graphics compositing framework provided by Apple to build animated user interfaces. The project's initial codename was Layer Kit, and it first appeared in Mac OS X Leopard on 7 August 2006. It was created by John Harper.</p><img src="https://kristaps.me/assets/img/core-animation-logo.png" alt="Core Animation"/><p>Core Animation was introduced with the first iPhone on 9 January 2007. Steve Jobs explained that it runs adapted version of Mac OS X, and that included Core Animation framework as well.</p><p>Core Animation provides high frame rates and smooth animations without burdening the CPU and slowing down your app, according to Apple documentation.</p><h2>TL;DR</h2><p>Core Animation's developer-focused marketing slogan is "Render, compose, and animate visual elements". This shows us that Apple wants us to use Core Animation for more sophisticated UI tasks, when using UIView animations is not enough.</p><h2>Links</h2><ul><li><a href="https://developer.apple.com/documentation/quartzcore">Core Animation documentation</a></li><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html">Core Animation Programming Guide</a></li><li><a href="https://pragprog.com/book/bdcora/core-animation-for-mac-os-x-and-the-iphone">Core Animation for Mac OS X and the iPhone</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/animating-shapes-in-ios</guid><title>Animating shapes in iOS</title><description>Animating a UIBezierPath drawing is a pretty trivial task. But how to animate shape morphing, i.e. make one shape change into another? (For instance, morphing a triangle into a square.) To accomplish this, we need to use CAShapeLayer and animate its properties using Core Animation capabilities.</description><link>https://kristaps.me/blog/animating-shapes-in-ios</link><pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Animating a <code>UIBezierPath</code> drawing is a pretty trivial task. But how to animate shape morphing, i.e. make one shape change into another? (For instance, morphing a triangle into a square.) To accomplish this, we need to use <code>CAShapeLayer</code> and animate its properties using Core Animation capabilities.</p><p>First things first, let‚Äôs see which properties of <code>CAShapeLayer</code> can be animated with Core Graphics:</p><ul><li>Path</li><li>Fill color</li><li>Line dash phase</li><li>Line width</li><li>Miter limit</li><li>Stroke color</li><li>Stroke start and end.</li></ul><h2>Shape morphing</h2><p>To animate shape morphing, we need to change the <code>path</code> property. Keep in mind that both shapes need to have the same number of points that comprise them. Otherwise, the animation would end up looking clunky and unnatural.</p><img src="https://kristaps.me/assets/img/ugly-animation-from-square-to-triangle.gif" alt="Ugly animation from square to triangle"/><p>Even <a href="https://developer.apple.com/documentation/quartzcore/cashapelayer/1521904-path?language=objc">Apple‚Äôs official documentation</a> is warning us about that.</p><blockquote><p>Paths will interpolate as a linear blend of the "on-line" points; ‚Äùoff-line‚Äù points may be interpolated non-linearly (e.g. to preserve continuity of the curve's derivative). If the two paths have a different number of control points or segments the results are undefined. If the path extends outside the layer bounds it will not automatically be clipped to the layer, only if the normal layer masking rules cause that.</p></blockquote><p>If we have same amount of points for both paths we can achieve much nicer animation.</p><img src="https://kristaps.me/assets/img/nice-animation-from-square-to-triangle.gif" alt="Nice animation from square to triangle"/><h2>Combining multiple animations</h2><p>The next step is to combine multiple <code>CGPath</code> animations together. To accomplish this, we can use <code>CAAnimationGroup</code>, which allows multiple animations to be grouped and run concurrently.</p><p>Be aware that you need to set correct <code>beginTime</code> for each animation so that they would start one after another. Animation properties like <code>duration</code>, <code>autoReverses</code>, <code>repeatCount</code> and others need to be set on the animation group object.</p><pre><code><span class="keyword">let</span> animationGroup = <span class="type">CAAnimationGroup</span>()
animationGroup.<span class="property">animations</span> = [...]
animationGroup.<span class="property">autoreverses</span> = <span class="keyword">true</span>
animationGroup.<span class="property">repeatCount</span> = .<span class="dotAccess">greatestFiniteMagnitude</span>
animationGroup.<span class="property">duration</span> = <span class="number">2.0</span>

</code></pre><img src="https://kristaps.me/assets/img/animation-multiple-shapes.gif" alt="Animation with multiple shapes"/><h2>TL;DR</h2><p><code>CAAnimationGroup</code> is a powerful feature that allows for several uses, from Core Animation to grouping multiple <code>CABasicAnimation</code>s together. If you want to animate from one path to another, be aware that <em>from</em> and <em>to</em> paths should have the same amount of points. Otherwise, the animation would look off because the animation algorithms can‚Äôt interpolate these points correctly.</p><h2>Links</h2><ul><li><a href="https://developer.apple.com/documentation/quartzcore/cashapelayer/1521904-path">Apple's CAShapeLayer path documentation</a></li><li><a href="https://calayer.com/core-animation/2017/12/25/cashapelayer-in-depth-part-ii.html">CAShapeLayer in Depth</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/websockets-swift</guid><title>Websockets in iOS using Swift</title><description>WebSockets allow for extremely fast two-way networking communication, which lets you send and receive updates quicker and more often, not to mention securely. WebSocket is a communication protocol that uses sockets, providing duplex communication over a single TCP connection. It was standardized by the [IETF](https://tools.ietf.org/html/rfc6455) in 2011 and is a different protocol from HTTP.</description><link>https://kristaps.me/blog/websockets-swift</link><pubDate>Sat, 5 Jan 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>WebSockets allow for extremely fast two-way networking communication, which lets you send and receive updates quicker and more often, not to mention securely. WebSocket is a communication protocol that uses sockets, providing duplex communication over a single TCP connection. It was standardized by the <a href="https://tools.ietf.org/html/rfc6455">IETF</a> in 2011 and is a different protocol from HTTP.</p><p>WebSockets are widely used in chat apps, streaming real-time notifications, and stock prices.</p><h2>Websocket lifecycle</h2><h3>Shaking hands with the server</h3><p>The <a href="https://tools.ietf.org/html/rfc6455#section-4">handshake</a> app is the web part in WebSockets. It's the bridge from HTTP to WebSocket. The client sends a pretty standard HTTP GET <a href="https://tools.ietf.org/html/rfc6455#section-4.2.1">request</a> to the server:</p><pre><code class="language-no-highlight">GET /chat HTTP/1.1
Host: example.com:8000
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
Sec-WebSocket-Version: 1
</code></pre><p>The most interesting thing here is <code>Sec-WebSocket-Key</code> which is needed for security reasons and is generated according to the <a href="http://tools.ietf.org/html/rfc6455#page-7">WebSocket standard</a>.</p><p>The server validates the request and, if everything is fine, sends back an HTTP <a href="https://tools.ietf.org/html/rfc6455#section-4.2.2">response</a>:</p><pre><code class="language-no-highlight">HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
</code></pre><h3>Exchange the information</h3><p>At any time, the server or client can send data that follows this specific format:</p><img src="https://kristaps.me/assets/img/websocket-frame-format.png" alt="Websocket Frame Format"/><p>I will not go over each part, but you can find out more in the <a href="https://tools.ietf.org/html/rfc6455#section-5.6">standard</a>.</p><h3>Pings and pongs</h3><p>At any point, the client or server can send a <a href="https://tools.ietf.org/html/rfc6455#section-5.5.2">ping</a>, and other party must send back a <a href="https://tools.ietf.org/html/rfc6455#section-5.5.3">pong</a>.</p><h3>Closing</h3><p>Connection can be closed by any party via sending a <a href="https://tools.ietf.org/html/rfc6455#section-5.5.1">specified control sequence</a>.</p><h2>Implementing WebSockets in iOS</h2><p>Implementing WebSockets in iOS, macOS, tvOS or watchOS isn‚Äôt a trivial task. New <a href="https://developer.apple.com/documentation/network">Network.framework</a> can simplify that but you still need to deal with underlying tasks like upgrading connection and setting up a WebSocket frame.</p><h3>Starscream</h3><p>The Swift WebSocket client library <a href="https://github.com/daltoniam/Starscream">Startscream</a> simplifies all the heavy-lifting tasks. Install the library and import it in any Swift file.</p><pre><code><span class="keyword">import</span> Starscream
</code></pre><h3>Creating the connection</h3><p>After that, create a connection and set up the delegate.</p><pre><code><span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"ws://echo.websocket.org"</span>)!
<span class="keyword">let</span> request = <span class="type">URLRequest</span>(url: url)
<span class="keyword">let</span> websocket = <span class="type">WebSocket</span>(request: request)
</code></pre><h3>Setting up delegation</h3><p>Then we need to set up delegate and implement <code>didReceive</code> method with event <code>WebSocketEvent</code> type.</p><pre><code><span class="keyword">func</span> didReceive(event: <span class="type">WebSocketEvent</span>, client: <span class="type">WebSocket</span>) {
  <span class="keyword">switch</span> event {
  <span class="keyword">case</span> .<span class="dotAccess">connected</span>(<span class="keyword">let</span> headers):
    <span class="call">print</span>(<span class="string">"connected</span> \(headers)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">disconnected</span>(<span class="keyword">let</span> reason, <span class="keyword">let</span> closeCode):
    <span class="call">print</span>(<span class="string">"disconnected</span> \(reason) \(closeCode)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">text</span>(<span class="keyword">let</span> text):
    <span class="call">print</span>(<span class="string">"received text:</span> \(text)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">binary</span>(<span class="keyword">let</span> data):
    <span class="call">print</span>(<span class="string">"received data:</span> \(data)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">pong</span>(<span class="keyword">let</span> pongData):
    <span class="call">print</span>(<span class="string">"received pong:</span> \(pongData)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">ping</span>(<span class="keyword">let</span> pingData):
    <span class="call">print</span>(<span class="string">"received ping:</span> \(pingData)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">error</span>(<span class="keyword">let</span> error):
    <span class="call">print</span>(<span class="string">"error</span> \(error)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">viabilityChanged</span>:
    <span class="call">print</span>(<span class="string">"viabilityChanged"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">reconnectSuggested</span>:
    <span class="call">print</span>(<span class="string">"reconnectSuggested"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">cancelled</span>:
    <span class="call">print</span>(<span class="string">"cancelled"</span>)
  }
}
</code></pre><p>Once this is done, we can start the connection. Making the handshake and upgrading connection is done behind the scenes by the library.</p><pre><code>socket.<span class="call">connect</span>();
</code></pre><h3>Sending data</h3><p>There are several ways to send data:</p><ul><li>binary</li><li>string</li><li>ping</li><li>pong</li></ul><p>The easiest way is to just send a string:</p><pre><code>socket.<span class="call">write</span>(string: <span class="string">"Hi Server!"</span>)
</code></pre><h3>Closing the connection</h3><p>At any point, we can check close it if it‚Äôs not needed anymore.</p><pre><code>websocket.<span class="call">disconnect</span>(closeCode: <span class="type">CloseCode</span>.<span class="property">goingAway</span>.<span class="property">rawValue</span>)
</code></pre><h2>TL;DR</h2><p>WebSocket isn‚Äôt a first-class citizen in iOS, macOS, tvOS and watchOS. It can be quite overwhelming to implement, use and understand it, but the Swift library Starscream can help you take care of all these tasks.</p><h2>Links</h2><ul><li><a href="https://tools.ietf.org/html/rfc6455">The WebSocket Protocol</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers">Writing WebSocket servers</a></li><li><a href="https://github.com/daltoniam/Starscream">Starscream Swift WebSocket library</a></li><li><a href="https://github.com/ZewoGraveyard/WebSocket/blob/master/Sources/WebSocket/Frame.swift">Websocket Frame implementation in Swift</a></li><li><a href="http://lucumr.pocoo.org/2012/9/24/websockets-101/">WebSockets 101</a></li><li><a href="https://devcenter.heroku.com/articles/websocket-security">WebSocket Security</a></li></ul>]]></content:encoded></item></channel></rss>